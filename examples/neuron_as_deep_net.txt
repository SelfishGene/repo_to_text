================================================================================
repo title: neuron_as_deep_net
repo link: https://github.com/SelfishGene/neuron_as_deep_net
date processed: 2024-10-21
================================================================================
================================================================================
repo file structure:
====================
    README.md
    simulate_L5PC_and_create_dataset.py
    fit_CNN.py
    valid_fitting_results_exploration.py
    dataset_exploration.py
    evaluate_CNN_test.py
    saving_best_valid_CNN_models.py
    main_figure_replication.py
    integrate_and_fire_figure_replication.py
    evaluate_CNN_valid.py
    test_accuracy_vs_complexity.py
    L5PC_NEURON_simulation/
        init.hoc
        L5PCbiophys5b.hoc
        L5PCtemplate_2.hoc
        mods/
            K_Tst.mod
            K_Pst.mod
            Ca_HVA.mod
            ProbAMPANMDA_3.mod
            Nap_Et2.mod
            ProbGABAAB_EMS.mod
            SK_E2.mod
            NaTs2_t.mod
            epsp.mod
            Im.mod
            NaTa_t.mod
            Ca_LVAst.mod
            ProbAMPANMDA2.mod
            CaDynamics_E2.mod
            ProbUDFsyn2.mod
            SKv3_1.mod
            Ih.mod
            ProbAMPANMDA_EMS.mod
        morphologies/
            cell1.asc
================================================================================
================================================================================
README.md:
==========
# Single Cortical Neurons as Deep Networks  
This repo contains the code behind the work "[Single Cortical Neurons as Deep Artificial Neural Networks](https://www.cell.com/neuron/fulltext/S0896-6273(21)00501-8)"  

![Graphical Abstract](https://i.im.ge/2021/08/13/mybwx.png)

## Single Cortical Neurons as Deep Artificial Neural Networks  
David Beniaguev, Idan Segev, Michael London

**Abstract**: *Utilizing recent advances in machine learning, we introduce a systematic approach to characterize neurons’ input/output (I/O) mapping complexity. Deep neural networks (DNNs) were trained to faithfully replicate the I/O function of various biophysical models of cortical neurons at millisecond (spiking) resolution. A temporally convolutional DNN with five to eight layers was required to capture the I/O mapping of a realistic model of a layer 5 cortical pyramidal cell (L5PC). This DNN generalized well when presented with inputs widely outside the training distribution. When NMDA receptors were removed, a much simpler network (fully connected neural network with one hidden layer) was sufficient to fit the model. Analysis of the DNNs’ weight matrices revealed that synaptic integration in dendritic branches could be conceptualized as pattern matching from a set of spatiotemporal templates. This study provides a unified characterization of the computational complexity of single neurons and suggests that cortical networks therefore have a unique architecture, potentially supporting their computational power.*

## Resources
Neuron version of paper: [cell.com/neuron/fulltext/S0896-6273(21)00501-8](https://www.cell.com/neuron/fulltext/S0896-6273(21)00501-8)  
Open Access (slightly older) version of Paper: [biorxiv.org/content/10.1101/613141v2](https://www.biorxiv.org/content/10.1101/613141v2)  
Dataset and pretrained networks: [kaggle.com/selfishgene/single-neurons-as-deep-nets-nmda-test-data](https://www.kaggle.com/selfishgene/single-neurons-as-deep-nets-nmda-test-data)  
Dataset for training new models: [kaggle.com/selfishgene/single-neurons-as-deep-nets-nmda-train-data](https://www.kaggle.com/selfishgene/single-neurons-as-deep-nets-nmda-train-data)  
Notebook with main result: [kaggle.com/selfishgene/single-neuron-as-deep-net-replicating-key-result](https://www.kaggle.com/selfishgene/single-neuron-as-deep-net-replicating-key-result)  
Notebook exploring the dataset: [kaggle.com/selfishgene/exploring-a-single-cortical-neuron](https://www.kaggle.com/selfishgene/exploring-a-single-cortical-neuron)  
Twitter thread for short visual summery #1: [twitter.com/DavidBeniaguev/status/1131890349578829825](https://twitter.com/DavidBeniaguev/status/1131890349578829825)  
Twitter thread for short visual summery #2: [twitter.com/DavidBeniaguev/status/1426172692479287299](https://twitter.com/DavidBeniaguev/status/1426172692479287299)  
Figure360, author presentation of Figure 2 from the paper: [youtube.com/watch?v=n2xaUjdX03g](https://www.youtube.com/watch?v=n2xaUjdX03g)  
  

![single neuron as deep net illustration](https://user-images.githubusercontent.com/11506338/77857795-71a27b00-7208-11ea-937a-74cb6e414281.PNG)  

## Integrate and Fire code
- Use `integrate_and_fire_figure_replication.py` to simulate, fit, evaluate and replicate the introductory figure in the paper (Fig. 1)

## Single cortical neuron simulation code
![single neuron simulation illustration image](https://pbs.twimg.com/media/D7U15SSXoAAM-Js?format=jpg&name=4096x4096)
- Use `simulate_L5PC_and_create_dataset.py` to simulate a single neuron
  - All major parameters are documented inside the file using comments  
  - All necessary NEURON `.hoc` and `.mod` simulation files are under the folder `L5PC_NEURON_simulation\`
- Use `dataset_exploration.py` to explore the generated dataset
- Alternativley, just download the [data](https://www.kaggle.com/selfishgene/single-neurons-as-deep-nets-nmda-test-data) from kaggle, and look at exploration [script](https://www.kaggle.com/selfishgene/exploring-a-single-cortical-neuron)

### Note: we use the NEURON simulator for the L5PC simulation. More details about NEURON below
- neuron github repo: [github.com/neuronsimulator/nrn](https://github.com/neuronsimulator/nrn)  
- recommended introductory NEURON tutorial: [github.com/orena1/NEURON_tutorial
](https://github.com/orena1/NEURON_tutorial)  
- official NEURON with python tutorial: [neuron.yale.edu/neuron/static/docs/neuronpython/index.html](https://neuron.yale.edu/neuron/static/docs/neuronpython/index.html)  
- NEURON help fortum: [neuron.yale.edu/phpBB/index.php?sid=31f0839c5c63ca79d80790460542bbf3](https://www.neuron.yale.edu/phpBB/index.php?sid=31f0839c5c63ca79d80790460542bbf3)  

## TCN fitting and evaluation code
![fitting TCN to single neurons](https://pbs.twimg.com/media/D7U4O3HWsAI2YKK?format=png&name=900x900)
- `fit_CNN.py` contains the code used to fit a network to the dataset  
- `evaluate_CNN_test.py` and `evaluate_CNN_valid.py` contains the code used to evaluate the performace of the networks on test and validation sets

## Analysis code
- Use `main_figure_replication.py` to replicate the main figures (Fig. 2 & Fig. 3) after generating data and training models
- `valid_fitting_results_exploration.py` can be used to explore the fitting results on validation dataset
- `test_accuracy_vs_complexity.py` can be used to generate the model accuracy vs complexity plots (Fig. S5)
- Alternativley, visit key figure replication [notebook](https://www.kaggle.com/selfishgene/single-neuron-as-deep-net-replicating-key-result) on kaggle


## Acknowledgements
We thank Oren Amsalem, Guy Eyal, Michael Doron, Toviah Moldwin, Yair Deitcher, Eyal Gal and all lab members of the Segev and London Labs for many fruitful discussions and valuable feedback regarding this work.

If you use this code or dataset, please cite the following two works:  

1. David Beniaguev, Idan Segev and Michael London. "Single cortical neurons as deep artificial neural networks." Neuron. 2021; 109: 2727-2739.e3 doi: https://doi.org/10.1016/j.neuron.2021.07.002
1. Hay, Etay, Sean Hill, Felix Schürmann, Henry Markram, and Idan Segev. 2011. “Models of Neocortical
Layer 5b Pyramidal Cells Capturing a Wide Range of Dendritic and Perisomatic Active Properties.”
Edited by Lyle J. Graham. PLoS Computational Biology 7 (7): e1002107.
doi: https://doi.org/10.1371/journal.pcbi.1002107.

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/K_Tst.mod:
======================================
:Comment : The transient component of the K current
:Reference : :		Voltage-gated K+ channels in layer 5 neocortical pyramidal neurones from young rats:subtypes and gradients,Korngreen and Sakmann, J. Physiology, 2000
:Comment : shifted -10 mv to correct for junction potential
:Comment: corrected rates using q10 = 2.3, target temperature 34, orginal 21

NEURON	{
	SUFFIX K_Tst
	USEION k READ ek WRITE ik
	RANGE gK_Tstbar, gK_Tst, ik
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gK_Tstbar = 0.00001 (S/cm2)
}

ASSIGNED	{
	v	(mV)
	ek	(mV)
	ik	(mA/cm2)
	gK_Tst	(S/cm2)
	mInf
	mTau
	hInf
	hTau
}

STATE	{
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gK_Tst = gK_Tstbar*(m^4)*h
	ik = gK_Tst*(v-ek)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)

	UNITSOFF
		v = v + 10
		mInf =  1/(1 + exp(-(v+0)/19))
		mTau =  (0.34+0.92*exp(-((v+71)/59)^2))/qt
		hInf =  1/(1 + exp(-(v+66)/-10))
		hTau =  (8+49*exp(-((v+73)/23)^2))/qt
		v = v - 10
	UNITSON
}

================================================================================
================================================================================
saving_best_valid_CNN_models.py:
================================
import os
import numpy as np
import pandas as pd
import shutil
import json
import glob
import time
from keras.models import Model, load_model

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% copy models from models folder to best models folder according to the "best_results_valid_105_models.csv" file

models_dir      = '/Reseach/Single_Neuron_InOut/models/'
best_models_dir = '/Reseach/Single_Neuron_InOut/models/best_models/'

# load pandas dataframe and extract filenames of best models
best_models_df  = pd.read_csv(best_models_dir + 'best_results_valid_105_models.csv')
all_best_models = best_models_df['full model filename'].tolist()

# find all models
all_models = glob.glob(models_dir + '*/*.h5')
all_model_names = [x.split('/')[-1].split('.')[0] for x in all_models]

# get intersection of all existing models and requested best models
all_best_model_names_short = list(set(all_model_names).intersection(set(all_best_models)))

# determine full paths of all best models
all_best_models_names_full = []
for model_name_short in all_best_model_names_short:
    model_name_full = glob.glob(models_dir + '*/' + model_name_short + '.h5')[0]
    all_best_models_names_full.append(model_name_full)

models_to_resave = all_best_models_names_full

print('-----')
print(len(all_model_names))
print(len(all_best_model_names_short))
print(len(all_best_models_names_full))
print('-----')

print('number of all models in total %d' %(len(all_model_names)))
print('number of best models to resave is %d' %(len(models_to_resave)))
print('-----------------------------------------------')

print('models that will be evaluated are:')
for k, curr_model_name in enumerate(all_best_models_names_full):
    print('%d: %s' %(k + 1, curr_model_name))
print('-----------------------------------------------')

# loop over all models that need saving
for k, model_filename in enumerate(models_to_resave):

    print('------------------------------')
    print('starting re-saving of model %d' %(k + 1))
    print('------------------------------')
    
    saving_start_time = time.time()
    only_model_filename = model_filename.split('/')[-1]

    print('------------------------------------------------------------------------------------------------------------')
    print('loading model "%s"' %(only_model_filename))

    # load current model
    temporal_conv_net = load_model(model_filename)
    temporal_conv_net.summary()
    
    # create new folder for the model architecture in "best_models_dir"
    dir_name = best_models_dir + only_model_filename.split('__20')[0] + '/'
    if not os.path.exists(dir_name):
        os.makedirs(dir_name)
    
    # inside new architecture folder save:
    model_prefix = only_model_filename.split('.')[0]
    
    # (*) architecture as json
    json_target_filename = dir_name + model_prefix + '_json.json'
    print('saving architecture json: \n        %s' %(json_target_filename))
    json_string = temporal_conv_net.to_json()
    with open(json_target_filename, 'w') as outfile:
        json.dump(json_string, outfile)

    # (*) weights as hdf5
    weights_target_filename = dir_name + model_prefix + '_weights.h5'
    print('saving weights: \n        %s' %(weights_target_filename))
    temporal_conv_net.save_weights(weights_target_filename)
    
    # (*) save the model directly as hdf5
    model_target_filename = dir_name + model_prefix + '_model.h5'
    temporal_conv_net.save(model_target_filename)
    
    # (*) original training pickle file
    training_pickle_source_filename = model_filename.split('.h5')[0] + '.pickle'
    training_pickle_target_filename = dir_name + model_prefix + '_training.pickle'
    print('copying training pickle file... \n from : %s \n to   : %s' %(training_pickle_source_filename, training_pickle_target_filename))
    shutil.copyfile(training_pickle_source_filename, training_pickle_target_filename)

    # (*) original evaluation pickle file
    try:
        evaluation_pickle_source_filename = glob.glob(models_dir + '*/' + model_prefix + '.pickle')[0]
        evaluation_pickle_target_filename = dir_name + model_prefix + '_evaluation.pickle'
        print('copying evaluation pickle file... \n from : %s \n to   : %s' %(evaluation_pickle_source_filename, evaluation_pickle_target_filename))
        shutil.copyfile(evaluation_pickle_source_filename, evaluation_pickle_target_filename)
    except:
        print('couldnt find evaluation pickle file')

    saving_duration_min = (time.time() - saving_start_time) / 60
    print('time took to re-save model is %.3f minutes' %(saving_duration_min))
    print('------------------------------------------------------------------------------------------------------------')
    
#%%

print('finihsed re-saving script')

================================================================================
================================================================================
fit_CNN.py:
===========
import numpy as np
import pandas as pd
import glob
import time
import sys
import keras
from keras.models import Model, load_model
from keras.optimizers import SGD, Nadam
from keras.layers.normalization import BatchNormalization
from keras.layers import Dense, Dropout, Activation, Flatten, Input, TimeDistributed, Reshape, Permute
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Conv1D, Cropping1D, UpSampling1D, MaxPooling1D, AveragePooling1D
from keras.layers.advanced_activations import LeakyReLU, PReLU, ELU
from keras.regularizers import l1,l2,l1_l2
from keras import initializers
from sklearn import decomposition


# some fixes for python 3
if sys.version_info[0]<3:
    import cPickle as pickle
else:
    import pickle
    basestring = str
    
    
# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

print('-----------------------------------')

# ------------------------------------------------------------------
# fit generator params
# ------------------------------------------------------------------
use_multiprocessing = False
num_workers = 1

print('------------------------------------------------------------------')
print('use_multiprocessing = %s, num_workers = %d' %(str(use_multiprocessing), num_workers))
print('------------------------------------------------------------------')
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# basic configurations and directories
# ------------------------------------------------------------------
synapse_type = 'NMDA'
#synapse_type = 'AMPA'
#synapse_type = 'AMPA_SK'

if synapse_type == 'NMDA':
    num_DVT_components = 20

    train_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_train/'
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_test/'
    models_dir     = '/Reseach/Single_Neuron_InOut/models/NMDA/'
    
elif synapse_type == 'AMPA':
    num_DVT_components = 30

    train_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_train/'
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_test/'
    models_dir     = '/Reseach/Single_Neuron_InOut/models/AMPA/'
    
elif synapse_type == 'AMPA_SK':
    num_DVT_components = 30

    train_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_train/'
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_test/'
    models_dir     = '/Reseach/Single_Neuron_InOut/models/AMPA_SK/'
# ------------------------------------------------------------------


# ------------------------------------------------------------------
# learning schedule params
# ------------------------------------------------------------------

validation_fraction = 0.5
train_file_load = 0.2
valid_file_load = 0.2
num_steps_multiplier = 10

train_files_per_epoch = 6
valid_files_per_epoch = max(1, int(validation_fraction * train_files_per_epoch))

num_epochs = 250

DVT_loss_mult_factor = 0.1

batch_size_per_epoch        = [8] * num_epochs
learning_rate_per_epoch     = [0.0001] * len(batch_size_per_epoch)
loss_weights_per_epoch      = [[1.0, 0.0200, DVT_loss_mult_factor * 0.00005]] * len(batch_size_per_epoch)
num_train_steps_per_epoch   = [100] * len(batch_size_per_epoch)

for i in range(40,num_epochs):
    batch_size_per_epoch[i]    = 8
    learning_rate_per_epoch[i] = 0.00003
    loss_weights_per_epoch[i]  = [2.0, 0.0100, DVT_loss_mult_factor * 0.00003]
    
for i in range(80,num_epochs):
    batch_size_per_epoch[i]    = 8
    learning_rate_per_epoch[i] = 0.00001
    loss_weights_per_epoch[i]  = [4.0, 0.0100, DVT_loss_mult_factor * 0.00001]

for i in range(120,num_epochs):
    batch_size_per_epoch[i]    = 8
    learning_rate_per_epoch[i] = 0.000003
    loss_weights_per_epoch[i]  = [8.0, 0.0100, DVT_loss_mult_factor * 0.0000001]

for i in range(160,num_epochs):
    batch_size_per_epoch[i]    = 8
    learning_rate_per_epoch[i] = 0.000001
    loss_weights_per_epoch[i]  = [9.0, 0.0030, DVT_loss_mult_factor * 0.00000001]

learning_schedule_dict = {}
learning_schedule_dict['train_file_load']           = train_file_load
learning_schedule_dict['valid_file_load']           = valid_file_load
learning_schedule_dict['validation_fraction']       = validation_fraction
learning_schedule_dict['num_epochs']                = num_epochs
learning_schedule_dict['num_steps_multiplier']      = num_steps_multiplier
learning_schedule_dict['batch_size_per_epoch']      = batch_size_per_epoch
learning_schedule_dict['loss_weights_per_epoch']    = loss_weights_per_epoch
learning_schedule_dict['learning_rate_per_epoch']   = learning_rate_per_epoch
learning_schedule_dict['num_train_steps_per_epoch'] = num_train_steps_per_epoch

# ------------------------------------------------------------------



# ------------------------------------------------------------------
# define network architecture params
# ------------------------------------------------------------------

input_window_size = 400
num_segments  = 2*639
num_syn_types = 1

# FCN network architectures
#network_depth = 1
#filter_sizes_per_layer        = [110]
#num_filters_per_layer         = [128]*network_depth

#network_depth = 2
#filter_sizes_per_layer        = [45,1]
#num_filters_per_layer         = [128]*network_depth

#network_depth = 3
#filter_sizes_per_layer        = [25,1,1]
#num_filters_per_layer         = [256]*network_depth


# TCN network architectures
#network_depth = 2
#filter_sizes_per_layer        = [40]*network_depth
#num_filters_per_layer         = [8]*network_depth

#network_depth = 3
#filter_sizes_per_layer        = [20]*network_depth
#num_filters_per_layer         = [8]*network_depth

#network_depth = 4
#filter_sizes_per_layer        = [16]*network_depth
#num_filters_per_layer         = [128]*network_depth

#network_depth = 5
#filter_sizes_per_layer        = [10]*network_depth
#num_filters_per_layer         = [256]*network_depth

#network_depth = 6
#filter_sizes_per_layer        = [13]*network_depth
#num_filters_per_layer         = [128]*network_depth

#network_depth = 7
#filter_sizes_per_layer        = [35]*network_depth
#num_filters_per_layer         = [128]*network_depth

#network_depth = 8
#filter_sizes_per_layer        = [33]*network_depth
#num_filters_per_layer         = [256]*network_depth

# TCN with large first layer filter (for presentation)
#network_depth = 7
#filter_sizes_per_layer        = [54,12,12,12,12,12,12]
#num_filters_per_layer         = [256]*network_depth

network_depth = 3
filter_sizes_per_layer        = [54,24,24]
num_filters_per_layer         = [64] * network_depth

initializer_per_layer         = [0.002] * network_depth
activation_function_per_layer = ['relu'] * network_depth
l2_regularization_per_layer   = [1e-8] * network_depth
strides_per_layer             = [1] * network_depth
dilation_rates_per_layer      = [1] * network_depth


architecture_dict = {}
architecture_dict['network_depth']                 = network_depth
architecture_dict['input_window_size']             = input_window_size
architecture_dict['num_filters_per_layer']         = num_filters_per_layer
architecture_dict['initializer_per_layer']         = initializer_per_layer
architecture_dict['filter_sizes_per_layer']        = filter_sizes_per_layer
architecture_dict['l2_regularization_per_layer']   = l2_regularization_per_layer
architecture_dict['activation_function_per_layer'] = activation_function_per_layer
architecture_dict['strides_per_layer']             = strides_per_layer
architecture_dict['dilation_rates_per_layer']      = dilation_rates_per_layer

print('L2 regularization = %.9f' %(l2_regularization_per_layer[0]))
print('activation function = "%s"' %(activation_function_per_layer[0]))

# ------------------------------------------------------------------


#%% some helper functions

def bin2dict(bin_spikes_matrix):
    spike_row_inds, spike_times = np.nonzero(bin_spikes_matrix)
    row_inds_spike_times_map = {}
    for row_ind, syn_time in zip(spike_row_inds,spike_times):
        if row_ind in row_inds_spike_times_map.keys():
            row_inds_spike_times_map[row_ind].append(syn_time)
        else:
            row_inds_spike_times_map[row_ind] = [syn_time]

    return row_inds_spike_times_map


def dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):
    
    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')
    for row_ind in row_inds_spike_times_map.keys():
        for spike_time in row_inds_spike_times_map[row_ind]:
            bin_spikes_matrix[row_ind,spike_time] = 1.0
    
    return bin_spikes_matrix


def parse_sim_experiment_file_with_DVT(sim_experiment_file, DVT_PCA_model=None, print_logs=False):
    
    if print_logs:
        print('-----------------------------------------------------------------')
        print("loading file: '" + sim_experiment_file.split("\\")[-1] + "'")
        loading_start_time = time.time()
        
    if sys.version_info[0]<3:
        experiment_dict = pickle.load(open(sim_experiment_file, "rb" ))
    else:
        experiment_dict = pickle.load(open(sim_experiment_file, "rb" ),encoding='latin1')
    
    # gather params
    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
    num_segments    = len(experiment_dict['Params']['allSegmentsType'])
    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000
    num_ex_synapses  = num_segments
    num_inh_synapses = num_segments
    num_synapses = num_ex_synapses + num_inh_synapses
    
    # collect X, y_spike, y_soma
    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')
    y_spike = np.zeros((sim_duration_ms,num_simulations))
    y_soma  = np.zeros((sim_duration_ms,num_simulations))
    
    # if we recive PCA model of DVTs, then output the projection on that model, else return the full DVTs
    if DVT_PCA_model is not None:
        num_components = DVT_PCA_model.n_components
        y_DVTs  = np.zeros((num_components,sim_duration_ms,num_simulations), dtype=np.float32)
    else:
        y_DVTs  = np.zeros((num_segments,sim_duration_ms,num_simulations), dtype=np.float16)
    
    # go over all simulations in the experiment and collect their results
    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)
        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)
        X[:,:,k] = np.vstack((X_ex,X_inh))
        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)
        y_spike[spike_times,k] = 1.0
        y_soma[:,k] = sim_dict['somaVoltageLowRes']
        
        # if we recive PCA model of DVTs, then output the projection on that model, else return the full DVTs
        curr_DVTs = sim_dict['dendriticVoltagesLowRes']
        # clip the DVTs (to mainly reflect synaptic input and NMDA spikes (battery ~0mV) and diminish importance of bAP and calcium spikes)
        curr_DVTs[curr_DVTs > 2.0] = 2.0
        if DVT_PCA_model is not None:
            y_DVTs[:,:,k] = DVT_PCA_model.transform(curr_DVTs.T).T
        else:
            y_DVTs[:,:,k] = curr_DVTs
        
    if print_logs:
        loading_duration_sec = time.time() - loading_start_time
        print('loading took %.3f seconds' %(loading_duration_sec))
        print('-----------------------------------------------------------------')

    return X, y_spike, y_soma, y_DVTs


def parse_multiple_sim_experiment_files_with_DVT(sim_experiment_files, DVT_PCA_model=None):
    
    for k, sim_experiment_file in enumerate(sim_experiment_files):
        X_curr, y_spike_curr, y_soma_curr, y_DVT_curr = parse_sim_experiment_file_with_DVT(sim_experiment_file, DVT_PCA_model=DVT_PCA_model)
        
        if k == 0:
            X       = X_curr
            y_spike = y_spike_curr
            y_soma  = y_soma_curr
            y_DVT   = y_DVT_curr
        else:
            X       = np.dstack((X,X_curr))
            y_spike = np.hstack((y_spike,y_spike_curr))
            y_soma  = np.hstack((y_soma,y_soma_curr))
            y_DVT   = np.dstack((y_DVT,y_DVT_curr))

    return X, y_spike, y_soma, y_DVT


def parse_sim_experiment_file(sim_experiment_file):
    
    print('-----------------------------------------------------------------')
    print("loading file: '" + sim_experiment_file.split("\\")[-1] + "'")
    loading_start_time = time.time()
    experiment_dict = pickle.load(open(sim_experiment_file, "rb" ))
    
    # gather params
    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
    num_segments    = len(experiment_dict['Params']['allSegmentsType'])
    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000
    num_ex_synapses  = num_segments
    num_inh_synapses = num_segments
    num_synapses = num_ex_synapses + num_inh_synapses
    
    # collect X, y_spike, y_soma
    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')
    y_spike = np.zeros((sim_duration_ms,num_simulations))
    y_soma  = np.zeros((sim_duration_ms,num_simulations))
    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)
        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)
        X[:,:,k] = np.vstack((X_ex,X_inh))
        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)
        y_spike[spike_times,k] = 1.0
        y_soma[:,k] = sim_dict['somaVoltageLowRes']

    loading_duration_sec = time.time() - loading_start_time
    print('loading took %.3f seconds' %(loading_duration_sec))
    print('-----------------------------------------------------------------')

    return X, y_spike, y_soma


def parse_multiple_sim_experiment_files(sim_experiment_files):
    
    for k, sim_experiment_file in enumerate(sim_experiment_files):
        X_curr, y_spike_curr, y_soma_curr = parse_sim_experiment_file(sim_experiment_file)
        
        if k == 0:
            X       = X_curr
            y_spike = y_spike_curr
            y_soma  = y_soma_curr
        else:
            X       = np.dstack((X,X_curr))
            y_spike = np.hstack((y_spike,y_spike_curr))
            y_soma  = np.hstack((y_soma,y_soma_curr))

    return X, y_spike, y_soma


def create_temporaly_convolutional_model(max_input_window_size, num_segments, num_syn_types, num_DVT_outputs,
                                                                                             filter_sizes_per_layer,
                                                                                             num_filters_per_layer,
                                                                                             activation_function_per_layer,
                                                                                             l2_regularization_per_layer,
                                                                                             strides_per_layer,
                                                                                             dilation_rates_per_layer,
                                                                                             initializer_per_layer):
    
    # define input and flatten it
    binary_input_mat = Input(shape=(max_input_window_size, num_segments * num_syn_types), name='input_layer')

    for k in range(len(filter_sizes_per_layer)):
        num_filters   = num_filters_per_layer[k]
        filter_size   = filter_sizes_per_layer[k]
        activation    = activation_function_per_layer[k]
        l2_reg        = l2_regularization_per_layer[k]
        stride        = strides_per_layer[k]
        dilation_rate = dilation_rates_per_layer[k]
        initializer   = initializer_per_layer[k]
        
        if activation == 'lrelu':
            leaky_relu_slope = 0.25
            activation = lambda x: LeakyReLU(alpha=leaky_relu_slope)(x)
            print('leaky relu slope = %.4f' %(leaky_relu_slope))
            
        if not isinstance(initializer, basestring):
            initializer = initializers.TruncatedNormal(stddev=initializer)
        
        if k == 0:
            x = Conv1D(num_filters, filter_size, activation=activation, kernel_initializer=initializer, kernel_regularizer=l2(l2_reg),
                       strides=stride, dilation_rate=dilation_rate, padding='causal', name='layer_%d' %(k + 1))(binary_input_mat)
        else:
            x = Conv1D(num_filters, filter_size, activation=activation, kernel_initializer=initializer, kernel_regularizer=l2(l2_reg),
                       strides=stride, dilation_rate=dilation_rate, padding='causal', name='layer_%d' %(k + 1))(x)
        x = BatchNormalization(name='layer_%d_BN' %(k + 1))(x)
        
    output_spike_init_weights = initializers.TruncatedNormal(stddev=0.001)
    output_spike_init_bias    = initializers.Constant(value=-2.0)
    output_soma_init  = initializers.TruncatedNormal(stddev=0.03)
    output_dend_init  = initializers.TruncatedNormal(stddev=0.05)

    output_spike_predictions = Conv1D(1, 1, activation='sigmoid', kernel_initializer=output_spike_init_weights, bias_initializer=output_spike_init_bias,
                                                                  kernel_regularizer=l2(1e-8), padding='causal', name='spikes')(x)
    output_soma_voltage_pred = Conv1D(1, 1, activation='linear' , kernel_initializer=output_soma_init, kernel_regularizer=l2(1e-8), padding='causal', name='somatic')(x)
    output_dend_voltage_pred = Conv1D(num_DVT_outputs, 1, activation='linear' , kernel_initializer=output_dend_init, kernel_regularizer=l2(1e-8), padding='causal', name='dendritic')(x)

    temporaly_convolutional_network_model = Model(inputs=binary_input_mat, outputs=
                                                  [output_spike_predictions, output_soma_voltage_pred, output_dend_voltage_pred])

    optimizer_to_use = Nadam(lr=0.0001)
    temporaly_convolutional_network_model.compile(optimizer=optimizer_to_use,
                                                  loss=['binary_crossentropy','mse','mse'],
                                                  loss_weights=[1.0, 0.006, 0.002])
    temporaly_convolutional_network_model.summary()
    
    return temporaly_convolutional_network_model


# helper function to select random {X,y} window pairs from dataset
def sample_windows_from_sims(sim_experiment_files, batch_size=16, window_size_ms=400, ignore_time_from_start=500, file_load=0.5, 
                             DVT_PCA_model=None, y_train_soma_bias=-67.7, y_soma_threshold=-55.0, y_DTV_threshold=3.0):
    
    while True:
        # randomly sample simulation file
        sim_experiment_file = np.random.choice(sim_experiment_files,size=1)[0]
        print('from %d files loading "%s"' %(len(sim_experiment_files),sim_experiment_file))
        X, y_spike, y_soma, y_DVT = parse_sim_experiment_file_with_DVT(sim_experiment_file, DVT_PCA_model=DVT_PCA_model)
        
        # reshape to what is needed
        X  = np.transpose(X,axes=[2,1,0])
        y_spike = y_spike.T[:,:,np.newaxis]
        y_soma  = y_soma.T[:,:,np.newaxis]
        y_DVT   = np.transpose(y_DVT,axes=[2,1,0])

        # threshold the signals
        y_soma[y_soma > y_soma_threshold] = y_soma_threshold
        y_DVT[y_DVT > y_DTV_threshold] = y_DTV_threshold
        y_DVT[y_DVT < -y_DTV_threshold] = -y_DTV_threshold

        y_soma = y_soma - y_train_soma_bias
        
        # gather information regarding the loaded file
        num_simulations, sim_duration_ms, num_segments = X.shape
        num_output_channels_y1 = y_spike.shape[2]
        num_output_channels_y2 = y_soma.shape[2]
        num_output_channels_y3 = y_DVT.shape[2]
        
        # determine how many batches in total can enter in the file
        max_batches_per_file = (num_simulations * sim_duration_ms) / (batch_size * window_size_ms)
        batches_per_file     = int(file_load * max_batches_per_file)
        
        print('file load = %.4f, max batches per file = %d' %(file_load, max_batches_per_file))
        print('num batches per file = %d. coming from (%dx%d),(%dx%d)' %(batches_per_file, num_simulations, sim_duration_ms,
                                                                         batch_size, window_size_ms))
        
        for batch_ind in range(batches_per_file):
            # randomly sample simulations for current batch
            selected_sim_inds = np.random.choice(range(num_simulations),size=batch_size,replace=True)
            
            # randomly sample timepoints for current batch
            sampling_start_time = max(ignore_time_from_start, window_size_ms)
            selected_time_inds = np.random.choice(range(sampling_start_time,sim_duration_ms),size=batch_size,replace=False)
            
            # gather batch and yield it
            X_batch       = np.zeros((batch_size, window_size_ms, num_segments))
            y_spike_batch = np.zeros((batch_size, window_size_ms, num_output_channels_y1))
            y_soma_batch  = np.zeros((batch_size, window_size_ms, num_output_channels_y2))
            y_DVT_batch   = np.zeros((batch_size, window_size_ms, num_output_channels_y3))
            for k, (sim_ind, win_time) in enumerate(zip(selected_sim_inds, selected_time_inds)):
                X_batch[k,:,:]       = X[sim_ind,win_time - window_size_ms:win_time,:]
                y_spike_batch[k,:,:] = y_spike[sim_ind,win_time - window_size_ms:win_time,:]
                y_soma_batch[k,:,:]  = y_soma[sim_ind,win_time - window_size_ms:win_time,:]
                y_DVT_batch[k,:,:]   = y_DVT[sim_ind,win_time - window_size_ms:win_time,:]
            
            yield (X_batch, [y_spike_batch, y_soma_batch, y_DVT_batch])


class SimulationDataGenerator(keras.utils.Sequence):
    'thread-safe data genertor for network training'

    def __init__(self, sim_experiment_files, num_files_per_epoch=10,
                 batch_size=8, window_size_ms=300, file_load=0.3, DVT_PCA_model=None,
                 ignore_time_from_start=500, y_train_soma_bias=-67.7, y_soma_threshold=-55.0, y_DTV_threshold=3.0):
        'data generator initialization'
        
        self.sim_experiment_files = sim_experiment_files
        self.num_files_per_epoch = num_files_per_epoch
        self.batch_size = batch_size
        self.window_size_ms = window_size_ms
        self.ignore_time_from_start = ignore_time_from_start
        self.file_load = file_load
        self.DVT_PCA_model = DVT_PCA_model
        self.y_train_soma_bias = y_train_soma_bias
        self.y_soma_threshold = y_soma_threshold
        self.y_DTV_threshold = y_DTV_threshold
        
        self.curr_epoch_files_to_use = None
        self.on_epoch_end()
        self.curr_file_index = -1
        self.load_new_file()
        self.batches_per_file_dict = {}
        
        # gather information regarding the loaded file
        self.num_simulations_per_file, self.sim_duration_ms, self.num_segments = self.X.shape
        self.num_output_channels_y1 = self.y_spike.shape[2]
        self.num_output_channels_y2 = self.y_soma.shape[2]
        self.num_output_channels_y3 = self.y_DVT.shape[2]
        
        # determine how many batches in total can enter in the file
        self.max_batches_per_file = (self.num_simulations_per_file * self.sim_duration_ms) / (self.batch_size * self.window_size_ms)
        self.batches_per_file     = int(self.file_load * self.max_batches_per_file)
        self.batches_per_epoch = self.batches_per_file * self.num_files_per_epoch

        print('-------------------------------------------------------------------------')

        print('file load = %.4f, max batches per file = %d, batches per epoch = %d' %(self.file_load,
                                                                                      self.max_batches_per_file,
                                                                                      self.batches_per_epoch))
        print('num batches per file = %d. coming from (%dx%d),(%dx%d)' %(self.batches_per_file, self.num_simulations_per_file,
                                                                         self.sim_duration_ms, self.batch_size, self.window_size_ms))

        print('-------------------------------------------------------------------------')
        

    def __len__(self):
        'Denotes the number of batches per epoch'
        return self.batches_per_epoch


    def __getitem__(self, batch_ind_within_epoch):
        'Generate one batch of data'
        
        if ((batch_ind_within_epoch + 1) % self.batches_per_file) == 0:
            self.load_new_file()
            
        # randomly sample simulations for current batch
        selected_sim_inds = np.random.choice(range(self.num_simulations_per_file), size=self.batch_size, replace=True)
        
        # randomly sample timepoints for current batch
        sampling_start_time = max(self.ignore_time_from_start, self.window_size_ms)
        selected_time_inds = np.random.choice(range(sampling_start_time, self.sim_duration_ms), size=self.batch_size, replace=False)
        
        # gather batch and yield it
        X_batch       = np.zeros((self.batch_size, self.window_size_ms, self.num_segments))
        y_spike_batch = np.zeros((self.batch_size, self.window_size_ms, self.num_output_channels_y1))
        y_soma_batch  = np.zeros((self.batch_size, self.window_size_ms, self.num_output_channels_y2))
        y_DVT_batch   = np.zeros((self.batch_size, self.window_size_ms, self.num_output_channels_y3))
        for k, (sim_ind, win_time) in enumerate(zip(selected_sim_inds, selected_time_inds)):
            X_batch[k,:,:]       = self.X[sim_ind,win_time - self.window_size_ms:win_time,:]
            y_spike_batch[k,:,:] = self.y_spike[sim_ind,win_time - self.window_size_ms:win_time,:]
            y_soma_batch[k,:,:]  = self.y_soma[sim_ind ,win_time - self.window_size_ms:win_time,:]
            y_DVT_batch[k,:,:]   = self.y_DVT[sim_ind  ,win_time - self.window_size_ms:win_time,:]
        
        # increment the number of batches collected from each file
        try:
            self.batches_per_file_dict[self.curr_file_in_use] = self.batches_per_file_dict[self.curr_file_in_use] + 1
        except:
            self.batches_per_file_dict[self.curr_file_in_use] = 1
        
        # return the actual batch
        return (X_batch, [y_spike_batch, y_soma_batch, y_DVT_batch])


    def on_epoch_end(self):
        'selects new subset of files to draw samples from'

        self.curr_epoch_files_to_use = np.random.choice(self.sim_experiment_files, size=self.num_files_per_epoch, replace=False)

    def load_new_file(self):
        'load new file to draw batches from'

        self.curr_file_index = (self.curr_file_index + 1) % self.num_files_per_epoch
        # update the current file in use
        self.curr_file_in_use = self.curr_epoch_files_to_use[self.curr_file_index]

        # load the file
        X, y_spike, y_soma, y_DVT = parse_sim_experiment_file_with_DVT(self.curr_file_in_use, DVT_PCA_model=self.DVT_PCA_model)

        # reshape to what is needed
        X  = np.transpose(X,axes=[2,1,0])
        y_spike = y_spike.T[:,:,np.newaxis]
        y_soma  = y_soma.T[:,:,np.newaxis]
        y_DVT   = np.transpose(y_DVT,axes=[2,1,0])

        # threshold the signals
        y_soma[y_soma >  self.y_soma_threshold] =  self.y_soma_threshold
        y_DVT[y_DVT   >  self.y_DTV_threshold]  =  self.y_DTV_threshold
        y_DVT[y_DVT   < -self.y_DTV_threshold]  = -self.y_DTV_threshold

        y_soma = y_soma - self.y_train_soma_bias
        
        self.X, self.y_spike, self.y_soma, self.y_DVT = X, y_spike, y_soma, y_DVT


#%% collect a small dataset of {input,output} recordings for constructing DVT PCA model

print('--------------------------------------------------------------------')
print('started calculating PCA for DVT model')

dataset_generation_start_time = time.time()

data_dir = train_data_dir

train_files = glob.glob(data_dir + '*_6_secDuration_*')[:1]

v_threshold = -55
DVT_threshold = 3

# train PCA model
_, _, _, y_DVTs = parse_sim_experiment_file_with_DVT(train_files[0])
X_pca_DVT = np.reshape(y_DVTs, [y_DVTs.shape[0], -1]).T

DVT_PCA_model = decomposition.PCA(n_components=num_DVT_components, whiten=True)
DVT_PCA_model.fit(X_pca_DVT)

total_explained_variance = 100 * DVT_PCA_model.explained_variance_ratio_.sum()
print('finished training DVT PCA model. total_explained variance = %.1f%s' %(total_explained_variance, '%'))
print('--------------------------------------------------------------------')

X_train, y_spike_train, y_soma_train, y_DVT_train = parse_multiple_sim_experiment_files_with_DVT(train_files, DVT_PCA_model=DVT_PCA_model)
# apply symmetric DVT threshold (the threshold is in units of standard deviations)
y_DVT_train[y_DVT_train >  DVT_threshold] =  DVT_threshold
y_DVT_train[y_DVT_train < -DVT_threshold] = -DVT_threshold

y_soma_train[y_soma_train > v_threshold] = v_threshold

sim_duration_ms = y_soma_train.shape[0]
sim_duration_sec = float(sim_duration_ms) / 1000

num_simulations_train = X_train.shape[-1]

#%% train model (in data streaming way)

print('-----------------------------------------------')
print('finding data')
print('-----------------------------------------------')

train_files = glob.glob(train_data_dir + '*_128_simulationRuns*_6_secDuration_*')
valid_files = glob.glob(valid_data_dir + '*_128_simulationRuns*_6_secDuration_*')
test_files  = glob.glob(test_data_dir  + '*_128_simulationRuns*_6_secDuration_*')

data_dict = {}
data_dict['train_files'] = train_files
data_dict['valid_files'] = valid_files
data_dict['test_files']  = test_files

print('number of training files is %d' %(len(train_files)))
print('number of validation files is %d' %(len(valid_files)))
print('number of test files is %d' %(len(test_files)))
print('-----------------------------------------------')

# define model
assert(input_window_size > sum(filter_sizes_per_layer))
temporal_conv_net = create_temporaly_convolutional_model(input_window_size, num_segments, num_syn_types, num_DVT_components,
                                                         filter_sizes_per_layer, num_filters_per_layer,
                                                         activation_function_per_layer, l2_regularization_per_layer,
                                                         strides_per_layer, dilation_rates_per_layer, initializer_per_layer)

is_fully_connected = (network_depth == 1) or sum(filter_sizes_per_layer[1:]) == (network_depth -1)
if is_fully_connected:
    model_prefix = '%s_FCN' %(synapse_type)
else:
    model_prefix = '%s_TCN' %(synapse_type)
network_average_width = int(np.array(num_filters_per_layer).mean())
time_window_T = (np.array(filter_sizes_per_layer) - 1).sum() + 1
architecture_overview = 'DxWxT_%dx%dx%d' %(network_depth,network_average_width,time_window_T)
start_learning_schedule = 0
num_training_samples = 0


print('-----------------------------------------------')
print('about to start training...')
print('-----------------------------------------------')
print(model_prefix)
print(architecture_overview)
print('-----------------------------------------------')

#%% train

num_learning_schedules = len(batch_size_per_epoch)

training_history_dict = {}
for learning_schedule in range(start_learning_schedule, num_learning_schedules):
    epoch_start_time = time.time()
        
    batch_size    = batch_size_per_epoch[learning_schedule]
    learning_rate = learning_rate_per_epoch[learning_schedule]
    loss_weights  = loss_weights_per_epoch[learning_schedule]
    
    # prepare data generators
    if learning_schedule == 0 or (learning_schedule >= 1 and batch_size != batch_size_per_epoch[learning_schedule -1]):
        print('initializing generators')
        train_data_generator = SimulationDataGenerator(train_files, num_files_per_epoch=train_files_per_epoch, batch_size=batch_size,
                                                       window_size_ms=input_window_size, file_load=train_file_load, DVT_PCA_model=DVT_PCA_model)
        valid_data_generator = SimulationDataGenerator(valid_files, num_files_per_epoch=valid_files_per_epoch, batch_size=batch_size,
                                                       window_size_ms=input_window_size, file_load=valid_file_load, DVT_PCA_model=DVT_PCA_model)
    
    train_steps_per_epoch = len(train_data_generator)
    
    optimizer_to_use = Nadam(lr=learning_rate)
    temporal_conv_net.compile(optimizer=optimizer_to_use, loss=['binary_crossentropy','mse','mse'], loss_weights=loss_weights)
    
    print('-----------------------------------------------')
    print('starting epoch %d:' %(learning_schedule))
    print('-----------------------------------------------')
    print('loss weights = %s' %(str(loss_weights)))
    print('learning_rate = %.7f' %(learning_rate))
    print('batch_size = %d' %(batch_size))
    print('-----------------------------------------------')
    
    history = temporal_conv_net.fit_generator(generator=train_data_generator,
                                              epochs=num_steps_multiplier,
                                              validation_data=valid_data_generator,
                                              use_multiprocessing=use_multiprocessing, workers=num_workers)
    
    # store the loss values in training histogry dictionary and add some additional fields about the training schedule
    try:
        for key in history.history.keys():
            training_history_dict[key] += history.history[key]
        training_history_dict['learning_schedule'] += [learning_schedule] * num_steps_multiplier
        training_history_dict['batch_size']        += [batch_size] * num_steps_multiplier
        training_history_dict['learning_rate']     += [learning_rate] * num_steps_multiplier
        training_history_dict['loss_weights']      += [loss_weights] * num_steps_multiplier
        training_history_dict['num_train_samples'] += [batch_size * train_steps_per_epoch] * num_steps_multiplier
        training_history_dict['num_train_steps']   += [train_steps_per_epoch] * num_steps_multiplier
        training_history_dict['train_files_histogram'] += [train_data_generator.batches_per_file_dict]
        training_history_dict['valid_files_histogram'] += [valid_data_generator.batches_per_file_dict]
    except:
        for key in history.history.keys():
            training_history_dict[key] = history.history[key]
        training_history_dict['learning_schedule'] = [learning_schedule] * num_steps_multiplier
        training_history_dict['batch_size']        = [batch_size] * num_steps_multiplier
        training_history_dict['learning_rate']     = [learning_rate] * num_steps_multiplier
        training_history_dict['loss_weights']      = [loss_weights] * num_steps_multiplier
        training_history_dict['num_train_samples'] = [batch_size * train_steps_per_epoch] * num_steps_multiplier
        training_history_dict['num_train_steps']   = [train_steps_per_epoch] * num_steps_multiplier
        training_history_dict['train_files_histogram'] = [train_data_generator.batches_per_file_dict]
        training_history_dict['valid_files_histogram'] = [valid_data_generator.batches_per_file_dict]

    num_training_samples = num_training_samples + num_steps_multiplier * train_steps_per_epoch * batch_size
    
    print('-----------------------------------------------------------------------------------------')
    epoch_duration_sec = time.time() - epoch_start_time
    print('total time it took to calculate epoch was %.3f seconds (%.3f batches/second)' %(epoch_duration_sec, float(train_steps_per_epoch * num_steps_multiplier) / epoch_duration_sec))
    print('-----------------------------------------------------------------------------------------')
    
    # save model every once and a while
    if np.array(training_history_dict['val_spikes_loss'][-3:]).mean() < 0.03:
        model_ID = np.random.randint(100000)
        modelID_str = 'ID_%d' %(model_ID)
        train_string = 'samples_%d' %(num_training_samples)
        if len(training_history_dict['val_spikes_loss']) >= 10:
            train_MSE = 10000 * np.array(training_history_dict['spikes_loss'][-7:]).mean()
            valid_MSE = 10000 * np.array(training_history_dict['val_spikes_loss'][-7:]).mean()
        else:
            train_MSE = 10000 * np.array(training_history_dict['spikes_loss']).mean()
            valid_MSE = 10000 * np.array(training_history_dict['val_spikes_loss']).mean()
            
        results_overview = 'LogLoss_train_%d_valid_%d' %(train_MSE,valid_MSE)
        current_datetime = str(pd.datetime.now())[:-10].replace(':','_').replace(' ','__')
        model_filename    = models_dir + '%s__%s__%s__%s__%s__%s.h5' %(model_prefix,architecture_overview,current_datetime,train_string,results_overview,modelID_str)
        auxilary_filename = models_dir + '%s__%s__%s__%s__%s__%s.pickle' %(model_prefix,architecture_overview,current_datetime,train_string,results_overview,modelID_str)

        print('-----------------------------------------------------------------------------------------')
        print('finished epoch %d/%d. saving...\n     "%s"\n     "%s"' %(learning_schedule +1, num_epochs, model_filename.split('/')[-1], auxilary_filename.split('/')[-1]))
        print('-----------------------------------------------------------------------------------------')

        temporal_conv_net.save(model_filename)
        
        # save all relevent training params (in raw and unprocessed way)
        model_hyperparams_and_training_dict = {}
        model_hyperparams_and_training_dict['data_dict']              = data_dict
        model_hyperparams_and_training_dict['architecture_dict']      = architecture_dict
        model_hyperparams_and_training_dict['learning_schedule_dict'] = learning_schedule_dict
        model_hyperparams_and_training_dict['training_history_dict']  = training_history_dict
        
        pickle.dump(model_hyperparams_and_training_dict, open(auxilary_filename, "wb"), protocol=2)

#%% show learning curves

# gather losses
train_spikes_loss_list    = training_history_dict['spikes_loss']
valid_spikes_loss_list    = training_history_dict['val_spikes_loss']
train_somatic_loss_list   = training_history_dict['somatic_loss']
valid_somatic_loss_list   = training_history_dict['val_somatic_loss']
train_dendritic_loss_list = training_history_dict['dendritic_loss']
valid_dendritic_loss_list = training_history_dict['val_dendritic_loss']
train_total_loss_list     = training_history_dict['loss']
valid_total_loss_list     = training_history_dict['val_loss']

learning_epoch_list        = training_history_dict['learning_schedule']
batch_size_list            = training_history_dict['batch_size']
learning_rate              = training_history_dict['learning_rate']
loss_spikes_weight_list    = [x[0] for x in training_history_dict['loss_weights']]
loss_soma_weight_list      = [x[1] for x in training_history_dict['loss_weights']]
loss_dendrites_weight_list = [x[2] for x in training_history_dict['loss_weights']]

num_iterations = list(range(len(train_spikes_loss_list)))


================================================================================
================================================================================
L5PC_NEURON_simulation/mods/NaTs2_t.mod:
========================================
:Reference :Colbert and Pan 2002
:comment: took the NaTa and shifted both activation/inactivation by 6 mv

NEURON	{
	SUFFIX NaTs2_t
	USEION na READ ena WRITE ina
	RANGE gNaTs2_tbar, gNaTs2_t, ina
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gNaTs2_tbar = 0.00001 (S/cm2)
}

ASSIGNED	{
	v	(mV)
	ena	(mV)
	ina	(mA/cm2)
	gNaTs2_t	(S/cm2)
	mInf
	mTau
	mAlpha
	mBeta
	hInf
	hTau
	hAlpha
	hBeta
}

STATE	{
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gNaTs2_t = gNaTs2_tbar*m*m*m*h
	ina = gNaTs2_t*(v-ena)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)

	UNITSOFF
    if(v == -32){
    	v = v+0.0001
    }
		mAlpha = (0.182 * (v- -32))/(1-(exp(-(v- -32)/6)))
		mBeta  = (0.124 * (-v -32))/(1-(exp(-(-v -32)/6)))
		mInf = mAlpha/(mAlpha + mBeta)
		mTau = (1/(mAlpha + mBeta))/qt

    if(v == -60){
      v = v + 0.0001
    }
		hAlpha = (-0.015 * (v- -60))/(1-(exp((v- -60)/6)))
		hBeta  = (-0.015 * (-v -60))/(1-(exp((-v -60)/6)))
		hInf = hAlpha/(hAlpha + hBeta)
		hTau = (1/(hAlpha + hBeta))/qt
	UNITSON
}
================================================================================
================================================================================
test_accuracy_vs_complexity.py:
===============================
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import glob
import pickle
from scipy.stats import norm

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% open all evaluations pickles and create a compact csv file


def extract_useful_info(learning_dict_filename, req_results_key='starting_at_500ms_spikes_in_[0,24]_range'):
    
    learning_dict = pickle.load(open(learning_dict_filename, "rb" ), encoding='latin1')
    data_dict         = learning_dict['data_dict']
    architecture_dict = learning_dict['architecture_dict']
    training_dict     = learning_dict['training_history_dict']
    results_dict      = learning_dict['evaluations_results_dict'][req_results_key]

    # biophyisical model type
    biophyisical_model_type_1 = learning_dict_filename.split('/')[-1].split('_')[0]
    biophyisical_model_type_2 = data_dict['train_files'][0].split('/')[-2].split('_')[1]
    biophyisical_model_type_3 = data_dict['valid_files'][0].split('/')[-2].split('_')[1]
    biophyisical_model_type_4 = data_dict['test_files'][0].split('/')[-2].split('_')[1]

    assert(biophyisical_model_type_1 == biophyisical_model_type_2)
    assert(biophyisical_model_type_1 == biophyisical_model_type_3)
    assert(biophyisical_model_type_1 == biophyisical_model_type_4)

    # NN model type
    NN_model_type_1 = learning_dict_filename.split('/')[-1].split('_')[1]
    
    if NN_model_type_1 == 'SK':
        NN_model_type_1 = learning_dict_filename.split('/')[-1].split('_')[2]
        biophyisical_model_type_1 = biophyisical_model_type_1 + '_SK'
    
    # NN input time window
    NN_input_time_window_1 = int(learning_dict_filename.split('/')[-1].split('__')[1].split('x')[-1])
    
    useful_results_dict = {}
    useful_results_dict['biophysical_model_type'] = biophyisical_model_type_1
    useful_results_dict['NN_model_type']          = NN_model_type_1
    useful_results_dict['NN_depth']               = architecture_dict['network_depth']
    useful_results_dict['NN_width']               = np.array(architecture_dict['num_filters_per_layer']).mean().astype(int)
    useful_results_dict['NN_input_time_window']   = NN_input_time_window_1
    useful_results_dict['NN_num_train_samples']   = sum(training_dict['num_train_samples'])
    useful_results_dict['NN_unique_train_files']  = len(training_dict['train_files_histogram'][-1].keys())

    useful_results_dict['spikes AUC']                = results_dict['AUC']
    useful_results_dict['spikes D prime']            = np.sqrt(2) * norm.ppf(results_dict['AUC'])
    useful_results_dict['spikes TP @ 0.25% FP']      = results_dict['TP @ 0.0025 FP']
    useful_results_dict['spikes TP @ 0.1% FP']       = results_dict['TP @ 0.0010 FP']
    useful_results_dict['spikes AUC @ 1% FP']        = results_dict['AUC @ 0.0100 FP']
    useful_results_dict['soma RMSE']                 = results_dict['soma_RMSE']
    useful_results_dict['soma MAE']                  = results_dict['soma_MAE']
    useful_results_dict['soma explained variance %'] = results_dict['soma_explained_variance_percent']
    
    try:
        results_dict_list = [x[req_results_key] for x in learning_dict['list_of_subset_eval_results_dict']]
        AUC_list                     = np.array([x['AUC'] for x in results_dict_list])
        soma_variance_explained_list = np.array([x['soma_explained_variance_percent'] for x in results_dict_list])
    
        useful_results_dict['spikes AUC mean of subsets']                = AUC_list.mean()
        useful_results_dict['spikes AUC std of subsets']                 = AUC_list.std()
        useful_results_dict['soma explained variance % mean of subsets'] = soma_variance_explained_list.mean()
        useful_results_dict['soma explained variance % std of subsets']  = soma_variance_explained_list.std()
    except:
        print('no subsets list')
        
    useful_results_dict['full model filename'] = learning_dict_filename.split('/')[-1].split('.')[0]
    
    return useful_results_dict


#%% look at evaluations results

models_folder = '/Reseach/Single_Neuron_InOut/models/best_models/'
list_of_evaluated_models = glob.glob(models_folder + '*/*_evaluation_test.pickle')

list_of_useful_results_dict = []
for k, learning_dict_filename in enumerate(list_of_evaluated_models):
    useful_results_dict = extract_useful_info(learning_dict_filename)
    list_of_useful_results_dict.append(useful_results_dict)

print('finished loading %d model results' %(len(list_of_useful_results_dict)))

num_rows = len(list_of_useful_results_dict)
cols = list_of_useful_results_dict[-1].keys()

# columns in the "right order"
cols = [
 'biophysical_model_type',
 'NN_depth',
 'NN_width',
 'NN_input_time_window',
 'NN_model_type',
 'spikes D prime',
 'spikes AUC',
 'spikes AUC @ 1% FP',
 'soma explained variance %',
 'soma RMSE',
 'soma MAE',
 'spikes TP @ 0.1% FP',
 'spikes TP @ 0.25% FP',
 'spikes AUC std of subsets',
 'soma explained variance % std of subsets',
 'NN_num_train_samples',
 'NN_unique_train_files',
 'full model filename']

best_results_dataframe = pd.DataFrame(index=range(num_rows), columns=cols)

for k, useful_res_row in enumerate(list_of_useful_results_dict):
    for key, value in useful_res_row.items():
        if key in cols:
            best_results_dataframe.loc[k,key] = value
    
print('finished building dataframe')

#%% sort and save

sorting_order = ['biophysical_model_type',
                 'NN_depth',
                 'NN_model_type',
                 'NN_input_time_window',
                 'NN_width',
                 'spikes AUC']

# organize best results dataframe for saving
best_results_dataframe = best_results_dataframe.sort_values(by=sorting_order)

output_filename = '/Reseach/Single_Neuron_InOut/models/best_models/best_results_test_%d_models.csv' %(best_results_dataframe.shape[0])
best_results_dataframe.to_csv(output_filename, index=False)

#%% open csv file and display it

models_results_folder = '/Reseach/Single_Neuron_InOut/models/best_models/'
best_results_dataframe = pd.read_csv(models_results_folder + 'best_results_test_105_models.csv')

#%% filter the results for reasonable param ranges

print(best_results_dataframe.shape)

best_results_dataframe = best_results_dataframe.loc[best_results_dataframe['NN_input_time_window'] >= 10,:].reset_index(drop=True)
best_results_dataframe = best_results_dataframe.loc[best_results_dataframe['NN_input_time_window'] <= 260,:].reset_index(drop=True)

print(best_results_dataframe.shape)

#%% show various scatter plots of performance vs (width, depth, time, etc...)


def show_dataframe_scatters(results_dataframe, noise_level=1.0):
    
    AMPA_SK_rows = results_dataframe['biophysical_model_type'] == 'AMPA_SK'
    AMPA_rows = results_dataframe['biophysical_model_type'] == 'AMPA'
    NMDA_rows = results_dataframe['biophysical_model_type'] == 'NMDA'
    
    alpha = 0.6
    fontsize = 20
    plt.close('all')


    ### Depth
    AMPA_SK_depth = results_dataframe.loc[AMPA_SK_rows,'NN_depth']
    AMPA_SK_depth = AMPA_SK_depth + noise_level * 0.15 * np.random.randn(AMPA_SK_depth.shape[0])
    
    AMPA_depth = results_dataframe.loc[AMPA_rows,'NN_depth']
    AMPA_depth = AMPA_depth + noise_level * 0.15 * np.random.randn(AMPA_depth.shape[0])
    
    NMDA_depth = results_dataframe.loc[NMDA_rows,'NN_depth']
    NMDA_depth = NMDA_depth + noise_level * 0.15 * np.random.randn(NMDA_depth.shape[0])
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of depth', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)

    
    ### Width
    AMPA_SK_width = results_dataframe.loc[AMPA_SK_rows,'NN_width']
    AMPA_SK_width = AMPA_SK_width + noise_level * 2.0 * np.random.randn(AMPA_SK_width.shape[0])
    
    AMPA_width = results_dataframe.loc[AMPA_rows,'NN_width']
    AMPA_width = AMPA_width + noise_level * 2.0 * np.random.randn(AMPA_width.shape[0])

    NMDA_width = results_dataframe.loc[NMDA_rows,'NN_width']
    NMDA_width = NMDA_width + noise_level * 2.0 * np.random.randn(NMDA_width.shape[0])
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of width', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)


    ### Width (log scale)
    AMPA_SK_width = results_dataframe.loc[AMPA_SK_rows,'NN_width']
    AMPA_SK_width = AMPA_SK_width + noise_level * 0.5 * np.random.randn(AMPA_SK_width.shape[0])
    AMPA_SK_width[AMPA_SK_width <= 0] = 0.1

    AMPA_width = results_dataframe.loc[AMPA_rows,'NN_width']
    AMPA_width = AMPA_width + noise_level * 0.5 * np.random.randn(AMPA_width.shape[0])
    AMPA_width[AMPA_width <= 0] = 0.1

    NMDA_width = results_dataframe.loc[NMDA_rows,'NN_width']
    NMDA_width = NMDA_width + noise_level * 0.5 * np.random.randn(NMDA_width.shape[0])
    NMDA_width[NMDA_width <= 0] = 0.1
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of width', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
        
    
    ### Time window size
    AMPA_SK_T_size = results_dataframe.loc[AMPA_SK_rows,'NN_input_time_window']
    AMPA_SK_T_size = AMPA_SK_T_size + noise_level * 1.5 * np.random.randn(AMPA_SK_T_size.shape[0])
    
    AMPA_T_size = results_dataframe.loc[AMPA_rows,'NN_input_time_window']
    AMPA_T_size = AMPA_T_size + noise_level * 1.5 * np.random.randn(AMPA_T_size.shape[0])
    
    NMDA_T_size = results_dataframe.loc[NMDA_rows,'NN_input_time_window']
    NMDA_T_size = NMDA_T_size + noise_level * 1.5 * np.random.randn(NMDA_T_size.shape[0])
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of time window size', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    
    # Time window size (log scale)
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of time window size (log scale)', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')

    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')

    
    ### num samples
    AMPA_SK_num_trains_samples = results_dataframe.loc[AMPA_SK_rows,'NN_num_train_samples'] / 1000.0
    AMPA_num_trains_samples = results_dataframe.loc[AMPA_rows,'NN_num_train_samples'] / 1000.0
    NMDA_num_trains_samples = results_dataframe.loc[NMDA_rows,'NN_num_train_samples'] / 1000.0
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of num training samples', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')

    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')


    ### num samples
    AMPA_SK_num_unique_train_files = results_dataframe.loc[AMPA_SK_rows,'NN_unique_train_files']
    AMPA_num_unique_train_files = results_dataframe.loc[AMPA_rows,'NN_unique_train_files']
    NMDA_num_unique_train_files = results_dataframe.loc[NMDA_rows,'NN_unique_train_files']
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of num unique training files', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)


# show all data as scatters
show_dataframe_scatters(best_results_dataframe, noise_level=0.0)

#%% add to best results dataframe several "artificial" rows that duplicate FCN as TCN

FCN_rows = best_results_dataframe.loc[best_results_dataframe.loc[:,'NN_model_type'] == 'FCN',:]
FCN_rows.loc[:,['NN_model_type']] = 'TCN'
FCN_rows = FCN_rows.reset_index(drop=True)
best_results_dataframe = pd.concat((best_results_dataframe,FCN_rows),axis=0).reset_index(drop=True)


def keep_duplicate_x_with_extreeme_y(x,y, e, use_min=False):
    x_array = np.array(x)
    y_array = np.array(y)
    e_array = np.array(e)
    
    new_x_vals = np.sort(np.unique(x_array))
    new_y_vals = []
    new_e_vals = []
    
    for x_val in new_x_vals:
        relevent_inds = x_array == x_val
        relevent_y_values = y_array[relevent_inds]
        relevent_e_values = e_array[relevent_inds]
        
        if use_min:
            argextreeme_within_relevent = relevent_y_values.argmin()
        else:
            argextreeme_within_relevent = relevent_y_values.argmax()
            
        y_value = relevent_y_values[argextreeme_within_relevent]
        e_value = relevent_e_values[argextreeme_within_relevent]
            
        new_y_vals.append(y_value)
        new_e_vals.append(e_value)

    new_y_vals = np.array(new_y_vals)
    new_e_vals = np.array(new_e_vals)
    
    return new_x_vals, new_y_vals, new_e_vals


def keep_only_strictly_changing_values(x, y, e, change_threshold=0.02, inreasing=True):
    
    y_span = y.max() - y.min()
    
    if inreasing:
        is_changing = np.diff(y) > change_threshold * y_span
    else:
        is_changing = np.diff(y) < -change_threshold * y_span
        
    is_changing = np.concatenate((np.zeros(1)==0, is_changing))
    is_changing[-1] = True
    
    inds_to_keep = np.nonzero(is_changing)[0]
    x_subset = x[inds_to_keep]
    y_subset = y[inds_to_keep]
    e_subset = e[inds_to_keep]
    
    return x_subset, y_subset, e_subset


#%% show accuracy vs complexity graphs (clean)

plt.close('all')

list_of_x_axis_col_names = ['NN_depth', 'NN_width', 'NN_input_time_window']
list_of_y_axis_col_names = ['spikes AUC', 'soma explained variance %']

type_columns = ['biophysical_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]

legend_labeling = {}
legend_labeling['NMDA'] = 'NMDA synapses'
legend_labeling['AMPA'] = 'AMPA synapses'
legend_labeling['AMPA_SK'] = 'AMPA synapses w\o SK_E2'

change_threshold_dict = {}
change_threshold_dict['NN_depth'] = 0.01
change_threshold_dict['NN_width'] = 0.05
change_threshold_dict['NN_input_time_window'] = 0.03


fontsize = 27
xy_label_fontsize = 20
plt.close('all')
fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(17,12))
fig.suptitle('best network performace as function of network complexity', fontsize=fontsize)
fig.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.92,hspace=0.15,wspace=0.15)

for fig_col_ind, x_axis_name in enumerate(list_of_x_axis_col_names):

    # go over all unique options, extract them from the database, and store the best values for each metric
    X_vs_depth_curve_dicts = {}
    for k in range(num_unique_options):
        type_option = unique_type_options.loc[k,:]
        curve_key = type_option['biophysical_model_type']
        
        option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
        results_subset_df = best_results_dataframe.loc[option_rows,:]
    
        sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
        sorted_results_subset_df_max = sorted_results_subset_df.cummax()
        
        # max cols
        sorted_results_subset_df.loc[:,list_of_y_axis_col_names] = sorted_results_subset_df_max.loc[:,list_of_y_axis_col_names]
            
        # assemble dict
        X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
        
        
    # go over each accuracy meassure
    for fig_row_ind, y_axis_name in enumerate(list_of_y_axis_col_names):
        
        e_axis_name = y_axis_name + ' std of subsets'
        
        if fig_row_ind == 0:
            ax[fig_row_ind,fig_col_ind].set_ylim([0.979,0.9981])
            
        if fig_row_ind == 1:
            ax[fig_row_ind,fig_col_ind].set_xlabel(x_axis_name, fontsize=xy_label_fontsize)
            ax[fig_row_ind,fig_col_ind].set_ylim([90.9,98.3])

        if fig_col_ind == 0:
            ax[fig_row_ind,fig_col_ind].set_ylabel(y_axis_name, fontsize=xy_label_fontsize)
        
        list_of_curve_names = []
        for curve_key, y_vs_x_df in X_vs_depth_curve_dicts.items():
            list_of_curve_names.append(legend_labeling[curve_key])
            
            x,y,e = keep_duplicate_x_with_extreeme_y(y_vs_x_df[x_axis_name], y_vs_x_df[y_axis_name], y_vs_x_df[e_axis_name])
            x,y,e = keep_only_strictly_changing_values(x, y, e, change_threshold=change_threshold_dict[x_axis_name], inreasing=True)
            ax[fig_row_ind,fig_col_ind].errorbar(x,y, yerr=e)

        ax[fig_row_ind,fig_col_ind].legend(list_of_curve_names, loc='lower right')
        

#%%


================================================================================
================================================================================
integrate_and_fire_figure_replication.py:
=========================================
import numpy as np
import time
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import matplotlib.patches as mpatches
from scipy import signal
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import mean_absolute_error as MAE
from sklearn.metrics import explained_variance_score
from sklearn.metrics import roc_curve, auc
from keras.models import Model
from keras.optimizers import Nadam
from keras.layers import Input, Conv1D
from keras.layers.normalization import BatchNormalization
from keras.layers.advanced_activations import LeakyReLU
from keras.regularizers import l2
from keras import initializers

import matplotlib

matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['svg.fonttype'] = 'none'

save_figures = False
# save_figures = True
all_file_endings_to_use = ['.png', '.pdf', '.svg']

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

output_figures_dir = '/Reseach/Single_Neuron_InOut/figures/IF/'

#%% some helper functions


def bin2dict(bin_spikes_matrix):
    spike_row_inds, spike_times = np.nonzero(bin_spikes_matrix)
    row_inds_spike_times_map = {}
    for row_ind, syn_time in zip(spike_row_inds,spike_times):
        if row_ind in row_inds_spike_times_map.keys():
            row_inds_spike_times_map[row_ind].append(syn_time)
        else:
            row_inds_spike_times_map[row_ind] = [syn_time]

    return row_inds_spike_times_map


def dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):
    
    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')
    for row_ind in row_inds_spike_times_map.keys():
        for spike_time in row_inds_spike_times_map[row_ind]:
            bin_spikes_matrix[row_ind,spike_time] = 1.0
    
    return bin_spikes_matrix


def generate_input_spike_trains_for_simulation(sim_duration_ms=6000, num_exc_segments=80, num_inh_segments=20,
                                               num_exc_spikes_per_100ms_range=[0,100], num_exc_inh_spike_diff_per_100ms_range=[-100,100]):

    # randomly sample inst rate (with some uniform noise) smoothing sigma
    keep_inst_rate_const_for_ms = inst_rate_sampling_time_interval_options_ms[np.random.randint(len(inst_rate_sampling_time_interval_options_ms))]
    keep_inst_rate_const_for_ms += int(2 * inst_rate_sampling_time_interval_jitter_range * np.random.rand() - inst_rate_sampling_time_interval_jitter_range)
    
    # randomly sample smoothing sigma (with some uniform noise)
    temporal_inst_rate_smoothing_sigma = temporal_inst_rate_smoothing_sigma_options_ms[np.random.randint(len(temporal_inst_rate_smoothing_sigma_options_ms))]
    temporal_inst_rate_smoothing_sigma += int(2 * temporal_inst_rate_smoothing_sigma_jitter_range * np.random.rand() - temporal_inst_rate_smoothing_sigma_jitter_range)
    
    num_inst_rate_samples = int(np.ceil(float(sim_duration_ms) / keep_inst_rate_const_for_ms))
    
    # create the coarse inst rates with units of "total spikes per tree per 100 ms"
    num_ex_spikes_per_100ms   = np.random.uniform(low=num_exc_spikes_per_100ms_range[0], high=num_exc_spikes_per_100ms_range[1], size=(1, num_inst_rate_samples))
    num_inh_spikes_low_range  = np.maximum(0, num_ex_spikes_per_100ms + num_exc_inh_spike_diff_per_100ms_range[0])
    num_inh_spikes_high_range = num_ex_spikes_per_100ms + num_exc_inh_spike_diff_per_100ms_range[1]
    num_inh_spikes_per_100ms  = np.random.uniform(low=num_inh_spikes_low_range, high=num_inh_spikes_high_range, size=(1, num_inst_rate_samples))
    num_inh_spikes_per_100ms[num_inh_spikes_per_100ms < 0] = 0.0001

    # convert to units of "per_1um_per_1ms"
    ex_bas_spike_rate_per_1um_per_1ms   = num_ex_spikes_per_100ms   / (num_exc_segments  * 100.0)
    inh_bas_spike_rate_per_1um_per_1ms  = num_inh_spikes_per_100ms  / (num_inh_segments  * 100.0)

    # kron by space (uniform distribution across branches per tree)
    ex_spike_rate_per_seg_per_1ms   = np.kron(ex_bas_spike_rate_per_1um_per_1ms  , np.ones((num_exc_segments,1)))
    inh_spike_rate_per_seg_per_1ms  = np.kron(inh_bas_spike_rate_per_1um_per_1ms , np.ones((num_inh_segments,1)))

    # add some spatial multiplicative randomness (that will be added to the sampling noise)
    ex_spike_rate_per_seg_per_1ms  = np.random.uniform(low=0.5, high=1.5, size=ex_spike_rate_per_seg_per_1ms.shape ) * ex_spike_rate_per_seg_per_1ms
    inh_spike_rate_per_seg_per_1ms = np.random.uniform(low=0.5, high=1.5, size=inh_spike_rate_per_seg_per_1ms.shape) * inh_spike_rate_per_seg_per_1ms

    # kron by time (crop if there are leftovers in the end) to fill up the time to 1ms time bins
    ex_spike_rate_per_seg_per_1ms  = np.kron(ex_spike_rate_per_seg_per_1ms , np.ones((1, keep_inst_rate_const_for_ms)))[:,:sim_duration_ms]
    inh_spike_rate_per_seg_per_1ms = np.kron(inh_spike_rate_per_seg_per_1ms, np.ones((1, keep_inst_rate_const_for_ms)))[:,:sim_duration_ms]
    
    # filter the inst rates according to smoothing sigma
    smoothing_window = signal.gaussian(1.0 + 7 * temporal_inst_rate_smoothing_sigma, std=temporal_inst_rate_smoothing_sigma)[np.newaxis,:]
    smoothing_window /= smoothing_window.sum()
    seg_inst_rate_ex_smoothed  = signal.convolve(ex_spike_rate_per_seg_per_1ms,  smoothing_window, mode='same')
    seg_inst_rate_inh_smoothed = signal.convolve(inh_spike_rate_per_seg_per_1ms, smoothing_window, mode='same')
    
    # sample the instantanous spike prob and then sample the actual spikes
    ex_inst_spike_prob = np.random.exponential(scale=seg_inst_rate_ex_smoothed)
    ex_spikes_bin      = np.random.rand(ex_inst_spike_prob.shape[0], ex_inst_spike_prob.shape[1]) < ex_inst_spike_prob

    inh_inst_spike_prob = np.random.exponential(scale=seg_inst_rate_inh_smoothed)
    inh_spikes_bin      = np.random.rand(inh_inst_spike_prob.shape[0], inh_inst_spike_prob.shape[1]) < inh_inst_spike_prob

    all_spikes_bin = np.vstack((ex_spikes_bin, inh_spikes_bin))

    return all_spikes_bin


def simulate_integrate_and_fire_cell(presynaptic_input_spikes, synaptic_weights, membrane_time_const=20, v_reset=-95, v_threshold=-50, current_to_voltage_mult_factor=5):
    temporal_filter_length = int(7 * membrane_time_const) + 1
    syn_filter = signal.exponential(M=temporal_filter_length,center=0,tau=membrane_time_const,sym=False)[np.newaxis,:]
    syn_local_currents = signal.convolve(presynaptic_input_spikes, syn_filter, mode='full')[:,:presynaptic_input_spikes.shape[1]]
    soma_current       = signal.convolve(syn_local_currents, np.flipud(synaptic_weights), mode='valid')
    
    # make simulations
    soma_voltage = v_reset + current_to_voltage_mult_factor * soma_current.ravel()
    output_spike_times_in_ms = []
    for t in range(len(soma_voltage)):
        if (soma_voltage[t] > v_threshold) and ((t + 1) < len(soma_voltage)):
            t_start = t + 1
            t_end = min(len(soma_voltage), t_start + temporal_filter_length)
            soma_voltage[t_start:t_end] -= (soma_voltage[t + 1] - v_reset) * syn_filter.ravel()[:(t_end - t_start)]
            output_spike_times_in_ms.append(t)

    return soma_voltage, output_spike_times_in_ms


def generate_multiple_simulations(input_generation_func, cell_simulation_func, num_simulations):
    
    num_synapses, sim_duration_ms = input_generation_func().shape
    X = np.zeros(((num_synapses, sim_duration_ms, num_simulations)), dtype=np.bool)
    y_spikes = np.zeros(((sim_duration_ms, num_simulations)), dtype=np.bool)
    y_soma   = np.zeros(((sim_duration_ms, num_simulations)), dtype=np.float32)
    for sim_ind in range(num_simulations):
        presynaptic_input_spikes = input_generation_func()
        soma_voltage, output_spike_times_in_ms = cell_simulation_func(presynaptic_input_spikes)
        
        X[:,:,sim_ind] = presynaptic_input_spikes
        y_spikes[output_spike_times_in_ms,sim_ind] = 1.0
        y_soma[:,sim_ind] = soma_voltage

    return X, y_spikes, y_soma


#%% collect a large dataset of {input,output} "recordings" from an Integrate and Fire (I&F) simulation

random_seed = 1234
np.random.seed(random_seed)

# simulation params
num_ex_synapses  = 80
num_inh_synapses = 20
num_synapses     = num_ex_synapses + num_inh_synapses

v_reset     = -75
v_threshold = -55
current_to_voltage_mult_factor = 2
membrane_time_const = 20

# create synaptic weights vector "w"
synaptic_weights = np.ones((num_synapses, 1))
exc_inds  = range(num_ex_synapses)
inh_inds = list(set(range(num_synapses)) - set(exc_inds))
synaptic_weights[exc_inds] *=  1.0
synaptic_weights[inh_inds] *= -1.0

sim_duration_ms  = 6000
sim_duration_sec = sim_duration_ms / 1000.0

inst_rate_sampling_time_interval_options_ms   = [25,30,35,40,50,60,70,80,90,100]
temporal_inst_rate_smoothing_sigma_options_ms = [40,60,80,100]

inst_rate_sampling_time_interval_jitter_range   = 20
temporal_inst_rate_smoothing_sigma_jitter_range = 20

num_exc_spikes_per_100ms_range = [0, 50]
num_exc_inh_spike_diff_per_100ms_range = [-50, -15]

num_simulations_train = 12000
num_simulations_test  = 1000

dataset_generation_start_time = time.time()

input_generation_func = lambda  : generate_input_spike_trains_for_simulation(sim_duration_ms=sim_duration_ms,
                                                                             num_exc_segments=num_ex_synapses, num_inh_segments=num_inh_synapses,
                                                                             num_exc_spikes_per_100ms_range=num_exc_spikes_per_100ms_range,
                                                                             num_exc_inh_spike_diff_per_100ms_range=num_exc_inh_spike_diff_per_100ms_range)
cell_simulation_func  = lambda x: simulate_integrate_and_fire_cell(x, synaptic_weights, membrane_time_const=membrane_time_const,
                                                                   v_reset=v_reset, v_threshold=v_threshold, current_to_voltage_mult_factor=current_to_voltage_mult_factor)

X_train, y_spike_train, y_soma_train = generate_multiple_simulations(input_generation_func, cell_simulation_func, num_simulations_train)
X_test , y_spike_test , y_soma_test  = generate_multiple_simulations(input_generation_func, cell_simulation_func, num_simulations_test )

y_soma_train[y_soma_train > v_threshold] = v_threshold + 0.1
y_soma_test[y_soma_test   > v_threshold] = v_threshold + 0.1

dataset_generation_duration_sec = time.time() - dataset_generation_start_time
print('dataset generation took %.2f minutes' %(dataset_generation_duration_sec / 60))
print('each simulation took %.3f seconds to generate' %(dataset_generation_duration_sec / (num_simulations_train + num_simulations_test)))

#%% plot some validatory plots

plt.close('all')
# verify that the generated X's and y's are fine

# input raster plots

num_ms_raster = 2000

plt.figure(figsize=(20,10))
plt.subplots_adjust(left=0.03,right=0.97,top=0.97,bottom=0.03,hspace=0.2)
plt.subplot(6,1,1); plt.spy(X_train[:,:num_ms_raster,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample'); plt.axis('off')
plt.subplot(6,1,2); plt.spy(X_train[:,:num_ms_raster,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample'); plt.axis('off')
plt.subplot(6,1,3); plt.spy(X_train[:,:num_ms_raster,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample'); plt.axis('off')
plt.ylabel('synaptic index')
plt.subplot(6,1,4); plt.spy(X_test[:,:num_ms_raster ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample'); plt.axis('off')
plt.subplot(6,1,5); plt.spy(X_test[:,:num_ms_raster ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample'); plt.axis('off')
plt.subplot(6,1,6); plt.spy(X_test[:,:num_ms_raster ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample'); plt.axis('off')
plt.xlabel('time [ms]')

# binary spikes
plt.figure(figsize=(20,13))
plt.subplots_adjust(left=0.05, right=0.95, top=0.95, bottom=0.05, hspace=0.32)
plt.subplot(6,1,1); plt.plot(y_spike_train[:,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample')
plt.subplot(6,1,2); plt.plot(y_spike_train[:,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample')
plt.subplot(6,1,3); plt.plot(y_spike_train[:,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample')
plt.subplot(6,1,4); plt.plot(y_spike_test[: ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample')
plt.subplot(6,1,5); plt.plot(y_spike_test[: ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample')
plt.subplot(6,1,6); plt.plot(y_spike_test[: ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample')
plt.xlabel('time [ms]')

# somatic voltage
plt.figure(figsize=(20,13))
plt.subplots_adjust(left=0.05, right=0.95, top=0.95, bottom=0.05, hspace=0.32)
plt.subplot(6,1,1); plt.plot(y_soma_train[:,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample')
plt.subplot(6,1,2); plt.plot(y_soma_train[:,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample')
plt.subplot(6,1,3); plt.plot(y_soma_train[:,np.random.randint(num_simulations_train)], markersize=3); plt.title('train sample')
plt.ylabel('voltage [mV]')
plt.subplot(6,1,4); plt.plot(y_soma_test[: ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample')
plt.subplot(6,1,5); plt.plot(y_soma_test[: ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample')
plt.subplot(6,1,6); plt.plot(y_soma_test[: ,np.random.randint(num_simulations_test) ], markersize=3); plt.title('test sample')
plt.xlabel('time [ms]')

# calculate ISI CV
ISIs_train = []
sim_inds, spike_times = np.nonzero(y_spike_train.T)
for curr_sim_ind in np.unique(sim_inds):
    curr_ISIs = np.diff(spike_times[sim_inds == curr_sim_ind])
    ISIs_train += list(curr_ISIs)
ISI_CV_train = np.array(ISIs_train).std() / np.array(ISIs_train).mean()

# plot ISI distribution and make sure it's fine
plt.figure(figsize=(30,15))
plt.subplots_adjust(left=0.05, right=0.95, top=0.95, bottom=0.05, hspace=0.12)
plt.subplot(2,1,1); plt.hist(ISIs_train, bins=range(0,2000,5))
plt.title('Inter spike interval (ISI) distribution')

plt.subplot(2,1,2); plt.hist(y_soma_train.ravel(), bins=150)
plt.title('Soma voltage distribution')

input_exc_inst_rate = X_train[:num_ex_synapses,:,:].mean() * 1000
input_inh_inst_rate = X_train[num_ex_synapses:,:,:].mean() * 1000

# summerize key statstics
print('-------------------------------------------')
print('train exc input firing rate = %.3f [Hz]' %(input_exc_inst_rate))
print('train inh input firing rate = %.3f [Hz]' %(input_inh_inst_rate))
print('-------------------------------------------')
print('train output firing rate = %.3f [Hz]' %(y_spike_train.mean() * 1000))
print('test  output firing rate = %.3f [Hz]' %(y_spike_test.mean() * 1000))
print('-------------------------------------------')
print('train output ISI Coefficient of Variation = %.3f' %(ISI_CV_train))
print('-------------------------------------------')


#%% helper function to create a temporally convolutional network


def create_temporaly_convolutional_model(max_input_window_size, num_segments, num_syn_types, filter_sizes_per_layer, num_filters_per_layer,
                                         activation_function_per_layer, l2_regularization_per_layer,
                                         strides_per_layer, dilation_rates_per_layer, initializer_per_layer):
    
    # define input and flatten it
    binary_input_mat = Input(shape=(max_input_window_size, num_segments * num_syn_types), name='input_layer')
        
    for k in range(len(filter_sizes_per_layer)):
        num_filters   = num_filters_per_layer[k]
        filter_size   = filter_sizes_per_layer[k]
        activation    = activation_function_per_layer[k]
        l2_reg        = l2_regularization_per_layer[k]
        stride        = strides_per_layer[k]
        dilation_rate = dilation_rates_per_layer[k]
        initializer   = initializer_per_layer[k]
        
        initializer = initializers.TruncatedNormal(stddev=initializer)
        first_layer_bias_initializer = initializers.Constant(value=0.1)

        if k == 0:
            x = Conv1D(num_filters, filter_size, activation=activation, bias_initializer=first_layer_bias_initializer, kernel_initializer=initializer,
                       kernel_regularizer=l2(l2_reg), strides=stride, dilation_rate=dilation_rate, padding='causal', name='layer_%d' %(k + 1))(binary_input_mat)
        else:
            x = Conv1D(num_filters, filter_size, activation=activation, kernel_initializer=initializer, kernel_regularizer=l2(l2_reg),
                       strides=stride, dilation_rate=dilation_rate, padding='causal', name='layer_%d' %(k + 1))(x)
        #x = BatchNormalization(name='layer_%d_BN'%(k+1))(x)

    output_spike_init_weights = initializers.TruncatedNormal(stddev=0.05)
    output_spike_init_bias    = initializers.Constant(value=-2.5)
    output_soma_init  = initializers.TruncatedNormal(stddev=0.05)

    output_spike_predictions = Conv1D(1, 1, activation='sigmoid', kernel_initializer=output_spike_init_weights, bias_initializer=output_spike_init_bias,
                                                                  kernel_regularizer=l2(1e-8), padding='causal', name='spikes')(x)
    output_soma_voltage_pred = Conv1D(1, 1, activation='linear' , kernel_initializer=output_soma_init, kernel_regularizer=l2(1e-8), padding='causal', name='soma')(x)

    temporaly_convolutional_network_model = Model(inputs=binary_input_mat, outputs=[output_spike_predictions, output_soma_voltage_pred])

    optimizer_to_use = Nadam(lr=0.0003)
    temporaly_convolutional_network_model.compile(optimizer=optimizer_to_use, loss=['binary_crossentropy','mse'], loss_weights=[1.0, 0.003])
    temporaly_convolutional_network_model.summary()

    return temporaly_convolutional_network_model


#%% define network architecture

max_input_window_size = 500
num_segments  = 100
num_syn_types = 1

network_name = '1_layer_TCN'

network_depth = 1
filter_sizes_per_layer        = [80] * network_depth
num_filters_per_layer         = [1] * network_depth
initializer_per_layer         = [0.25] * network_depth
activation_function_per_layer = ['linear'] * network_depth
l2_regularization_per_layer   = [1e-8] * network_depth
strides_per_layer             = [1] * network_depth
dilation_rates_per_layer      = [1] * network_depth

# define model
temporal_conv_net = create_temporaly_convolutional_model(max_input_window_size, num_segments, num_syn_types, filter_sizes_per_layer, num_filters_per_layer,
                                                         activation_function_per_layer, l2_regularization_per_layer,
                                                         strides_per_layer, dilation_rates_per_layer, initializer_per_layer)

# prepare data for training
X_train_for_TCN  = np.transpose(X_train,axes=[2,1,0])
y1_train_for_TCN = y_spike_train.T[:,:,np.newaxis]
y2_train_for_TCN = y_soma_train.T[:,:,np.newaxis] - y_soma_train.mean()


#%% train model

num_train_subsets = 100
num_epochs_per_subset = 1
batch_size = 16
val_split_ratio = 0.05

num_iter_per_epoch = int(((1 - val_split_ratio) * X_train_for_TCN.shape[0]) / batch_size) + 1

num_iterations    = [0]
train_spikes_loss = [np.nan]
valid_spikes_loss = [np.nan]
train_soma_loss   = [np.nan]
valid_soma_loss   = [np.nan]

for k in range(num_train_subsets):
    start_time_ind = np.random.randint(X_train_for_TCN.shape[1] - max_input_window_size - 1)
    end_time_ind   = start_time_ind + max_input_window_size
    
    print('%d: selected timepoint range = [%d, %d]' %(k + 1, start_time_ind, end_time_ind))
    
    history = temporal_conv_net.fit(X_train_for_TCN[:,start_time_ind:end_time_ind,:],
                                    [y1_train_for_TCN[:,start_time_ind:end_time_ind,:], y2_train_for_TCN[:,start_time_ind:end_time_ind,:]],
                                    epochs=num_epochs_per_subset, batch_size=batch_size, validation_split=val_split_ratio)

    num_iterations.append(num_iterations[-1] + num_iter_per_epoch)
    train_spikes_loss.append(history.history['spikes_loss'][0])
    train_soma_loss.append(history.history['soma_loss'][0])
    valid_spikes_loss.append(history.history['val_spikes_loss'][0])
    valid_soma_loss.append(history.history['val_soma_loss'][0])

#%% show learning curves

plt.close('all')

plt.figure(figsize=(15,10))
plt.subplots_adjust(left=0.08,right=0.95,top=0.95,bottom=0.06,hspace=0.3)

plt.subplot(4,1,1); plt.title('spikes loss')
plt.plot(np.array(num_iterations).ravel(), np.array(train_spikes_loss).ravel())
plt.plot(np.array(num_iterations).ravel(), np.array(valid_spikes_loss).ravel())
plt.legend(['train', 'valid'])
plt.ylabel('log loss')

plt.subplot(4,1,2); plt.title('soma loss')
plt.plot(np.array(num_iterations).ravel(), np.array(train_soma_loss).ravel())
plt.plot(np.array(num_iterations).ravel(), np.array(valid_soma_loss).ravel())
plt.legend(['train', 'valid'])
plt.ylabel('MSE')

plt.subplot(4,1,3); plt.title('spikes loss')
plt.semilogy(np.array(num_iterations).ravel(), np.array(train_spikes_loss).ravel())
plt.semilogy(np.array(num_iterations).ravel(), np.array(valid_spikes_loss).ravel())
plt.legend(['train', 'valid'])
plt.ylabel('log loss')

plt.subplot(4,1,4); plt.title('soma loss')
plt.semilogy(np.array(num_iterations).ravel(), np.array(train_soma_loss).ravel())
plt.semilogy(np.array(num_iterations).ravel(), np.array(valid_soma_loss).ravel())
plt.legend(['train', 'valid'])
plt.ylabel('MSE')
plt.xlabel('num train steps')

#%% show first layer weights with temporal cross section below

xytick_labels_fontsize = 16
title_fontsize = 30
xylabels_fontsize = 25
legend_fontsize = 26

first_layer_weights = temporal_conv_net.get_weights()[0][:,:,0].T

# correct positivity for presentation if necessary
is_excitation_negative = first_layer_weights[:num_ex_synapses,-20:].sum() < 0
if is_excitation_negative:
    first_layer_weights = -first_layer_weights

exc_max_avg_w_value = first_layer_weights[:num_ex_synapses,:].mean(axis=0).max()
inh_min_avg_w_value = first_layer_weights[num_ex_synapses:,:].mean(axis=0).min()

# make sure the range is symmetric for visualization purposes
vmin_max_range = [1.05 * inh_min_avg_w_value, -1.05 * inh_min_avg_w_value]

plt.close('all')
fig = plt.figure(figsize=(9,17))
gs = gridspec.GridSpec(3, 1)
gs.update(left=0.15, right=0.85, bottom=0.08, top=0.95, hspace=0.08)
ax1 = plt.subplot(gs[:2,0])
ax2 = plt.subplot(gs[2,0])

ax1.set_title('layer 1 spatio-temporal filter', fontsize=title_fontsize)
ax1.imshow(first_layer_weights,cmap='jet', vmin=vmin_max_range[0], vmax=vmin_max_range[1])
ax1.set_xticks([])
ax1.set_ylabel('syn index', fontsize=xylabels_fontsize)

for ytick_label in ax1.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)

time_axis_weights = -np.arange(first_layer_weights.shape[1])
ax2.set_title('temporal cross sections', fontsize=title_fontsize)
ax2.plot(time_axis_weights, np.flipud(first_layer_weights[:num_ex_synapses,:].T),c='r')
ax2.plot(time_axis_weights, np.flipud(first_layer_weights[num_ex_synapses:,:].T),c='b')
ex_synapses_patch = mpatches.Patch(color='red', label='exc syn')
inh_synapses_patch = mpatches.Patch(color='blue', label='inh syn')
ax2.legend(handles=[ex_synapses_patch, inh_synapses_patch], fontsize=legend_fontsize, loc='upper left')
ax2.set_xlim(time_axis_weights.min(),time_axis_weights.max())
ax2.set_xlabel('time before prediction moment [ms]', fontsize=xylabels_fontsize)
ax2.set_ylabel('weight', fontsize=xylabels_fontsize)
ax2.set_ylim(vmin_max_range[0], vmin_max_range[1])

for ytick_label in ax2.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)
for xtick_label in ax2.get_xticklabels():
    xtick_label.set_fontsize(xytick_labels_fontsize)

if save_figures:
    figure_name = 'figure1D learned_weights %d' %(np.random.randint(50))

    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% create spike predictions on test set from the fitted network output

prediction_start_time = time.time()

max_input_window_size

overlap_size = 120

X_test_for_TCN = np.transpose(X_test,axes=[2,1,0])
y1_test_for_TCN = y_spike_test.T[:,:,np.newaxis]
y2_test_for_TCN = y_soma_test.T[:,:,np.newaxis] - y_soma_train.mean()

y1_test_for_TCN_hat = np.zeros(y1_test_for_TCN.shape)
y2_test_for_TCN_hat = np.zeros(y2_test_for_TCN.shape)

num_test_splits = int(2 + (X_test_for_TCN.shape[1] - max_input_window_size) / (max_input_window_size - overlap_size))

for k in range(num_test_splits):
    start_time_ind = k * (max_input_window_size - overlap_size)
    end_time_ind   = start_time_ind + max_input_window_size
    
    curr_X_test_for_TCN = X_test_for_TCN[:,start_time_ind:end_time_ind,:]
    
    if curr_X_test_for_TCN.shape[1] < max_input_window_size:
        padding_size = max_input_window_size - curr_X_test_for_TCN.shape[1]
        X_pad = np.zeros((curr_X_test_for_TCN.shape[0],padding_size,curr_X_test_for_TCN.shape[2]))
        curr_X_test_for_TCN = np.hstack((curr_X_test_for_TCN,X_pad))
    curr_y1_test_for_TCN, curr_y2_test_for_TCN = temporal_conv_net.predict(curr_X_test_for_TCN)

    if k == 0:
        y1_test_for_TCN_hat[:,:end_time_ind,:] = curr_y1_test_for_TCN
        y2_test_for_TCN_hat[:,:end_time_ind,:] = curr_y2_test_for_TCN
    elif k == (num_test_splits - 1):
        t0 = start_time_ind + overlap_size
        duration_to_fill = y1_test_for_TCN_hat.shape[1] - t0
        y1_test_for_TCN_hat[:,t0:,:] = curr_y1_test_for_TCN[:,overlap_size:(overlap_size + duration_to_fill),:]
        y2_test_for_TCN_hat[:,t0:,:] = curr_y2_test_for_TCN[:,overlap_size:(overlap_size + duration_to_fill),:]
    else:
        t0 = start_time_ind + overlap_size
        y1_test_for_TCN_hat[:,t0:end_time_ind,:] = curr_y1_test_for_TCN[:,overlap_size:,:]
        y2_test_for_TCN_hat[:,t0:end_time_ind,:] = curr_y2_test_for_TCN[:,overlap_size:,:]

prediction_duration_min = (time.time() - prediction_start_time) / 60
print('time took to predict is %.3f minutes' %(prediction_duration_min))


#%% show main evaluation metrics

plt.close('all')

xytick_labels_fontsize = 16
title_fontsize = 30
xylabels_fontsize = 25
legend_fontsize = 26

fig = plt.figure(figsize=(11,17))
gs = gridspec.GridSpec(3,1)
gs.update(left=0.12, right=0.95, bottom=0.05, top=0.92, hspace=0.6)
ax0 = plt.subplot(gs[0,0])
ax1 = plt.subplot(gs[1,0])
ax2 = plt.subplot(gs[2,0])

y_test = y_spike_test
y_test_hat = y1_test_for_TCN_hat[:,:,0].T

## plot histograms of prediction given ground truth
ax0.hist(y_test_hat[y_test == True ], bins=np.linspace(0,1,50), color='g', alpha=0.8, normed=True)
ax0.hist(y_test_hat[y_test == False], bins=np.linspace(0,1,50), color='b', alpha=0.8, normed=True)
ax0.set_title('spike probability prediction histograms', fontsize=title_fontsize)
ax0.set_xlabel('predicted spike probability', fontsize=xylabels_fontsize)
ax0.set_ylabel('density', fontsize=xylabels_fontsize)
ax0.legend(['P(prediction|spike)','P(prediction|no spike)'], fontsize=legend_fontsize)

for tick_label in (ax0.get_xticklabels() + ax0.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

## plot ROC curve
fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())
AUC_score = auc(fpr, tpr)

ax1.plot(fpr, tpr)
ax1.set_title('ROC curve (AUC = %.3f)' %(AUC_score), fontsize=title_fontsize)
ax1.set_xlabel('False Positive Rate', fontsize=xylabels_fontsize)
ax1.set_ylabel('True Positive Rate', fontsize=xylabels_fontsize)
ax1.set_ylim(0,1.05)
ax1.set_xlim(-0.03,1)

for tick_label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

desired_false_positive_rate = 0.002
desired_fp_ind = np.argmin(abs(fpr - desired_false_positive_rate))
if desired_fp_ind == 0:
    desired_fp_ind = 1
actual_false_positive_rate = fpr[desired_fp_ind]
print('at %.4f FP rate, TP = %.4f' %(actual_false_positive_rate, tpr[desired_fp_ind]))

# organize the data for ploting
desired_threshold = thresholds[desired_fp_ind]
ground_truth_output_spikes = y_test.T
predicted_output_spikes    = y_test_hat.T > desired_threshold
num_test_traces            = X_test.shape[2]

## plot the cross correlation between the spike trains

half_time_window_size_ms = 50
delta_time = 10

inds_inside_delta = range(half_time_window_size_ms - delta_time, half_time_window_size_ms + 1 + delta_time)

# pad both spike train predictions with zeros from both sides
zero_padding_matrix = np.zeros((num_test_traces,half_time_window_size_ms))
predicted_output_spikes_padded    = np.hstack((zero_padding_matrix,predicted_output_spikes,zero_padding_matrix))
ground_truth_output_spikes_padded = np.hstack((zero_padding_matrix,ground_truth_output_spikes,zero_padding_matrix))

# calculate recall curve: P(predicted spikes|ground truth=spike)
recall_curve = np.zeros(1 + 2 * half_time_window_size_ms)
trace_inds, spike_inds = np.nonzero(ground_truth_output_spikes_padded)
for trace_ind, spike_ind in zip(trace_inds,spike_inds):
    recall_curve += predicted_output_spikes_padded[trace_ind,(spike_ind - half_time_window_size_ms):(1 + spike_ind + half_time_window_size_ms)]
recall_curve /= recall_curve.sum()
recall = recall_curve[inds_inside_delta].sum()

time_axis_cc = np.arange(-half_time_window_size_ms, half_time_window_size_ms + 1)

time_in_delta = time_axis_cc[inds_inside_delta]
recall_in_delta = recall_curve[inds_inside_delta]
recall_patch = mpatches.Patch(color='b', label='area = %.2f' %(recall))

ax2.set_title('$P(Prediction | GroundTruth = 1)$', fontsize=title_fontsize)
ax2.plot(time_axis_cc, recall_curve, c='k')
ax2.fill_between(time_in_delta, recall_in_delta, 0, facecolor='b', alpha=0.8)
ax2.legend(handles=[recall_patch],fontsize=legend_fontsize)
ax2.vlines([time_in_delta[0],time_in_delta[-1]], [0,0], [recall_in_delta[0],recall_in_delta[-1]], colors='k', linewidths=3.3)
ax2.set_ylim(0, 1.05 * recall_curve.max())
ax2.set_xlabel('$\Delta t$ [ms]', fontsize=xylabels_fontsize)
ax2.set_ylabel('density', fontsize=xylabels_fontsize)

for tick_label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

if save_figures:
    figure_name = 'figure1B spike predictions %d' %(np.random.randint(50))

    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

## plot voltage trace scatter plot

fig = plt.figure(figsize=(12,15))
gs = gridspec.GridSpec(3, 1)
gs.update(left=0.12, right=0.95, bottom=0.05, top=0.92, hspace=0.37)
ax0 = plt.subplot(gs[:2,0])
ax1 = plt.subplot(gs[2,0])

xytick_labels_fontsize = 16
title_fontsize = 25
xylabels_fontsize = 22
legend_fontsize = 26

num_datapoints_in_scatter = 60000
mean_soma_voltage = y_soma_train.mean()
selected_datapoints = np.random.choice(range(len(y2_test_for_TCN.ravel())),size=num_datapoints_in_scatter,replace=False)
selected_GT = y2_test_for_TCN.ravel()[selected_datapoints] + 0.02 * np.random.randn(num_datapoints_in_scatter) + mean_soma_voltage
selected_pred = y2_test_for_TCN_hat.ravel()[selected_datapoints] + mean_soma_voltage

soma_explained_variance_percent = 100.0 * explained_variance_score(y2_test_for_TCN.ravel(),y2_test_for_TCN_hat.ravel())
soma_RMSE = np.sqrt(MSE(y2_test_for_TCN.ravel(),y2_test_for_TCN_hat.ravel()))
soma_MAE  = MAE(y2_test_for_TCN.ravel(),y2_test_for_TCN_hat.ravel())


ax0.scatter(selected_GT,selected_pred, s=1.5, alpha=0.8)
ax0.set_title('soma voltage prediction. explained variance = %.2f%s' %(soma_explained_variance_percent,'%'), fontsize=title_fontsize)
ax0.set_xlabel('ground truth soma voltage [mV]', fontsize=xylabels_fontsize)
ax0.set_ylabel('predicted soma voltage [mV]', fontsize=xylabels_fontsize)
soma_voltage_lims = np.round([np.percentile(selected_pred,0.2),np.percentile(selected_pred,99.8)]).astype(int)
voltage_granularity = 5
voltage_setpoint = -56
voltage_axis = np.arange(soma_voltage_lims[0],soma_voltage_lims[1])
voltage_ticks_to_show = np.unique(((voltage_axis - voltage_setpoint) / voltage_granularity).astype(int) * voltage_granularity + voltage_setpoint)
voltage_ticks_to_show = voltage_ticks_to_show[np.logical_and(voltage_ticks_to_show >= soma_voltage_lims[0],
                                                             voltage_ticks_to_show <= soma_voltage_lims[1])]
ax0.set_xticks(voltage_ticks_to_show)
ax0.set_yticks(voltage_ticks_to_show)
ax0.set_xlim(soma_voltage_lims[0],soma_voltage_lims[1])
ax0.set_ylim(soma_voltage_lims[0],soma_voltage_lims[1])
ax0.plot([-90,-50],[-90,-50], ls='-', c='k')
ax0.spines['top'].set_visible(False)
ax0.spines['right'].set_visible(False)

for tick_label in (ax0.get_xticklabels() + ax0.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

ax1.hist(y2_test_for_TCN_hat.ravel() - y2_test_for_TCN.ravel(), bins=300, normed=True)
ax1.set_title('voltage prediction redisduals. RMSE = %.3f [mV]' %(soma_RMSE), fontsize=title_fontsize)
ax1.set_xlabel('$\Delta$V [mV]', fontsize=xylabels_fontsize)
ax1.set_xlim(-20,20)
ax1.set_yticks([])

for tick_label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

if save_figures:
    figure_name = 'figure1C voltage predictions %d' %(np.random.randint(50))

    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')


#%% figure 1 replication

xytick_labels_fontsize = 16
title_fontsize = 26
xylabels_fontsize = 17
legend_fontsize = 15

num_spikes_per_simulation = y1_test_for_TCN.sum(axis=1)[:,0]
soma_bias_to_add = y_soma_train.mean()

# get a selected trace
possible_presentable_candidates = np.nonzero(np.logical_and(num_spikes_per_simulation >= 2, num_spikes_per_simulation <= 10))[0]
selected_trace  = np.random.choice(possible_presentable_candidates)
zoomin_fraction = [0.25 + 0.24 * np.random.rand(), 0.51 + 0.24 * np.random.rand()]

selected_trace  = 937
zoomin_fraction = [0.295,0.53]

print('selected_trace = %s' %(selected_trace))
print('zoomin_fraction = %s' %(zoomin_fraction))

# collect everything need for presentation
spike_trace_GT   = y1_test_for_TCN[selected_trace,:,0]
spike_trace_pred = y1_test_for_TCN_hat[selected_trace,:,0] > desired_threshold

output_spike_times_in_ms_GT   = np.nonzero(spike_trace_GT)[0]
output_spike_times_in_ms_pred = np.nonzero(spike_trace_pred)[0]

soma_voltage_trace_GT   = y2_test_for_TCN[selected_trace,:,0] + soma_bias_to_add
soma_voltage_trace_pred = y2_test_for_TCN_hat[selected_trace,:,0] + soma_bias_to_add

soma_voltage_trace_GT[output_spike_times_in_ms_GT] = 40
soma_voltage_trace_pred[output_spike_times_in_ms_pred] = 40

sim_duration_ms = spike_trace_GT.shape[0]
time_in_sec = np.arange(sim_duration_ms) / 1000.0

# for raster plot (scatter)
all_presynaptic_spikes_bin = X_test_for_TCN[selected_trace,:,:]

syn_activation_time, syn_activation_index = np.nonzero(all_presynaptic_spikes_bin)
ex_synapses_inds = syn_activation_index < num_ex_synapses

ex_syn_activation_time   = syn_activation_time[ex_synapses_inds] / 1000.0
ex_syn_activation_index  = num_synapses - syn_activation_index[ex_synapses_inds]
inh_syn_activation_time  = syn_activation_time[~ex_synapses_inds] / 1000.0
inh_syn_activation_index = num_synapses - syn_activation_index[~ex_synapses_inds]


# set up the grid specs
plt.close('all')
fig = plt.figure(figsize=(24,18.5))

gs1 = gridspec.GridSpec(3,1)
gs1.update(left=0.05, right=0.65, bottom=0.05, top=0.45, wspace=0.01, hspace=0.01)

gs2 = gridspec.GridSpec(12,2)
gs2.update(left=0.73, right=0.97, bottom=0.07, top=0.97, wspace=0.58, hspace=1.05)

ax10 = plt.subplot(gs1[0,0])
ax11 = plt.subplot(gs1[1,0])
ax12 = plt.subplot(gs1[2,0])

ax10.axis('off')
ax11.axis('off')
ax12.axis('off')

ax31 = plt.subplot(gs2[:5,:])
ax32 = plt.subplot(gs2[5:7,:])

a33_left  = plt.subplot(gs2[7:9,0])
a33_right = plt.subplot(gs2[7:9,1])

ax34 = plt.subplot(gs2[9:,:])


### left column of the figure

## raster of input exitation and inhibition of the selected trace
ax10.scatter(ex_syn_activation_time, ex_syn_activation_index, s=2, c='r')
ax10.scatter(inh_syn_activation_time, inh_syn_activation_index, s=2, c='b')
ax10.set_xlim(0, sim_duration_sec - 0.01)
ax10.set_ylabel('syn index', fontsize=xylabels_fontsize)
ax10.grid('off')
ax10.set_yticks([])
ax10.set_xticks([])

## ground truth and prediction trace
ax11.plot(time_in_sec,soma_voltage_trace_GT,c='c')
ax11.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
ax11.set_xlim(0,sim_duration_sec)
ax11.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
for tick_label in (ax11.get_xticklabels() + ax11.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

# add dashed rectangle
zoomin_xlims = [zoomin_fraction[0] * sim_duration_sec, zoomin_fraction[1] * sim_duration_sec]
zoomin_dur_sec = zoomin_xlims[1] - zoomin_xlims[0]
zoomin_time_in_sec = np.logical_and(time_in_sec >= zoomin_xlims[0], time_in_sec <= zoomin_xlims[1])
zoomin_ylims = [soma_voltage_trace_GT[zoomin_time_in_sec].min() -2.5, -49]
zoomin_scalebar_xloc = zoomin_xlims[1] - 0.05 * zoomin_dur_sec

rect_w = zoomin_xlims[1] - zoomin_xlims[0]
rect_h = zoomin_ylims[1] - zoomin_ylims[0]
rect_bl_x = zoomin_xlims[0]
rect_bl_y = zoomin_ylims[0]
dashed_rectangle = mpatches.Rectangle((rect_bl_x,rect_bl_y),rect_w,rect_h,linewidth=2,edgecolor='k',linestyle='--',facecolor='none')

ax11.add_patch(dashed_rectangle)

## zoomin section of ground truth and prediction trace
ax12.plot(time_in_sec,soma_voltage_trace_GT,c='c')
ax12.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
ax12.set_xlim(zoomin_xlims[0],zoomin_xlims[1])
ax12.set_ylim(zoomin_ylims[0],zoomin_ylims[1])
ax12.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
ax12.set_xlabel('time (sec)', fontsize=xylabels_fontsize)

for tick_label in (ax12.get_xticklabels() + ax12.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

# add scale bar to top plot
zoomout_scalebar_xloc = 0.95 * sim_duration_sec

scalebar_loc = np.array([zoomout_scalebar_xloc,-25])
scalebar_size_x = 0.6
scalebar_str_x = '600 ms'
scalebar_size_y = 40
scalebar_str_y = '40 mV'

x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
y = [scalebar_loc[1], scalebar_loc[1]]
ax11.plot(x,y,lw=2,c='k')
ax11.text(scalebar_loc[0] - 0.05 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
          scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')

x = [scalebar_loc[0], scalebar_loc[0]]
y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
ax11.plot(x,y,lw=2,c='k')
ax11.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
          scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

# add scalebar to bottom plot
scalebar_loc = np.array([zoomin_scalebar_xloc,-58])
scalebar_size_x = 0.1
scalebar_str_x = '100 ms'
scalebar_size_y = 8
scalebar_str_y = '%d mV' %(scalebar_size_y)

x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
y = [scalebar_loc[1], scalebar_loc[1]]
ax12.plot(x,y,lw=2,c='k')
ax12.text(scalebar_loc[0] - 0.15 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
          scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')

x = [scalebar_loc[0], scalebar_loc[0]]
y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
ax12.plot(x,y,lw=2,c='k')
ax12.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
          scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

### right column of the figure

## ROC curve
a33_left.plot(fpr, tpr, c='k')
a33_left.set_xlabel('False alarm rate', fontsize=xylabels_fontsize)
a33_left.set_ylabel('Hit rate', fontsize=xylabels_fontsize)
a33_left.set_ylim(0,1.05)
a33_left.set_xlim(-0.03,1)

a33_left.spines['top'].set_visible(False)
a33_left.spines['right'].set_visible(False)

for tick_label in (a33_left.get_xticklabels() + a33_left.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

left, bottom, width, height = [0.768, 0.327, 0.047, 0.067]
a33_left_inset = fig.add_axes([left, bottom, width, height])
a33_left_inset.plot(fpr, tpr, c='k')
a33_left_inset.set_ylim(0,1.05)
a33_left_inset.set_xlim(-0.001,0.012)
a33_left_inset.spines['top'].set_visible(False)
a33_left_inset.spines['right'].set_visible(False)
a33_left_inset.scatter(actual_false_positive_rate, tpr[desired_fp_ind + 1], c='r', s=100)

print('at %.4f FP rate, TP = %.4f' %(actual_false_positive_rate, tpr[desired_fp_ind]))

## cross correlation between the spike trains
a33_right.plot(time_axis_cc, 1000 * recall_curve, c='k')
a33_right.set_ylim(0, 1.05 * 1000 * recall_curve.max())
a33_right.set_xlabel('$\Delta t$ (ms)', fontsize=xylabels_fontsize)
a33_right.set_ylabel('spike rate (Hz)', fontsize=xylabels_fontsize)
a33_right.spines['top'].set_visible(False)
a33_right.spines['right'].set_visible(False)
a33_right.spines['left'].set_visible(False)
a33_right.spines['bottom'].set_visible(False)
for tick_label in (a33_right.get_xticklabels() + a33_right.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

## weights heatmap
vmin_max_range = [1.1 * inh_min_avg_w_value, -1.1 * inh_min_avg_w_value]
vmin_max_range_to_plot = (8 * np.array(vmin_max_range)).astype(int) / 10

weights_images = ax31.imshow(first_layer_weights, cmap='jet', aspect='auto', vmin=vmin_max_range[0], vmax=vmin_max_range[1])
ax31.set_xticks([])
ax31.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
for ytick_label in ax31.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)


ax_colorbar = inset_axes(ax31, width="50%", height="6%", loc=2)
cbar = plt.colorbar(weights_images, cax=ax_colorbar, orientation="horizontal", ticks=[vmin_max_range_to_plot[0], 0, vmin_max_range_to_plot[1]])
ax_colorbar.xaxis.set_ticks_position("bottom")
cbar.ax.tick_params(labelsize=15)

ax31.text(12, 12, 'weight (A.U)', color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

## temporal cross sections of weights
ax32.plot(time_axis_weights, np.flipud(first_layer_weights[:num_ex_synapses,:].T),c='r')
ax32.plot(time_axis_weights, np.flipud(first_layer_weights[num_ex_synapses:,:].T),c='b')
ax32.set_xlim(time_axis_weights.min(),time_axis_weights.max())
ax32.set_xlabel('Time before $t_0$ (ms)', fontsize=xylabels_fontsize)
ax32.set_ylabel('Weight (A.U)', fontsize=xylabels_fontsize)
ax32.set_ylim(vmin_max_range[0], vmin_max_range[1])
ax32.set_yticks([vmin_max_range_to_plot[0],0,vmin_max_range_to_plot[1]])

for ytick_label in ax32.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)
for xtick_label in ax32.get_xticklabels():
    xtick_label.set_fontsize(xytick_labels_fontsize)

# place a text box in upper left in axes coords
ax32.text(-25, 0.5 * vmin_max_range_to_plot[1] - 0.1, 'Exc', color='r', fontsize=20, verticalalignment='bottom')
ax32.text(-25, 0.5 * vmin_max_range_to_plot[0], 'Inh', color='b', fontsize=20, verticalalignment='top')

## voltage predction scatter plot
ax34.scatter(selected_GT,selected_pred, s=1.0, alpha=0.8)
soma_voltage_lims = np.round([np.percentile(selected_pred,0.2),np.percentile(selected_pred,99.8)]).astype(int)
voltage_granularity = 5
voltage_setpoint = -56
voltage_axis = np.arange(soma_voltage_lims[0],soma_voltage_lims[1])
voltage_ticks_to_show = np.unique(((voltage_axis - voltage_setpoint) / voltage_granularity).astype(int) * voltage_granularity + voltage_setpoint)
voltage_ticks_to_show = voltage_ticks_to_show[np.logical_and(voltage_ticks_to_show >= soma_voltage_lims[0],
                                                             voltage_ticks_to_show <= soma_voltage_lims[1])]
ax34.set_xticks(voltage_ticks_to_show)
ax34.set_yticks(voltage_ticks_to_show)
ax34.set_xlim(soma_voltage_lims[0],soma_voltage_lims[1])
ax34.set_ylim(soma_voltage_lims[0],soma_voltage_lims[1])
ax34.plot([-90,-50],[-90,-50], ls='-', c='k')
ax34.set_xlabel('I&F (mV)', fontsize=xylabels_fontsize)
ax34.set_ylabel('ANN (mV)', fontsize=xylabels_fontsize)
ax34.spines['top'].set_visible(False)
ax34.spines['right'].set_visible(False)

for tick_label in (ax34.get_xticklabels() + ax34.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

# save figure
if save_figures:
    figure_name = 'figure1_full_figure_v3_%d' %(np.random.randint(100))

    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')


================================================================================
================================================================================
evaluate_CNN_valid.py:
======================
import numpy as np
import glob
import time
import cPickle as pickle
from keras.models import Model, load_model
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import roc_auc_score as AUC
from sklearn.metrics import mean_absolute_error as MAE
from sklearn.metrics import explained_variance_score
from sklearn.metrics import roc_curve, auc

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% helper functions


def dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):
    
    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')
    for row_ind in row_inds_spike_times_map.keys():
        for spike_time in row_inds_spike_times_map[row_ind]:
            bin_spikes_matrix[row_ind,spike_time] = 1.0
    
    return bin_spikes_matrix


def parse_sim_experiment_file(sim_experiment_file):
    
    print('-----------------------------------------------------------------')
    print("loading file: '" + sim_experiment_file.split("\\")[-1] + "'")
    loading_start_time = time.time()
    experiment_dict = pickle.load(open(sim_experiment_file, "rb" ))
    
    # gather params
    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
    num_segments    = len(experiment_dict['Params']['allSegmentsType'])
    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000
    num_ex_synapses  = num_segments
    num_inh_synapses = num_segments
    num_synapses = num_ex_synapses + num_inh_synapses
    
    # collect X, y_spike, y_soma
    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')
    y_spike = np.zeros((sim_duration_ms,num_simulations))
    y_soma  = np.zeros((sim_duration_ms,num_simulations))
    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)
        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)
        X[:,:,k] = np.vstack((X_ex,X_inh))
        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)
        y_spike[spike_times,k] = 1.0
        y_soma[:,k] = sim_dict['somaVoltageLowRes']

    loading_duration_sec = time.time() - loading_start_time
    print('loading took %.3f seconds' %(loading_duration_sec))
    print('-----------------------------------------------------------------')

    return X, y_spike, y_soma


def parse_multiple_sim_experiment_files(sim_experiment_files):
    
    for k, sim_experiment_file in enumerate(sim_experiment_files):
        X_curr, y_spike_curr, y_soma_curr = parse_sim_experiment_file(sim_experiment_file)
        
        if k == 0:
            X       = X_curr
            y_spike = y_spike_curr
            y_soma  = y_soma_curr
        else:
            X       = np.dstack((X,X_curr))
            y_spike = np.hstack((y_spike,y_spike_curr))
            y_soma  = np.hstack((y_soma,y_soma_curr))

    return X, y_spike, y_soma


def calc_AUC_at_desired_FP(y_test, y_test_hat, desired_false_positive_rate=0.01):
    fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())

    linear_spaced_FPR = np.linspace(0,1,num=20000)
    linear_spaced_TPR = np.interp(linear_spaced_FPR, fpr, tpr)
    
    desired_fp_ind = min(max(1, np.argmin(abs(linear_spaced_FPR - desired_false_positive_rate))), linear_spaced_TPR.shape[0] -1)
    
    return linear_spaced_TPR[:desired_fp_ind].mean()


def calc_TP_at_desired_FP(y_test, y_test_hat, desired_false_positive_rate=0.0025):
    fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())
    
    desired_fp_ind = np.argmin(abs(fpr - desired_false_positive_rate))
    if desired_fp_ind == 0:
        desired_fp_ind = 1

    return tpr[desired_fp_ind]


def exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat, desired_FP_list=[0.0025,0.0100]):
    
    # evaluate the model and save the results
    print('----------------------------------------------------------------------------------------')
    print('calculating key results...')
    
    evaluation_start_time = time.time()
    
    # store results in the hyper param dict and return it
    evaluations_results_dict = {}
    
    for desired_FP in desired_FP_list:
        TP_at_desired_FP  = calc_TP_at_desired_FP(y_spikes_GT, y_spikes_hat, desired_false_positive_rate=desired_FP)
        AUC_at_desired_FP = calc_AUC_at_desired_FP(y_spikes_GT, y_spikes_hat, desired_false_positive_rate=desired_FP)
        print('-----------------------------------')
        print('TP  at %.4f FP rate = %.4f' %(desired_FP, TP_at_desired_FP))
        print('AUC at %.4f FP rate = %.4f' %(desired_FP, AUC_at_desired_FP))
        TP_key_string = 'TP @ %.4f FP' %(desired_FP)
        evaluations_results_dict[TP_key_string] = TP_at_desired_FP
    
        AUC_key_string = 'AUC @ %.4f FP' %(desired_FP)
        evaluations_results_dict[AUC_key_string] = AUC_at_desired_FP
    
    print('--------------------------------------------------')
    fpr, tpr, thresholds = roc_curve(y_spikes_GT.ravel(), y_spikes_hat.ravel())
    AUC_score = auc(fpr, tpr)
    print('AUC = %.4f' %(AUC_score))
    print('--------------------------------------------------')
    
    soma_explained_variance_percent = 100.0 * explained_variance_score(y_soma_GT.ravel(),y_soma_hat.ravel())
    soma_RMSE = np.sqrt(MSE(y_soma_GT.ravel(),y_soma_hat.ravel()))
    soma_MAE  = MAE(y_soma_GT.ravel(),y_soma_hat.ravel())
    
    print('--------------------------------------------------')
    print('soma explained_variance percent = %.2f%s' %(soma_explained_variance_percent, '%'))
    print('soma RMSE = %.3f [mV]' %(soma_RMSE))
    print('soma MAE = %.3f [mV]' %(soma_MAE))
    print('--------------------------------------------------')
    
    evaluations_results_dict['AUC'] = AUC_score
    evaluations_results_dict['soma_explained_variance_percent'] = soma_explained_variance_percent
    evaluations_results_dict['soma_RMSE'] = soma_RMSE
    evaluations_results_dict['soma_MAE'] = soma_MAE
    
    evaluation_duration_min = (time.time() - evaluation_start_time) / 60
    print('finished evaluation. time took to evaluate results is %.2f minutes' %(evaluation_duration_min))
    print('----------------------------------------------------------------------------------------')
    
    return evaluations_results_dict


def filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat, desired_FP_list=[0.0025,0.0100],
                                    ignore_time_at_start_ms=500, num_spikes_per_sim=[0,24]):

    time_points_to_eval = np.arange(y_spikes_GT.shape[1]) >= ignore_time_at_start_ms
    simulations_to_eval = np.logical_and((y_spikes_GT.sum(axis=1) >= num_spikes_per_sim[0]),(y_spikes_GT.sum(axis=1) <= num_spikes_per_sim[1]))
    
    print('total amount of simualtions is %d' %(y_spikes_GT.shape[0]))
    print('percent of simulations kept = %.2f%s' %(100 * simulations_to_eval.mean(),'%'))
    
    y_spikes_GT_to_eval  = y_spikes_GT[simulations_to_eval,:][:,time_points_to_eval]
    y_spikes_hat_to_eval = y_spikes_hat[simulations_to_eval,:][:,time_points_to_eval]
    y_soma_GT_to_eval    = y_soma_GT[simulations_to_eval,:][:,time_points_to_eval]
    y_soma_hat_to_eval   = y_soma_hat[simulations_to_eval,:][:,time_points_to_eval]
    
    return exctract_key_results(y_spikes_GT_to_eval, y_spikes_hat_to_eval, y_soma_GT_to_eval, y_soma_hat_to_eval, desired_FP_list=desired_FP_list)


#%% evel scrip params

synapse_type = 'NMDA'
# synapse_type = 'AMPA'
# synapse_type = 'AMPA_SK'

if synapse_type == 'NMDA':
    train_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_train/'
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_test/'
    models_dir     = '/Reseach/Single_Neuron_InOut/models/NMDA/'
    results_dir    = '/Reseach/Single_Neuron_InOut/models/NMDA/eval_results/'
    
elif synapse_type == 'AMPA':
    train_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_train/'
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_test/'
    models_dir     = '/Reseach/Single_Neuron_InOut/models/AMPA/'
    results_dir    = '/Reseach/Single_Neuron_InOut/models/AMPA/eval_results/'
    
elif synapse_type == 'AMPA_SK':
    train_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_train/'
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_test/'
    models_dir     = '/Reseach/Single_Neuron_InOut/models/AMPA_SK/'
    results_dir    = '/Reseach/Single_Neuron_InOut/models/AMPA_SK/eval_results/'

print('-----------------------------------------------')
print('finding data')
print('-----------------------------------------------')

valid_files = glob.glob(valid_data_dir + '*_128_simulationRuns*_6_secDuration_*')
test_files  = glob.glob(test_data_dir  + '*_128_simulationRuns*_6_secDuration_*')

models_to_evalulate = glob.glob(models_dir + '*.h5')

# remove from models list all models that are already evaluated in a previous run
model_names_to_evaluate = [x.split('/')[-1].split('.')[0] for x in models_to_evalulate]
models_already_evaluated = glob.glob(results_dir + '*.pickle')
model_names_already_evaluated = [x.split('/')[-1].split('.')[0] for x in models_already_evaluated]
model_names_to_eval_short = list(set(model_names_to_evaluate).difference(set(model_names_already_evaluated)))
model_names_to_eval_full = [(models_dir + x + '.h5') for x in model_names_to_eval_short]
models_to_evalulate = model_names_to_eval_full

print('-----')
print(len(model_names_to_evaluate))
print(len(model_names_already_evaluated))
print(len(model_names_to_eval_full))
print('-----')

print('number of validation files is %d' %(len(valid_files)))
print('number of test files is %d' %(len(test_files)))
print('number of models to evaluate is %d' %(len(models_to_evalulate)))
print('-----------------------------------------------')

print('models that will be evaluated are:')
for k, curr_model_name in enumerate(models_to_evalulate):
    print('%d: %s' %(k + 1, curr_model_name))
print('-----------------------------------------------')

#%% load valid and test datasets

print('----------------------------------------------------------------------------------------')
print('loading testing files...')
test_file_loading_start_time = time.time()

v_threshold = -55

# load validation data
X_test, y_spike_test, y_soma_test = parse_multiple_sim_experiment_files(valid_files)
y_soma_test[y_soma_test > v_threshold] = v_threshold

test_file_loading_duration_min = (time.time() - test_file_loading_start_time) / 60
print('time took to load data is %.3f minutes' %(test_file_loading_duration_min))
print('----------------------------------------------------------------------------------------')

#%% loop through all models files, make prediction on valid set, evaluate perfomrance and store

for k, model_filename in enumerate(models_to_evalulate):

    print('------------------------------')
    print('starting evaluating model %d' %(k + 1))
    print('------------------------------')

    print('----------------------------------------------------------------------------------------')
    print('loading model "%s"' %(model_filename.split('/')[-1]))

    model_loading_start_time = time.time()

    temporal_conv_net = load_model(model_filename)
    temporal_conv_net.summary()
    
    input_window_size = temporal_conv_net.input_shape[1]

    # load pickle file
    model_metadata_filename = model_filename.split('.h5')[0] + '.pickle'
    model_metadata_dict = pickle.load(open(model_metadata_filename, "rb" ))
    
    architecture_dict = model_metadata_dict['architecture_dict']
    time_window_T = (np.array(architecture_dict['filter_sizes_per_layer']) - 1).sum() + 1
    overlap_size = min(max(time_window_T + 1, min(150, input_window_size - 50)), 250)

    print('overlap_size = %d' %(overlap_size))
    print('time_window_T = %d' %(time_window_T))

    model_loading_duration_min = (time.time() - model_loading_start_time) / 60
    print('time took to load model is %.3f minutes' %(model_loading_duration_min))
    print('----------------------------------------------------------------------------------------')


    # create spike predictions on test set
    print('----------------------------------------------------------------------------------------')
    print('predicting using model...')

    prediction_start_time = time.time()
    
    y_train_soma_bias = -67.7
    
    X_test_for_keras = np.transpose(X_test,axes=[2,1,0])
    y1_test_for_keras = y_spike_test.T[:,:,np.newaxis]
    y2_test_for_keras = y_soma_test.T[:,:,np.newaxis] - y_train_soma_bias
    
    y1_test_for_keras_hat = np.zeros(y1_test_for_keras.shape)
    y2_test_for_keras_hat = np.zeros(y2_test_for_keras.shape)
    
    num_test_splits = 2 + (X_test_for_keras.shape[1] - input_window_size) / (input_window_size - overlap_size)
    
    for k in range(num_test_splits):
        start_time_ind = k * (input_window_size - overlap_size)
        end_time_ind   = start_time_ind + input_window_size
        
        curr_X_test_for_keras = X_test_for_keras[:,start_time_ind:end_time_ind,:]
        
        if curr_X_test_for_keras.shape[1] < input_window_size:
            padding_size = input_window_size - curr_X_test_for_keras.shape[1]
            X_pad = np.zeros((curr_X_test_for_keras.shape[0],padding_size,curr_X_test_for_keras.shape[2]))
            curr_X_test_for_keras = np.hstack((curr_X_test_for_keras,X_pad))
            
        curr_y1_test_for_keras, curr_y2_test_for_keras, _ = temporal_conv_net.predict(curr_X_test_for_keras)
    
        if k == 0:
            y1_test_for_keras_hat[:,:end_time_ind,:] = curr_y1_test_for_keras
            y2_test_for_keras_hat[:,:end_time_ind,:] = curr_y2_test_for_keras
        elif k == (num_test_splits - 1):
            t0 = start_time_ind + overlap_size
            duration_to_fill = y1_test_for_keras_hat.shape[1] - t0
            y1_test_for_keras_hat[:,t0:,:] = curr_y1_test_for_keras[:,overlap_size:(overlap_size + duration_to_fill),:]
            y2_test_for_keras_hat[:,t0:,:] = curr_y2_test_for_keras[:,overlap_size:(overlap_size + duration_to_fill),:]
        else:
            t0 = start_time_ind + overlap_size
            y1_test_for_keras_hat[:,t0:end_time_ind,:] = curr_y1_test_for_keras[:,overlap_size:,:]
            y2_test_for_keras_hat[:,t0:end_time_ind,:] = curr_y2_test_for_keras[:,overlap_size:,:]
    
    # zero score the prediction and align it with the actual test
    s_dst = y2_test_for_keras.std()
    m_dst = y2_test_for_keras.mean()
    
    s_src = y2_test_for_keras_hat.std()
    m_src = y2_test_for_keras_hat.mean()
    
    y2_test_for_keras_hat = (y2_test_for_keras_hat - m_src) / s_src
    y2_test_for_keras_hat = s_dst * y2_test_for_keras_hat + m_dst
    
    y_test = y_spike_test
    y_test_hat = y1_test_for_keras_hat[:,:,0].T
    
    # convert to simple (num_sims X num_time_points) format
    y_spikes_GT  = y_test.T
    y_spikes_hat = y_test_hat.T
    y_soma_GT    = y2_test_for_keras[:,:,0]
    y_soma_hat   = y2_test_for_keras_hat[:,:,0]
    
    prediction_duration_min = (time.time() - prediction_start_time) / 60
    print('finished prediction. time took to predict is %.2f minutes' %(prediction_duration_min))
    print('----------------------------------------------------------------------------------------')
    

    # evaluate the model and save the results
    print('----------------------------------------------------------------------------------------')
    print('calculating and saving key results...')

    saving_start_time = time.time()

    desired_FP_list = [0.0001, 0.0005, 0.0010, 0.0015, 0.0020, 0.0025, 0.0050, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.1000]
    evaluations_results_dict = {}

    # (1) we ignore the first 500 ms so that the simulation will "settle" and forget about any initial conditions
    # (2) we control for the number of spikes per simulation in order to make proper comparisons for different biophysical models (AMPA,NMDA,AMPA_SK, etc.)
    # this is due to the fact the the number of output spikes greatley changes the results and it's important to keep a tight control on it

    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,18]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)

    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [1,24]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)

    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,24]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)

    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,30]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)

    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,90]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)
    
    model_metadata_dict['evaluations_results_dict'] = evaluations_results_dict
    metadata_evaluation_filename = results_dir + model_metadata_filename.split('/')[-1]
    print('saving:   "%s"' %(metadata_evaluation_filename))
    pickle.dump(model_metadata_dict, open(metadata_evaluation_filename, "wb"), protocol=2)
    
    saving_duration_min = (time.time() - saving_start_time) / 60
    print('time took to evaluate and save results is %.3f minutes' %(saving_duration_min))
    print('----------------------------------------------------------------------------------------')
    
#%%

print('finihsed evaluation script')

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/CaDynamics_E2.mod:
==============================================
: Dynamics that track inside calcium concentration
: modified from Destexhe et al. 1994

NEURON	{
	SUFFIX CaDynamics_E2
	USEION ca READ ica WRITE cai
	RANGE decay, gamma, minCai, depth
}

UNITS	{
	(mV) = (millivolt)
	(mA) = (milliamp)
	FARADAY = (faraday) (coulombs)
	(molar) = (1/liter)
	(mM) = (millimolar)
	(um)	= (micron)
}

PARAMETER	{
	gamma = 0.05 : percent of free calcium (not buffered)
	decay = 80 (ms) : rate of removal of calcium
	depth = 0.1 (um) : depth of shell
	minCai = 1e-4 (mM)
}

ASSIGNED	{ica (mA/cm2)}

STATE	{
	cai (mM)
	}

BREAKPOINT	{ SOLVE states METHOD cnexp }

DERIVATIVE states	{
	cai' = -(10000)*(ica*gamma/(2*FARADAY*depth)) - (cai - minCai)/decay
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/Ca_HVA.mod:
=======================================
:Comment :
:Reference : :		Reuveni, Friedman, Amitai, and Gutnick, J.Neurosci. 1993

NEURON	{
	SUFFIX Ca_HVA
	USEION ca READ eca WRITE ica
	RANGE gCa_HVAbar, gCa_HVA, ica 
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gCa_HVAbar = 0.00001 (S/cm2) 
}

ASSIGNED	{
	v	(mV)
	eca	(mV)
	ica	(mA/cm2)
	gCa_HVA	(S/cm2)
	mInf
	mTau
	mAlpha
	mBeta
	hInf
	hTau
	hAlpha
	hBeta
}

STATE	{ 
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gCa_HVA = gCa_HVAbar*m*m*h
	ica = gCa_HVA*(v-eca)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
	UNITSOFF
        if((v == -27) ){        
            v = v+0.0001
        }
		mAlpha =  (0.055*(-27-v))/(exp((-27-v)/3.8) - 1)        
		mBeta  =  (0.94*exp((-75-v)/17))
		mInf = mAlpha/(mAlpha + mBeta)
		mTau = 1/(mAlpha + mBeta)
		hAlpha =  (0.000457*exp((-13-v)/50))
		hBeta  =  (0.0065/(exp((-v-15)/28)+1))
		hInf = hAlpha/(hAlpha + hBeta)
		hTau = 1/(hAlpha + hBeta)
	UNITSON
}

================================================================================
================================================================================
L5PC_NEURON_simulation/L5PCtemplate_2.hoc:
==========================================
// Author: Etay Hay, 2011
//    Models of Neocortical Layer 5b Pyramidal Cells Capturing a Wide Range of
//    Dendritic and Perisomatic Active Properties
//    (Hay et al., PLoS Computational Biology, 2011) 
//
// Template for models of L5 Pyramidal Cell

begintemplate L5PCtemplate
  public init
  public locateSites, getLongestBranch
  public soma, dend, apic, axon, getAbsSecIndex
  public all, somatic, apical, axonal, basal, nSecSoma, nSecApical, nSecBasal, nSecAxonal, nSecAll, nSecAxonalOrig, SecSyn, distribute_channels
  objref SecSyn, this
  objref all, somatic, apical, axonal, basal
  strdef tstr

//$s1 - morphology file name
proc init() {localobj nl,import
	all = new SectionList()
	somatic = new SectionList()
	basal = new SectionList()
	apical = new SectionList()
	axonal = new SectionList()
	forall delete_section()

  nl = new Import3d_Neurolucida3()
  nl.quiet = 1
  nl.input($s1)
  import = new Import3d_GUI(nl, 0)
  import.instantiate(this)
  geom_nseg()
  biophys()
	forsec this.all {
		if(diam == 0){
	    diam =  1
	    printf("Error : Morphology problem with section [%s] 0 diam \n", secname())
		}
  }
}

create soma[1], dend[1], apic[1], axon[1]

proc geom() {
}

proc geom_nseg() {local nSec, L1, L2, D1, D2, nSeg1, nSeg2
  soma area(.5) // make sure diam reflects 3d points
  nSec = 0
  forsec all {
    nseg = 1 + 2*int(L/40)
    nSec = nSec + 1
  }

  nSecAll = nSec
  nSec = 0
  forsec somatic { nSec = nSec + 1}
  nSecSoma	= 	nSec
  nSec = 0
  forsec apical { nSec = nSec + 1}
  nSecApical= 	nSec
  nSec = 0
  forsec basal { nSec = nSec + 1}
  nSecBasal	= 	nSec
  nSec = 0
  forsec axonal { nSec = nSec + 1}
  nSecAxonalOrig = nSecAxonal	= 	nSec
}

proc biophys() {localobj bp
	delete_axon()
	area(0.5)
	distance()
	access soma

  bp = new L5PCbiophys()
  bp.biophys(this)
}

// deleting axon, keeping only first 60 micrometers
proc delete_axon(){
    forsec axonal{delete_section()}
    create axon[2]
    access axon[0]{
      L= 30
      diam = 1
      nseg = 1+2*int(L/40)
      all.append()
      axonal.append()
    }
    access axon[1]{
      L= 30
      diam = 1
      nseg = 1+2*int(L/40)
      all.append()
      axonal.append()
    }

  nSecAxonal = 2
  connect axon(0), soma(0.5)
  connect axon[1](0), axon[0](1) 
  access soma
}

proc distribute_channels()	{local dist,val,base,maxLength
	base = $8
	soma distance()
	maxLength = getLongestBranch($s1)
	print maxLength*0.65
	forsec $s1		{
		if(0==strcmp($s2,"Ra")){
			Ra = $8
		} else {
			for(x) {
				if ($3==3) {
					dist = distance(x)
				} else {
					dist = distance(x)/maxLength
				}
				//"apic","gIhbar_Ih",2,-0.8696,3.6161,0.0,2.0870,0.00010000000
				val = calculate_distribution($3,dist,$4,$5,$6,$7,$8)
				//print dist, val
				sprint(tstr,"%s(%-5.10f) = %-5.10f",$s2,x,val)
				execute(tstr)
			}
		}
	}
}

// $1 is the distribution type:
//     0 linear, 1 sigmoid, 2 exponential
//     3 step for absolute distance (in microns)
//	   4 exponential and then constant
func calculate_distribution()	{local value
	if ($1==0)	{value = $3 + $2*$4}
	if ($1==1) {value = $3 + ($4/(1+exp(($2-$5)/$6)))}
  	if ($1==2) {value = $3 + $6*exp($4*($2-$5))}
	if ($1==3) {
		if (($2 > $5) && ($2 < $6)) {
			value = $3
		} else {
			value = $4
		}
	}
	threshold=0.65
	if ($1==4) {
		if ($2 > threshold) {
			value = $3 + $6*exp($4*(threshold-$5))
		} else {
			value = $3 + $6*exp($4*($2-$5))
		}
	}
	value = value*$7
	return value
}

// $s1 section
func getLongestBranch(){local maxL,d localobj distallist,sref
    sprint(tstr,"%s distance()",$s1)
    execute(tstr,this)    
    
  	if(0==strcmp($s1,"axon")){
      sprint(tstr,"%s[0] distance(1)",$s1)
      execute(tstr,this)    
  	}

		maxL = 0
		d = 0
		distallist = new SectionList()
		forsec $s1 {
			sref = new SectionRef()
			if (sref.nchild==0) distallist.append()
		}
		forsec distallist{
			d = distance(1)
			if(maxL<d) maxL = d
		}
		// for the soma case
		if (maxL == 0) {
      $s1 {
        maxL = L
      }
    }
		return maxL
	}

// $s1 section
// $2 distance x in micrometers
// return list of [1,2] vectors  - of the appropriate section and the location in each vector
obfunc locateSites() {local maxL,site,d0,d1,siteX,i localobj vv,ll
	ll = new List()

  sprint(tstr,"%s distance()",$s1)
  execute(tstr,this)    
    
	if(0==strcmp($s1,"axon")){
    sprint(tstr,"%s[0] distance(1)",$s1)
    execute(tstr,this)    
	}

	maxL = getLongestBranch($s1)
	site = $2
	i = 0
	forsec $s1 {
    if (distance(0) < distance(1)) {
  		d0 = distance(0)
  		d1 = distance(1)
  	} else {
  		d1 = distance(0)
  		d0 = distance(1)
  	}

    if (site <= d1 && site >= d0) {
      siteX = (site-d0)/(d1-d0)
      secNum = i
      vv = new Vector()
      ll.append(vv.append(secNum,siteX))
		}
		i = i+1
	}
  return ll
}

func getAbsSecIndex(){ local nAbsInd, index  localobj str,strObj
    strObj  =  new StringFunctions()
    str     =  new String()
    nAbsInd = 0
    index   = 0
    if(strObj.substr($s1, "soma") > 0) {
        strObj.tail($s1, "soma", str.s)
        if(sscanf(str.s, "%*c%d", &index) < 0) {
            index = 0
        }
        nAbsInd = index
    }else if (strObj.substr($s1, "axon") >0) {
        strObj.tail($s1, "axon", str.s)
        if(sscanf(str.s, "%*c%d", &index) < 0) {
            index = 0
        }
        nAbsInd = nSecSoma + index
    }else if (strObj.substr($s1, "dend") >0) {
        strObj.tail($s1, "dend", str.s)
        if(sscanf(str.s, "%*c%d", &index) < 0) {
            index = 0
        }
        nAbsInd = nSecSoma + nSecAxonalOrig + index
    }else if (strObj.substr($s1, "apic") > 0) {
        strObj.tail($s1, "apic", str.s)
        if(sscanf(str.s, "%*c%d", &index) < 0) {
            index = 0
        }
        nAbsInd = nSecSoma + nSecAxonalOrig + nSecBasal + index
    }
    return nAbsInd
}


endtemplate L5PCtemplate
================================================================================
================================================================================
L5PC_NEURON_simulation/init.hoc:
================================
// init.hoc created by editing with ModelDB's accession number 3343 rundemo.hoc

chdir("simulationcode")

//----------------------------------------------------------------------------
//  define a panel to run the different demos
//----------------------------------------------------------------------------

proc make_demopanel() {
	xpanel("Simulations of Neocortical Layer 5b Pyramidal Cells. Hay et al. 2011")
	xlabel("Figure 4 (constrained both for BAC and current step firing)")
	xbutton("Fig 4A. (BAC_firing.hoc)","restart(\"BAC_firing\")")
	xbutton("Fig 4B. Upper trace. (Step_current_firing.hoc)","restart(\"Step_current_firing\")")
	xbutton("Fig 5A. (critical_frequency.hoc)","restart(\"critical_frequency\")")
	xpanel()
}

make_demopanel()

ismenu=0

load_file("nrngui.hoc")

strdef tstr

pwmcnt = PWManager[0].count  // the initial GUIs should not be dismissed
ismenu=0		// determines if electrode is defined

proc restart() { local i
	forall delete_section()

	for i=0, n_graph_lists-1 {
		graphList[i].remove_all()
	}
	flush_list.remove_all()
	fast_flush_list.remove_all()
	doNotify()
	for (i= PWManager[0].count-1; i >= pwmcnt; i -= 1) {
		PWManager[0].close(i)
		doNotify()
	}
	stoprun = 0
	cvode_active(0)

	ismenu=0
	
	sprint(tstr, "%s.hoc", $s1)
	load_file(1, tstr)
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/K_Pst.mod:
======================================
:Comment : The persistent component of the K current
:Reference : :		Voltage-gated K+ channels in layer 5 neocortical pyramidal neurones from young rats:subtypes and gradients,Korngreen and Sakmann, J. Physiology, 2000
:Comment : shifted -10 mv to correct for junction potential
:Comment: corrected rates using q10 = 2.3, target temperature 34, orginal 21


NEURON	{
	SUFFIX K_Pst
	USEION k READ ek WRITE ik
	RANGE gK_Pstbar, gK_Pst, ik
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gK_Pstbar = 0.00001 (S/cm2)
}

ASSIGNED	{
	v	(mV)
	ek	(mV)
	ik	(mA/cm2)
	gK_Pst	(S/cm2)
	mInf
	mTau
	hInf
	hTau
}

STATE	{
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gK_Pst = gK_Pstbar*m*m*h
	ik = gK_Pst*(v-ek)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)
	UNITSOFF
		v = v + 10
		mInf =  (1/(1 + exp(-(v+1)/12)))
        if(v<-50){
		    mTau =  (1.25+175.03*exp(-v * -0.026))/qt
        }else{
            mTau = ((1.25+13*exp(-v*0.026)))/qt
        }
		hInf =  1/(1 + exp(-(v+54)/-11))
		hTau =  (360+(1010+24*(v+55))*exp(-((v+75)/48)^2))/qt
		v = v - 10
	UNITSON
}

================================================================================
================================================================================
evaluate_CNN_test.py:
=====================
import numpy as np
import glob
import time
import cPickle as pickle
from keras.models import Model, load_model
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import mean_absolute_error as MAE
from sklearn.metrics import explained_variance_score
from sklearn.metrics import roc_curve, auc

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% helper functions


def dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):
    
    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')
    for row_ind in row_inds_spike_times_map.keys():
        for spike_time in row_inds_spike_times_map[row_ind]:
            bin_spikes_matrix[row_ind,spike_time] = 1.0
    
    return bin_spikes_matrix


def parse_sim_experiment_file(sim_experiment_file):
    
    print('-----------------------------------------------------------------')
    print("loading file: '" + sim_experiment_file.split("\\")[-1] + "'")
    loading_start_time = time.time()
    experiment_dict = pickle.load(open(sim_experiment_file, "rb" ))
    
    # gather params
    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
    num_segments    = len(experiment_dict['Params']['allSegmentsType'])
    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000
    num_ex_synapses  = num_segments
    num_inh_synapses = num_segments
    num_synapses = num_ex_synapses + num_inh_synapses
    
    # collect X, y_spike, y_soma
    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')
    y_spike = np.zeros((sim_duration_ms,num_simulations))
    y_soma  = np.zeros((sim_duration_ms,num_simulations))
    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)
        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)
        X[:,:,k] = np.vstack((X_ex,X_inh))
        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)
        y_spike[spike_times,k] = 1.0
        y_soma[:,k] = sim_dict['somaVoltageLowRes']

    loading_duration_sec = time.time() - loading_start_time
    print('loading took %.3f seconds' %(loading_duration_sec))
    print('-----------------------------------------------------------------')

    return X, y_spike, y_soma


def parse_multiple_sim_experiment_files(sim_experiment_files):
    
    for k, sim_experiment_file in enumerate(sim_experiment_files):
        X_curr, y_spike_curr, y_soma_curr = parse_sim_experiment_file(sim_experiment_file)
        
        if k == 0:
            X       = X_curr
            y_spike = y_spike_curr
            y_soma  = y_soma_curr
        else:
            X       = np.dstack((X,X_curr))
            y_spike = np.hstack((y_spike,y_spike_curr))
            y_soma  = np.hstack((y_soma,y_soma_curr))

    return X, y_spike, y_soma


def calc_AUC_at_desired_FP(y_test, y_test_hat, desired_false_positive_rate=0.01):
    fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())

    linear_spaced_FPR = np.linspace(0,1,num=20000)
    linear_spaced_TPR = np.interp(linear_spaced_FPR, fpr, tpr)
    
    desired_fp_ind = min(max(1, np.argmin(abs(linear_spaced_FPR - desired_false_positive_rate))), linear_spaced_TPR.shape[0] - 1)
    
    return linear_spaced_TPR[:desired_fp_ind].mean()


def calc_TP_at_desired_FP(y_test, y_test_hat, desired_false_positive_rate=0.0025):
    fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())
    
    desired_fp_ind = np.argmin(abs(fpr - desired_false_positive_rate))
    if desired_fp_ind == 0:
        desired_fp_ind = 1

    return tpr[desired_fp_ind]


def exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat, desired_FP_list=[0.0025,0.0100]):
    
    # evaluate the model and save the results
    # evaluation_start_time = time.time()
    
    # store results in the hyper param dict and return it
    evaluations_results_dict = {}
    
    for desired_FP in desired_FP_list:
        TP_at_desired_FP  = calc_TP_at_desired_FP(y_spikes_GT, y_spikes_hat, desired_false_positive_rate=desired_FP)
        AUC_at_desired_FP = calc_AUC_at_desired_FP(y_spikes_GT, y_spikes_hat, desired_false_positive_rate=desired_FP)
        TP_key_string = 'TP @ %.4f FP' %(desired_FP)
        evaluations_results_dict[TP_key_string] = TP_at_desired_FP
    
        AUC_key_string = 'AUC @ %.4f FP' %(desired_FP)
        evaluations_results_dict[AUC_key_string] = AUC_at_desired_FP
    
    # print('--------------------------------------------------')
    fpr, tpr, thresholds = roc_curve(y_spikes_GT.ravel(), y_spikes_hat.ravel())
    AUC_score = auc(fpr, tpr)
    # print('AUC = %.4f' %(AUC_score))
    
    soma_explained_variance_percent = 100.0 * explained_variance_score(y_soma_GT.ravel(),y_soma_hat.ravel())
    soma_RMSE = np.sqrt(MSE(y_soma_GT.ravel(),y_soma_hat.ravel()))
    soma_MAE  = MAE(y_soma_GT.ravel(),y_soma_hat.ravel())
    
    # print('soma explained variance percent = %.2f%s' %(soma_explained_variance_percent, '%'))
    # print('--------------------------------------------------')
    
    evaluations_results_dict['AUC'] = AUC_score
    evaluations_results_dict['soma_explained_variance_percent'] = soma_explained_variance_percent
    evaluations_results_dict['soma_RMSE'] = soma_RMSE
    evaluations_results_dict['soma_MAE'] = soma_MAE
    
    # evaluation_duration_min = (time.time() - evaluation_start_time)/60
    # print('finished evaluation. time took to evaluate results is %.2f minutes' %(evaluation_duration_min))
    # print('----------------------------------------------------------------------------------------------------')

    return evaluations_results_dict


def filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat, desired_FP_list=[0.0025,0.0100],
                                    ignore_time_at_start_ms=500, num_spikes_per_sim=[0,24]):

    time_points_to_eval = np.arange(y_spikes_GT.shape[1]) >= ignore_time_at_start_ms
    simulations_to_eval = np.logical_and((y_spikes_GT.sum(axis=1) >= num_spikes_per_sim[0]),(y_spikes_GT.sum(axis=1) <= num_spikes_per_sim[1]))
    
    print('----------------------------------------------------------------------------------------------------')
    print('total amount of simualtions is %d (percent of simulations kept = %.2f%s)' %(y_spikes_GT.shape[0], 100 * simulations_to_eval.mean(),'%'))

    y_spikes_GT_to_eval  = y_spikes_GT[simulations_to_eval,:][:,time_points_to_eval]
    y_spikes_hat_to_eval = y_spikes_hat[simulations_to_eval,:][:,time_points_to_eval]
    y_soma_GT_to_eval    = y_soma_GT[simulations_to_eval,:][:,time_points_to_eval]
    y_soma_hat_to_eval   = y_soma_hat[simulations_to_eval,:][:,time_points_to_eval]
    
    return exctract_key_results(y_spikes_GT_to_eval, y_spikes_hat_to_eval, y_soma_GT_to_eval, y_soma_hat_to_eval, desired_FP_list=desired_FP_list)


#%% evel scrip params

synapse_type = 'NMDA'
#synapse_type = 'AMPA'
# synapse_type = 'AMPA_SK'

best_models_dir = '/Reseach/Single_Neuron_InOut/models/best_models/'

if synapse_type == 'NMDA':
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_NMDA_test/'
    
    models_to_evalulate = glob.glob(best_models_dir + '/*/NMDA*_model.h5')
    
elif synapse_type == 'AMPA':
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_test/'
    
    models_to_evalulate = glob.glob(best_models_dir + '/*/AMPA*_model.h5')
    models_to_ignore    = glob.glob(best_models_dir + '/*/AMPA_SK*_model.h5')
    models_to_evalulate = list(set(models_to_evalulate).difference(set(models_to_ignore)))
    
elif synapse_type == 'AMPA_SK':
    valid_data_dir = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_valid/'
    test_data_dir  = '/Reseach/Single_Neuron_InOut/data/L5PC_AMPA_SK_test/'

    models_to_evalulate = glob.glob(best_models_dir + '/*/AMPA_SK*_model.h5')

print('-----------------------------------------------')
print('finding data')
print('-----------------------------------------------')

valid_files = glob.glob(valid_data_dir + '*_128_simulationRuns*_6_secDuration_*')
test_files  = glob.glob(test_data_dir  + '*_128_simulationRuns*_6_secDuration_*')

print('number of validation files is %d' %(len(valid_files)))
print('number of test files is %d' %(len(test_files)))
print('number of models to evaluate is %d' %(len(models_to_evalulate)))
print('-----------------------------------------------')

print('models that will be evaluated are:')
for k, curr_model_name in enumerate(models_to_evalulate):
    print('%d: %s' %(k + 1, curr_model_name))
print('-----------------------------------------------')

#%% load valid and test datasets

print('----------------------------------------------------------------------------------------')
print('loading testing files...')
test_file_loading_start_time = time.time()

v_threshold = -55

# load test data
X_test , y_spike_test , y_soma_test  = parse_multiple_sim_experiment_files(test_files)
y_soma_test[y_soma_test > v_threshold] = v_threshold

test_file_loading_duration_min = (time.time() - test_file_loading_start_time) / 60
print('time took to load data is %.3f minutes' %(test_file_loading_duration_min))
print('----------------------------------------------------------------------------------------')

#%% loop through all models files, make prediction on valid set, evaluate perfomrance and store

for k, model_filename in enumerate(models_to_evalulate):

    print('------------------------------')
    print('starting evaluating model %d' %(k + 1))
    print('------------------------------')

    print('----------------------------------------------------------------------------------------')
    print('loading model "%s"' %(model_filename.split('/')[-1]))

    model_loading_start_time = time.time()

    temporal_conv_net = load_model(model_filename)
    temporal_conv_net.summary()
    
    input_window_size = temporal_conv_net.input_shape[1]

    # load pickle file
    model_metadata_filename = model_filename.split('_model.h5')[0] + '_training.pickle'
    model_metadata_dict = pickle.load(open(model_metadata_filename, "rb" ))
    
    architecture_dict = model_metadata_dict['architecture_dict']
    time_window_T = (np.array(architecture_dict['filter_sizes_per_layer']) - 1).sum() + 1
    overlap_size = min(max(time_window_T + 1, min(150, input_window_size - 50)), 250)

    print('overlap_size = %d' %(overlap_size))
    print('time_window_T = %d' %(time_window_T))

    model_loading_duration_min = (time.time() - model_loading_start_time) / 60
    print('time took to load model is %.3f minutes' %(model_loading_duration_min))
    print('----------------------------------------------------------------------------------------')


    # create spike predictions on test set
    print('----------------------------------------------------------------------------------------')
    print('predicting using model...')

    prediction_start_time = time.time()
    
    y_train_soma_bias = -67.7
    
    X_test_for_keras = np.transpose(X_test,axes=[2,1,0])
    y1_test_for_keras = y_spike_test.T[:,:,np.newaxis]
    y2_test_for_keras = y_soma_test.T[:,:,np.newaxis] - y_train_soma_bias
    
    y1_test_for_keras_hat = np.zeros(y1_test_for_keras.shape)
    y2_test_for_keras_hat = np.zeros(y2_test_for_keras.shape)
    
    num_test_splits = 2 + (X_test_for_keras.shape[1] - input_window_size) / (input_window_size - overlap_size)
    
    for k in range(num_test_splits):
        start_time_ind = k * (input_window_size - overlap_size)
        end_time_ind   = start_time_ind + input_window_size
        
        curr_X_test_for_keras = X_test_for_keras[:,start_time_ind:end_time_ind,:]
        
        if curr_X_test_for_keras.shape[1] < input_window_size:
            padding_size = input_window_size - curr_X_test_for_keras.shape[1]
            X_pad = np.zeros((curr_X_test_for_keras.shape[0],padding_size,curr_X_test_for_keras.shape[2]))
            curr_X_test_for_keras = np.hstack((curr_X_test_for_keras,X_pad))
            
        curr_y1_test_for_keras, curr_y2_test_for_keras, _ = temporal_conv_net.predict(curr_X_test_for_keras)
    
        if k == 0:
            y1_test_for_keras_hat[:,:end_time_ind,:] = curr_y1_test_for_keras
            y2_test_for_keras_hat[:,:end_time_ind,:] = curr_y2_test_for_keras
        elif k == (num_test_splits - 1):
            t0 = start_time_ind + overlap_size
            duration_to_fill = y1_test_for_keras_hat.shape[1] - t0
            y1_test_for_keras_hat[:,t0:,:] = curr_y1_test_for_keras[:,overlap_size:(overlap_size + duration_to_fill),:]
            y2_test_for_keras_hat[:,t0:,:] = curr_y2_test_for_keras[:,overlap_size:(overlap_size + duration_to_fill),:]
        else:
            t0 = start_time_ind + overlap_size
            y1_test_for_keras_hat[:,t0:end_time_ind,:] = curr_y1_test_for_keras[:,overlap_size:,:]
            y2_test_for_keras_hat[:,t0:end_time_ind,:] = curr_y2_test_for_keras[:,overlap_size:,:]
    
    # zero score the prediction and align it with the actual test
    s_dst = y2_test_for_keras.std()
    m_dst = y2_test_for_keras.mean()
    
    s_src = y2_test_for_keras_hat.std()
    m_src = y2_test_for_keras_hat.mean()
    
    y2_test_for_keras_hat = (y2_test_for_keras_hat - m_src) / s_src
    y2_test_for_keras_hat = s_dst * y2_test_for_keras_hat + m_dst
    
    y_test = y_spike_test
    y_test_hat = y1_test_for_keras_hat[:,:,0].T
    
    # convert to simple (num_sims X num_time_points) format
    y_spikes_GT  = y_test.T
    y_spikes_hat = y_test_hat.T
    y_soma_GT    = y2_test_for_keras[:,:,0]
    y_soma_hat   = y2_test_for_keras_hat[:,:,0]
    
    prediction_duration_min = (time.time() - prediction_start_time) / 60
    print('finished prediction. time took to predict is %.2f minutes' %(prediction_duration_min))
    print('----------------------------------------------------------------------------------------')
    

    total_num_samples = y_spikes_GT.shape[0]

    # evaluate the model and save the results on the full dataset
    print('----------------------------------------------------------------------------------------------------------------')
    print('----------------------------------------------------------------------------------------------------------------')
    print('----------------------------------------------------------------------------------------------------------------')
    print('calculating and saving key results for entire data...')

    saving_start_time = time.time()

    desired_FP_list = [0.0001, 0.0005, 0.0010, 0.0015, 0.0020, 0.0025, 0.0050, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.1000]
    evaluations_results_dict = {}
    
    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,18]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    print('"%s":' %(filter_string))
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)
    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [1,24]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    print('"%s":' %(filter_string))
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)
    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,24]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    print('"%s": (<|========|>)' %(filter_string))
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)
    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,30]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    print('"%s":' %(filter_string))
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)
    ignore_time_at_start_ms = 500
    num_spikes_per_sim = [0,90]
    filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
    print('"%s":' %(filter_string))
    evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                              desired_FP_list=desired_FP_list,
                                                                              ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                              num_spikes_per_sim=num_spikes_per_sim)
    
    model_metadata_dict['evaluations_results_dict'] = evaluations_results_dict
    
    # create 50 random subsamples of 50% of the dataset for estimating variance due to random training sets
    print('-----------------------------------------------------------------------')
    print('calculating results for different subsample subsets...')
    print('-----------------------------------------------------------------------')
    num_random_subsamples = 12
    num_simulations_per_subsample = int(0.67 * total_num_samples)
    list_of_eval_results_dict = []
    for subsample_ind in range(num_random_subsamples):
        print('----------------------')
        print('subset %d:' %(subsample_ind))
        print('----------------------')
        samples_subset = np.random.choice(total_num_samples, size=num_simulations_per_subsample, replace=False)
        
        y_spikes_GT_sub  = y_spikes_GT[samples_subset]
        y_spikes_hat_sub = y_spikes_hat[samples_subset]
        y_soma_GT_sub    = y_soma_GT[samples_subset]
        y_soma_hat_sub   = y_soma_hat[samples_subset]
    
        eval_subset_results_dict = {}
        
        ignore_time_at_start_ms = 500
        num_spikes_per_sim = [0,18]
        filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
        print('"%s":' %(filter_string))
        eval_subset_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT_sub, y_spikes_hat_sub, y_soma_GT_sub, y_soma_hat_sub,
                                                                                  desired_FP_list=desired_FP_list,
                                                                                  ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                                  num_spikes_per_sim=num_spikes_per_sim)
        ignore_time_at_start_ms = 500
        num_spikes_per_sim = [1,24]
        filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
        print('"%s":' %(filter_string))
        eval_subset_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT_sub, y_spikes_hat_sub, y_soma_GT_sub, y_soma_hat_sub,
                                                                                  desired_FP_list=desired_FP_list,
                                                                                  ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                                  num_spikes_per_sim=num_spikes_per_sim)
        ignore_time_at_start_ms = 500
        num_spikes_per_sim = [0,24]
        filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
        print('"%s": (<|========|>)' %(filter_string))
        eval_subset_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT_sub, y_spikes_hat_sub, y_soma_GT_sub, y_soma_hat_sub,
                                                                                  desired_FP_list=desired_FP_list,
                                                                                  ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                                  num_spikes_per_sim=num_spikes_per_sim)
        ignore_time_at_start_ms = 500
        num_spikes_per_sim = [0,30]
        filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
        print('"%s":' %(filter_string))
        eval_subset_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT_sub, y_spikes_hat_sub, y_soma_GT_sub, y_soma_hat_sub,
                                                                                  desired_FP_list=desired_FP_list,
                                                                                  ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                                  num_spikes_per_sim=num_spikes_per_sim)
        ignore_time_at_start_ms = 500
        num_spikes_per_sim = [0,90]
        filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
        print('"%s":' %(filter_string))
        eval_subset_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT_sub, y_spikes_hat_sub, y_soma_GT_sub, y_soma_hat_sub,
                                                                                  desired_FP_list=desired_FP_list,
                                                                                  ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                                  num_spikes_per_sim=num_spikes_per_sim)
        
        list_of_eval_results_dict.append(eval_subset_results_dict)
        print('----------------------')
    
    model_metadata_dict['list_of_subset_eval_results_dict'] = list_of_eval_results_dict
    print('-----------------------------------------------------------------------')
    print('finished calculating results for different subsample subsets')
    print('-----------------------------------------------------------------------')

    metadata_evaluation_filename = model_filename.split('_model.h5')[0] + '_evaluation_test.pickle'
    print('saving:   "%s"' %(metadata_evaluation_filename))
    pickle.dump(model_metadata_dict, open(metadata_evaluation_filename, "wb"), protocol=2)
    
    saving_duration_min = (time.time() - saving_start_time) / 60
    print('time took to evaluate and save results is %.3f minutes' %(saving_duration_min))
    print('----------------------------------------------------------------------------------------------------------------')
    print('----------------------------------------------------------------------------------------------------------------')
    print('----------------------------------------------------------------------------------------------------------------')


#%%

print('finihsed evaluation script')

================================================================================
================================================================================
simulate_L5PC_and_create_dataset.py:
====================================
import os
import sys
import numpy as np
from scipy import signal
import cPickle as pickle
import time
import neuron
from neuron import h
from neuron import gui

# get or randomly generate random seed
try:
    randomSeed = int(sys.argv[1])
    print('random seed selected by user - %d' %(randomSeed))
except:
    randomSeed = np.random.randint(100000)
    print('randomly choose seed - %d' %(randomSeed))

np.random.seed(randomSeed)

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% define simulation params

# general simulation parameters
numSimulations = 128
totalSimDurationInSec = 6

# switch whether to store dendritic voltage traces (DVTs), which take up a lot of storage
collectAndSaveDVTs = True

# high res sampling of the voltage and nexus voltages
numSamplesPerMS_HighRes = 8

# synapse type
excitatorySynapseType = 'NMDA'    # supported options: {'AMPA','NMDA'}
# excitatorySynapseType = 'AMPA'    # supported options: {'AMPA','NMDA'}
inhibitorySynapseType = 'GABA_A'

# use active dendritic conductances switch
useActiveDendrites = True

# attenuation factor for the conductance of the SK channel
SKE2_mult_factor = 1.0
# SKE2_mult_factor = 0.1

# determine the voltage activation curve of the Ih current (HCN channel)
Ih_vshift = 0

# simulation duration
sim_duration_sec = totalSimDurationInSec
sim_duration_ms  = 1000 * sim_duration_sec

# define inst rate between change interval and smoothing sigma options
inst_rate_sampling_time_interval_options_ms   = [25,30,35,40,45,55,60,65,70,75,80,85,90,100,150,200,300,450]
temporal_inst_rate_smoothing_sigma_options_ms = [25,30,35,40,50,60,80,100,150,200,300,400,500,600]

inst_rate_sampling_time_interval_jitter_range   = 20
temporal_inst_rate_smoothing_sigma_jitter_range = 20

# number of spike ranges for the simulation

# AMPA with attenuated SK_E2 conductance
#num_bas_ex_spikes_per_100ms_range = [0,1900]
#num_bas_ex_inh_spike_diff_per_100ms_range = [-1500,300]
#num_apic_ex_spikes_per_100ms_range = [0,2000]
#num_apic_ex_inh_spike_diff_per_100ms_range = [-1500,300]

# AMPA
#num_bas_ex_spikes_per_100ms_range = [0,1900]
#num_bas_ex_inh_spike_diff_per_100ms_range = [-1650,150]
#num_apic_ex_spikes_per_100ms_range = [0,2000]
#num_apic_ex_inh_spike_diff_per_100ms_range = [-1650,150]

# NMDA
num_bas_ex_spikes_per_100ms_range = [0,800]
num_bas_ex_inh_spike_diff_per_100ms_range = [-600,200]
num_apic_ex_spikes_per_100ms_range = [0,800]
num_apic_ex_inh_spike_diff_per_100ms_range = [-600,200]

# "regularization" param for the segment lengths (mainly used to not divide by very small numbers)
min_seg_length_um = 10.0

# beaurrocracy
showPlots = False
resultsSavedIn_rootFolder = '/david.beniaguev/Reseach/Single_Neuron_InOut/ExperimentalData/'

useCvode = True
totalSimDurationInMS = 1000 * totalSimDurationInSec

#%% define some helper functions


def generate_input_spike_trains_for_simulation(sim_duration_ms, basal_seg_length_um, apical_seg_length_um, min_seg_length_um,
                                               num_bas_ex_spikes_per_100ms_range, num_apic_ex_spikes_per_100ms_range,
                                               num_bas_ex_inh_spike_diff_per_100ms_range, num_apic_ex_inh_spike_diff_per_100ms_range,
                                               inst_rate_sampling_time_interval_options_ms, temporal_inst_rate_smoothing_sigma_options_ms):
    
    # extract the number of basal and apical segments
    num_basal_segments  = len(basal_seg_length_um)
    num_apical_segments = len(apical_seg_length_um)
        
    # adjust segment lengths (with "min_seg_length_um")
    adjusted_basal_length_um  = min_seg_length_um + basal_seg_length_um
    adjusted_apical_length_um = min_seg_length_um + apical_seg_length_um
    
    # calc sum of seg length (to be used for normalization later on)
    total_adjusted_basal_tree_length_um  = adjusted_basal_length_um.sum()
    total_adjusted_apical_tree_length_um = adjusted_apical_length_um.sum()
    
    # randomly sample inst rate (with some uniform noise) smoothing sigma
    keep_inst_rate_const_for_ms = inst_rate_sampling_time_interval_options_ms[np.random.randint(len(inst_rate_sampling_time_interval_options_ms))]
    keep_inst_rate_const_for_ms += int(2 * inst_rate_sampling_time_interval_jitter_range * np.random.rand() - inst_rate_sampling_time_interval_jitter_range)
    
    # randomly sample smoothing sigma (with some uniform noise)
    temporal_inst_rate_smoothing_sigma = temporal_inst_rate_smoothing_sigma_options_ms[np.random.randint(len(temporal_inst_rate_smoothing_sigma_options_ms))]
    temporal_inst_rate_smoothing_sigma += int(2 * temporal_inst_rate_smoothing_sigma_jitter_range * np.random.rand() - temporal_inst_rate_smoothing_sigma_jitter_range)
    
    num_inst_rate_samples = int(np.ceil(float(sim_duration_ms) / keep_inst_rate_const_for_ms))
    
    # create the coarse inst rates with units of "total spikes per tree per 100 ms"
    num_bas_ex_spikes_per_100ms   = np.random.uniform(low=num_bas_ex_spikes_per_100ms_range[0], high=num_bas_ex_spikes_per_100ms_range[1], size=(1,num_inst_rate_samples))
    num_bas_inh_spikes_low_range  = np.maximum(0, num_bas_ex_spikes_per_100ms + num_bas_ex_inh_spike_diff_per_100ms_range[0])
    num_bas_inh_spikes_high_range = num_bas_ex_spikes_per_100ms + num_bas_ex_inh_spike_diff_per_100ms_range[1]
    num_bas_inh_spikes_per_100ms  = np.random.uniform(low=num_bas_inh_spikes_low_range, high=num_bas_inh_spikes_high_range, size=(1,num_inst_rate_samples))
    
    num_apic_ex_spikes_per_100ms   = np.random.uniform(low=num_apic_ex_spikes_per_100ms_range[0], high=num_apic_ex_spikes_per_100ms_range[1],size=(1,num_inst_rate_samples))
    num_apic_inh_spikes_low_range  = np.maximum(0, num_apic_ex_spikes_per_100ms + num_apic_ex_inh_spike_diff_per_100ms_range[0])
    num_apic_inh_spikes_high_range = num_apic_ex_spikes_per_100ms + num_apic_ex_inh_spike_diff_per_100ms_range[1]
    num_apic_inh_spikes_per_100ms  = np.random.uniform(low=num_apic_inh_spikes_low_range, high=num_apic_inh_spikes_high_range, size=(1,num_inst_rate_samples))
    
    # convert to units of "per_1um_per_1ms"
    ex_bas_spike_rate_per_1um_per_1ms   = num_bas_ex_spikes_per_100ms   / (total_adjusted_basal_tree_length_um  * 100.0)
    inh_bas_spike_rate_per_1um_per_1ms  = num_bas_inh_spikes_per_100ms  / (total_adjusted_basal_tree_length_um  * 100.0)
    ex_apic_spike_rate_per_1um_per_1ms  = num_apic_ex_spikes_per_100ms  / (total_adjusted_apical_tree_length_um * 100.0)
    inh_apic_spike_rate_per_1um_per_1ms = num_apic_inh_spikes_per_100ms / (total_adjusted_apical_tree_length_um * 100.0)
            
    # kron by space (uniform distribution across branches per tree)
    ex_bas_spike_rate_per_seg_per_1ms   = np.kron(ex_bas_spike_rate_per_1um_per_1ms  , np.ones((num_basal_segments,1)))
    inh_bas_spike_rate_per_seg_per_1ms  = np.kron(inh_bas_spike_rate_per_1um_per_1ms , np.ones((num_basal_segments,1)))
    ex_apic_spike_rate_per_seg_per_1ms  = np.kron(ex_apic_spike_rate_per_1um_per_1ms , np.ones((num_apical_segments,1)))
    inh_apic_spike_rate_per_seg_per_1ms = np.kron(inh_apic_spike_rate_per_1um_per_1ms, np.ones((num_apical_segments,1)))
        
    # vstack basal and apical
    ex_spike_rate_per_seg_per_1ms  = np.vstack((ex_bas_spike_rate_per_seg_per_1ms , ex_apic_spike_rate_per_seg_per_1ms))
    inh_spike_rate_per_seg_per_1ms = np.vstack((inh_bas_spike_rate_per_seg_per_1ms, inh_apic_spike_rate_per_seg_per_1ms))
    
    # add some spatial multiplicative randomness (that will be added to the sampling noise)
    ex_spike_rate_per_seg_per_1ms  = np.random.uniform(low=0.5, high=1.5, size=ex_spike_rate_per_seg_per_1ms.shape ) * ex_spike_rate_per_seg_per_1ms
    inh_spike_rate_per_seg_per_1ms = np.random.uniform(low=0.5, high=1.5, size=inh_spike_rate_per_seg_per_1ms.shape) * inh_spike_rate_per_seg_per_1ms
    
    # concatenate the adjusted length
    adjusted_length_um = np.hstack((adjusted_basal_length_um, adjusted_apical_length_um))
    
    # multiply each segment by it's length (now every segment will have firing rate proportional to it's length)
    ex_spike_rate_per_seg_per_1ms  = ex_spike_rate_per_seg_per_1ms  * np.tile(adjusted_length_um[:,np.newaxis], [1, ex_spike_rate_per_seg_per_1ms.shape[1]])
    inh_spike_rate_per_seg_per_1ms = inh_spike_rate_per_seg_per_1ms * np.tile(adjusted_length_um[:,np.newaxis], [1, inh_spike_rate_per_seg_per_1ms.shape[1]])
        
    # kron by time (crop if there are leftovers in the end) to fill up the time to 1ms time bins
    ex_spike_rate_per_seg_per_1ms  = np.kron(ex_spike_rate_per_seg_per_1ms , np.ones((1,keep_inst_rate_const_for_ms)))[:,:sim_duration_ms]
    inh_spike_rate_per_seg_per_1ms = np.kron(inh_spike_rate_per_seg_per_1ms, np.ones((1,keep_inst_rate_const_for_ms)))[:,:sim_duration_ms]
    
    # filter the inst rates according to smoothing sigma
    smoothing_window = signal.gaussian(1.0 + 7 * temporal_inst_rate_smoothing_sigma, std=temporal_inst_rate_smoothing_sigma)[np.newaxis,:]
    smoothing_window /= smoothing_window.sum()
    seg_inst_rate_ex_smoothed  = signal.convolve(ex_spike_rate_per_seg_per_1ms,  smoothing_window, mode='same')
    seg_inst_rate_inh_smoothed = signal.convolve(inh_spike_rate_per_seg_per_1ms, smoothing_window, mode='same')
    
    # sample the instantanous spike prob and then sample the actual spikes
    ex_inst_spike_prob = np.random.exponential(scale=seg_inst_rate_ex_smoothed)
    ex_spikes_bin      = np.random.rand(ex_inst_spike_prob.shape[0], ex_inst_spike_prob.shape[1]) < ex_inst_spike_prob
    
    inh_inst_spike_prob = np.random.exponential(scale=seg_inst_rate_inh_smoothed)
    inh_spikes_bin      = np.random.rand(inh_inst_spike_prob.shape[0], inh_inst_spike_prob.shape[1]) < inh_inst_spike_prob
    
    return ex_spikes_bin, inh_spikes_bin


def GetDirNameAndFileName(numOutputSpikes, randomSeed):
    # string to describe model name based on params

    cellType = 'L5PC'
    synapseTypes    = excitatorySynapseType + '_' + inhibitorySynapseType
    dendritesKind = 'activeDendrites'
    if not useActiveDendrites:
        dendritesKind = 'passiveDendrites'
    else:
        dendritesKind += '_Ih_vshift_%d_SKE2_mult_%d' %(Ih_vshift, 100 * SKE2_mult_factor)
        
    modelString = cellType + '__' + dendritesKind + '__' + synapseTypes
    dirToSaveIn = resultsSavedIn_rootFolder + modelString + '//'
    
    # string to describe input
    string1 = 'exBas_%d_%d_inhBasDiff_%d_%d' %(num_bas_ex_spikes_per_100ms_range[0],num_bas_ex_spikes_per_100ms_range[1],
                                               num_bas_ex_inh_spike_diff_per_100ms_range[0],num_bas_ex_inh_spike_diff_per_100ms_range[1])
    string2 = 'exApic_%d_%d_inhApicDiff_%d_%d' %(num_apic_ex_spikes_per_100ms_range[0],num_apic_ex_spikes_per_100ms_range[1],
                                                 num_apic_ex_inh_spike_diff_per_100ms_range[0],num_apic_ex_inh_spike_diff_per_100ms_range[1])
    inputString = string1 + '__' + string2
    
    # string to describe simulation
    savedDVTs = ''
    if collectAndSaveDVTs:
        savedDVTs = 'DVTs'
    
    string3 = 'saved_InputSpikes_%s__%d_outSpikes__%d_simulationRuns__%d_secDuration__randomSeed_%d'
    simulationString = string3 %(savedDVTs, numOutputSpikes, numSimulations,totalSimDurationInSec, randomSeed)
                  
    filenameToSave = inputString + '__' + simulationString + '.p'
                 
    return dirToSaveIn, filenameToSave


def GetDistanceBetweenSections(sourceSection, destSection):
    h.distance(sec=sourceSection)
    return h.distance(0, sec=destSection)


# AMPA synapse
def DefineSynapse_AMPA(segment, gMax=0.0004):
    synapse = h.ProbUDFsyn2(segment)

    synapse.tau_r = 0.3
    synapse.tau_d = 3.0
    synapse.gmax = gMax
    synapse.e = 0
    synapse.Use = 1
    synapse.u0 = 0
    synapse.Dep = 0
    synapse.Fac = 0

    return synapse


# NMDA synapse
def DefineSynapse_NMDA(segment, gMax=0.0004):
    synapse = h.ProbAMPANMDA2(segment)

    synapse.tau_r_AMPA = 0.3
    synapse.tau_d_AMPA = 3.0
    synapse.tau_r_NMDA = 2.0
    synapse.tau_d_NMDA = 70.0
    synapse.gmax = gMax
    synapse.e = 0
    synapse.Use = 1
    synapse.u0 = 0
    synapse.Dep = 0
    synapse.Fac = 0

    return synapse


# GABA A synapse
def DefineSynapse_GABA_A(segment, gMax=0.001):
    synapse = h.ProbUDFsyn2(segment)

    synapse.tau_r = 0.2
    synapse.tau_d = 8
    synapse.gmax = gMax
    synapse.e = -80
    synapse.Use = 1
    synapse.u0 = 0
    synapse.Dep = 0
    synapse.Fac = 0

    return synapse


# GABA B synapse
def DefineSynapse_GABA_B(segment, gMax=0.001):
    synapse = h.ProbUDFsyn2(segment)

    synapse.tau_r = 3.5
    synapse.tau_d = 260.9
    synapse.gmax = gMax
    synapse.e = -97
    synapse.Use = 1
    synapse.u0 = 0
    synapse.Dep = 0
    synapse.Fac = 0

    return synapse


# GABA A+B synapse
def DefineSynapse_GABA_AB(segment, gMax=0.001):
    synapse = h.ProbGABAAB_EMS(segment)

    synapse.tau_r_GABAA = 0.2
    synapse.tau_d_GABAA = 8
    synapse.tau_r_GABAB = 3.5
    synapse.tau_d_GABAB = 260.9
    synapse.gmax = gMax
    synapse.e_GABAA = -80
    synapse.e_GABAB = -97
    synapse.GABAB_ratio = 0.0
    synapse.Use = 1
    synapse.u0 = 0
    synapse.Dep = 0
    synapse.Fac = 0

    return synapse


def ConnectEmptyEventGenerator(synapse):

    netConnection = h.NetCon(None,synapse)
    netConnection.delay = 0
    netConnection.weight[0] = 1

    return netConnection


# create a single image of both excitatory and inhibitory spikes and the dendritic voltage traces
def CreateCombinedColorImage(dendriticVoltageTraces, excitatoryInputSpikes, inhibitoryInputSpikes):
    minV = -85
    maxV = 35
    
    excitatoryInputSpikes = signal.fftconvolve(excitatoryInputSpikes, np.ones((3,3)), mode='same')
    inhibitoryInputSpikes = signal.fftconvolve(inhibitoryInputSpikes, np.ones((3,3)), mode='same')
    
    stimulationImage = np.zeros((np.shape(excitatoryInputSpikes)[0],np.shape(excitatoryInputSpikes)[1],3))
    stimulationImage[:,:,0] = 0.98 * (dendriticVoltageTraces - minV) / (maxV - minV) + inhibitoryInputSpikes
    stimulationImage[:,:,1] = 0.98 * (dendriticVoltageTraces - minV) / (maxV - minV) + excitatoryInputSpikes
    stimulationImage[:,:,2] = 0.98 * (dendriticVoltageTraces - minV) / (maxV - minV)
    stimulationImage[stimulationImage > 1] = 1

    return stimulationImage


#%% define NEURON model

h.load_file('nrngui.hoc')
h.load_file("import3d.hoc")

morphologyFilename = "morphologies/cell1.asc"
biophysicalModelFilename = "L5PCbiophys5b.hoc"
biophysicalModelTemplateFilename = "L5PCtemplate_2.hoc"

h.load_file(biophysicalModelFilename)
h.load_file(biophysicalModelTemplateFilename)
L5PC = h.L5PCtemplate(morphologyFilename)

cvode = h.CVode()
if useCvode:
    cvode.active(1)

#%% collect everything we need about the model

# Get a list of all sections
listOfBasalSections  = [L5PC.dend[x] for x in range(len(L5PC.dend))]
listOfApicalSections = [L5PC.apic[x] for x in range(len(L5PC.apic))]
allSections = listOfBasalSections + listOfApicalSections
allSectionsType = ['basal' for x in listOfBasalSections] + ['apical' for x in listOfApicalSections]
allSectionsLength = []
allSections_DistFromSoma = []

allSegments = []
allSegmentsLength = []
allSegmentsType = []
allSegments_DistFromSoma = []
allSegments_SectionDistFromSoma = []
allSegments_SectionInd = []
# get a list of all segments
for k, section in enumerate(allSections):
    allSectionsLength.append(section.L)
    allSections_DistFromSoma.append(GetDistanceBetweenSections(L5PC.soma[0], section))
    for currSegment in section:
        allSegments.append(currSegment)
        allSegmentsLength.append(float(section.L) / section.nseg)
        allSegmentsType.append(allSectionsType[k])
        allSegments_DistFromSoma.append(GetDistanceBetweenSections(L5PC.soma[0], section) + float(section.L) * currSegment.x)
        allSegments_SectionDistFromSoma.append(GetDistanceBetweenSections(L5PC.soma[0], section))
        allSegments_SectionInd.append(k)


# set Ih vshift value and SK multiplicative factor
for section in allSections:
    section.vshift_Ih = Ih_vshift
L5PC.soma[0].vshift_Ih = Ih_vshift

list_of_axonal_sections = [L5PC.axon[x] for x in range(len(L5PC.axon))]
list_of_somatic_sections = [L5PC.soma[x] for x in range(len(L5PC.soma))]
all_sections_with_SKE2 = list_of_somatic_sections + list_of_axonal_sections + listOfApicalSections

for section in all_sections_with_SKE2:
    orig_SKE2_g = section.gSK_E2bar_SK_E2
    new_SKE2_g = orig_SKE2_g * SKE2_mult_factor
    section.gSK_E2bar_SK_E2 = new_SKE2_g
    #print('SKE2 conductance before update = %.10f' %(orig_SKE2_g))
    #print('SKE2 conductance after  update = %.10f (actual)' %(section.gSK_E2bar_SK_E2))

# Calculate total dendritic length
numBasalSegments = 0
numApicalSegments = 0
totalBasalDendriticLength = 0
totalApicalDendriticLength = 0

basal_seg_length_um = []
apical_seg_length_um = []
for k, segmentLength in enumerate(allSegmentsLength):
    if allSegmentsType[k] == 'basal':
        basal_seg_length_um.append(segmentLength)
        totalBasalDendriticLength += segmentLength
        numBasalSegments += 1
    if allSegmentsType[k] == 'apical':
        apical_seg_length_um.append(segmentLength)
        totalApicalDendriticLength += segmentLength
        numApicalSegments += 1

totalDendriticLength = sum(allSectionsLength)
totalNumSegments = len(allSegments)

# extract basal and apical segment lengths
num_basal_segments  = len(basal_seg_length_um)
num_apical_segments = len(apical_seg_length_um)

basal_seg_length_um = np.array(basal_seg_length_um)
apical_seg_length_um = np.array(apical_seg_length_um)

assert(totalNumSegments == (numBasalSegments + numApicalSegments))
assert(abs(totalDendriticLength - (totalBasalDendriticLength + totalApicalDendriticLength)) < 0.00001)

totalNumOutputSpikes = 0
numOutputSpikesPerSim = []
listOfISIs = []
listOfSingleSimulationDicts = []

## run all simulations
experimentStartTime = time.time()
print('-------------------------------------\\')
print('temperature is %.2f degrees celsius' %(h.celsius))
print('dt is %.4f ms' %(h.dt))
print('-------------------------------------/')
for simInd in range(numSimulations):
    currSimulationResultsDict = {}
    preparationStartTime = time.time()
    print('...')
    print('------------------------------------------------------------------------------\\')


    ex_spikes_bin, inh_spikes_bin = generate_input_spike_trains_for_simulation(sim_duration_ms,
                                                                               basal_seg_length_um,
                                                                               apical_seg_length_um,
                                                                               min_seg_length_um,
                                                                               num_bas_ex_spikes_per_100ms_range,
                                                                               num_apic_ex_spikes_per_100ms_range,
                                                                               num_bas_ex_inh_spike_diff_per_100ms_range,
                                                                               num_apic_ex_inh_spike_diff_per_100ms_range,
                                                                               inst_rate_sampling_time_interval_options_ms,
                                                                               temporal_inst_rate_smoothing_sigma_options_ms)

    inputSpikeTrains_ex  = ex_spikes_bin
    inputSpikeTrains_inh = inh_spikes_bin
        
    ## convert binary vectors to dict of spike times for each seg ind
    exSpikeSegInds, exSpikeTimes = np.nonzero(inputSpikeTrains_ex)
    exSpikeTimesMap = {}
    for segInd, synTime in zip(exSpikeSegInds,exSpikeTimes):
        if segInd in exSpikeTimesMap.keys():
            exSpikeTimesMap[segInd].append(synTime)
        else:
            exSpikeTimesMap[segInd] = [synTime]
    
    inhSpikeSegInds, inhSpikeTimes = np.nonzero(inputSpikeTrains_inh)
    inhSpikeTimesMap = {}
    for segInd, synTime in zip(inhSpikeSegInds,inhSpikeTimes):
        if segInd in inhSpikeTimesMap.keys():
            inhSpikeTimesMap[segInd].append(synTime)
        else:
            inhSpikeTimesMap[segInd] = [synTime]
    
    
    ## run simulation ########################
    allExNetCons = []
    allExNetConEventLists = []
    
    allInhNetCons = []
    allInhNetConEventLists = []
    
    allExSynapses = []
    allInhSynapses = []
    
    for segInd, segment in enumerate(allSegments):
        ###### excitation ######
    
        # define synapse and connect it to a segment
        if excitatorySynapseType == 'AMPA':
            exSynapse = DefineSynapse_AMPA(segment)
        elif excitatorySynapseType == 'NMDA':
            exSynapse = DefineSynapse_NMDA(segment)
        else:
            assert False, 'Not supported Excitatory Synapse Type'
        allExSynapses.append(exSynapse)
    
        # connect synapse
        netConnection = h.NetCon(None,exSynapse)
        netConnection.delay = 0
        netConnection.weight[0] = 1
    
        # update lists
        allExNetCons.append(netConnection)
        if segInd in exSpikeTimesMap.keys():
            allExNetConEventLists.append(exSpikeTimesMap[segInd])
        else:
            allExNetConEventLists.append([])
            
        ###### inhibition ######
    
        # define synapse and connect it to a segment
        if inhibitorySynapseType == 'GABA_A':
            inhSynapse = DefineSynapse_GABA_A(segment)
        elif inhibitorySynapseType == 'GABA_B':
            inhSynapse = DefineSynapse_GABA_B(segment)
        elif inhibitorySynapseType == 'GABA_AB':
            inhSynapse = DefineSynapse_GABA_AB(segment)
        else:
            assert False, 'Not supported Inhibitory Synapse Type'
        allInhSynapses.append(inhSynapse)
    
        # connect synapse
        netConnection = ConnectEmptyEventGenerator(inhSynapse)
    
        # update lists
        allInhNetCons.append(netConnection)
        if segInd in inhSpikeTimesMap.keys():
            allInhNetConEventLists.append(inhSpikeTimesMap[segInd])
        else:
            allInhNetConEventLists.append([])  # insert empty list if no event
    
    # define function to be run at the begining of the simulation to add synaptic events
    def AddAllSynapticEvents():
        for exNetCon, eventsList in zip(allExNetCons,allExNetConEventLists):
            for eventTime in eventsList:
                exNetCon.event(eventTime)
        for inhNetCon, eventsList in zip(allInhNetCons,allInhNetConEventLists):
            for eventTime in eventsList:
                inhNetCon.event(eventTime)

    # add voltage and time recordings
                
    # record time
    recTime = h.Vector()
    recTime.record(h._ref_t)
    
    # record soma voltage
    recVoltageSoma = h.Vector()
    recVoltageSoma.record(L5PC.soma[0](0.5)._ref_v)
    
    # record nexus voltage
    nexusSectionInd = 50
    recVoltageNexus = h.Vector()
    recVoltageNexus.record(L5PC.apic[nexusSectionInd](0.9)._ref_v)
    
    # record all segments voltage
    if collectAndSaveDVTs:
        recVoltage_allSegments = []
        for segInd, segment in enumerate(allSegments):
            voltageRecSegment = h.Vector()
            voltageRecSegment.record(segment._ref_v)
            recVoltage_allSegments.append(voltageRecSegment)
        
    preparationDurationInSeconds = time.time() - preparationStartTime
    print("preparing for single simulation took %.4f seconds" % (preparationDurationInSeconds))


    ## simulate the cell
    simulationStartTime = time.time()
    # make sure the following line will be run after h.finitialize()
    fih = h.FInitializeHandler('nrnpython("AddAllSynapticEvents()")')
    h.finitialize(-76)
    neuron.run(totalSimDurationInMS)
    singleSimulationDurationInMinutes = (time.time() - simulationStartTime) / 60
    print("single simulation took %.2f minutes" % (singleSimulationDurationInMinutes))

    ## extract the params from the simulation
    # collect all relevent recoding vectors (input spike times, dendritic voltage traces, soma voltage trace)
    collectionStartTime = time.time()
        
    origRecordingTime = np.array(recTime.to_python())
    origSomaVoltage   = np.array(recVoltageSoma.to_python())
    origNexusVoltage  = np.array(recVoltageNexus.to_python())
    
    # high res - origNumSamplesPerMS per ms
    recordingTimeHighRes = np.arange(0, totalSimDurationInMS, 1.0 / numSamplesPerMS_HighRes)
    somaVoltageHighRes   = np.interp(recordingTimeHighRes, origRecordingTime, origSomaVoltage)
    nexusVoltageHighRes  = np.interp(recordingTimeHighRes, origRecordingTime, origNexusVoltage)

    # low res - 1 sample per ms
    recordingTimeLowRes = np.arange(0,totalSimDurationInMS)
    somaVoltageLowRes   = np.interp(recordingTimeLowRes, origRecordingTime, origSomaVoltage)
    nexusVoltageLowRes  = np.interp(recordingTimeLowRes, origRecordingTime, origNexusVoltage)
    
    if collectAndSaveDVTs:
        dendriticVoltages = np.zeros((len(recVoltage_allSegments),recordingTimeLowRes.shape[0]))
        for segInd, recVoltageSeg in enumerate(recVoltage_allSegments):
            dendriticVoltages[segInd,:] = np.interp(recordingTimeLowRes, origRecordingTime, np.array(recVoltageSeg.to_python()))

    # detect soma spike times
    risingBefore = np.hstack((0, somaVoltageHighRes[1:] - somaVoltageHighRes[:-1])) > 0
    fallingAfter = np.hstack((somaVoltageHighRes[1:] - somaVoltageHighRes[:-1], 0)) < 0
    localMaximum = np.logical_and(fallingAfter, risingBefore)
    largerThanThresh = somaVoltageHighRes > -25
    
    binarySpikeVector = np.logical_and(localMaximum,largerThanThresh)
    spikeInds = np.nonzero(binarySpikeVector)
    outputSpikeTimes = recordingTimeHighRes[spikeInds]
    
    currSimulationResultsDict['recordingTimeHighRes'] = recordingTimeHighRes.astype(np.float32)
    currSimulationResultsDict['somaVoltageHighRes']   = somaVoltageHighRes.astype(np.float16)
    currSimulationResultsDict['nexusVoltageHighRes']  = nexusVoltageHighRes.astype(np.float16)
    
    currSimulationResultsDict['recordingTimeLowRes'] = recordingTimeLowRes.astype(np.float32)
    currSimulationResultsDict['somaVoltageLowRes']   = somaVoltageLowRes.astype(np.float16)
    currSimulationResultsDict['nexusVoltageLowRes']  = nexusVoltageLowRes.astype(np.float16)

    currSimulationResultsDict['exInputSpikeTimes']  = exSpikeTimesMap
    currSimulationResultsDict['inhInputSpikeTimes'] = inhSpikeTimesMap
    currSimulationResultsDict['outputSpikeTimes']   = outputSpikeTimes.astype(np.float16)
    
    if collectAndSaveDVTs:
        currSimulationResultsDict['dendriticVoltagesLowRes'] = dendriticVoltages.astype(np.float16)
        
    numOutputSpikes = len(outputSpikeTimes)
    numOutputSpikesPerSim.append(numOutputSpikes)
    listOfISIs += list(np.diff(outputSpikeTimes))
    
    listOfSingleSimulationDicts.append(currSimulationResultsDict)
    
    dataCollectionDurationInSeconds = (time.time() - collectionStartTime)
    print("data collection per single simulation took %.4f seconds" % (dataCollectionDurationInSeconds))
    
    entireSimulationDurationInMinutes = (time.time() - preparationStartTime) / 60
    print('-----------------------------------------------------------')
    print('finished simulation %d: num output spikes = %d' %(simInd + 1, numOutputSpikes))
    print("entire simulation took %.2f minutes" % (entireSimulationDurationInMinutes))
    print('------------------------------------------------------------------------------/')

    # show the results
    if collectAndSaveDVTs and showPlots:
        import matplotlib.pyplot as plt
        #plt.close('all')
        plt.figure(figsize=(30,15))
        plt.subplot(2,1,1); plt.title('input spike trains')
        plt.imshow(CreateCombinedColorImage(dendriticVoltages, inputSpikeTrains_ex, inputSpikeTrains_inh))
        
        plt.subplot(2,1,2); plt.title('interpulated time - high res')
        plt.plot(recordingTimeHighRes, somaVoltageHighRes)
        plt.plot(recordingTimeHighRes, nexusVoltageHighRes)
        plt.xlim(0,totalSimDurationInMS)
        plt.ylabel('Voltage [mV]'); plt.legend(['soma','nexus'])
    
        plt.figure(figsize=(30,15))
        plt.subplot(3,1,1); plt.title('dendritic voltage traces - low res')
        for segInd in range(len(recVoltage_allSegments)):
            plt.plot(recordingTimeLowRes, dendriticVoltages[segInd,:])
        plt.ylabel('Voltage [mV]')
        
        plt.subplot(3,1,2); plt.title('interpulated time - low res')
        plt.plot(recordingTimeLowRes, somaVoltageLowRes)
        plt.plot(recordingTimeLowRes, nexusVoltageLowRes)
        plt.xlabel('time [msec]'); plt.ylabel('Voltage [mV]'); plt.legend(['soma','nexus','soma LowRes','nexus LowRes'])
        
        plt.subplot(3,1,3); plt.title('voltage histogram')
        plt.hist(somaVoltageHighRes.ravel() , normed=True, bins=200, color='b', alpha=0.7)
        plt.hist(nexusVoltageHighRes.ravel(), normed=True, bins=200, color='r', alpha=0.7)
        plt.xlabel('Voltage [mV]'); plt.legend(['soma','nexus'])


#%% all simulations have ended, pring some statistics

totalNumOutputSpikes = sum(numOutputSpikesPerSim)
totalNumSimulationSeconds = totalSimDurationInSec * numSimulations
averageOutputFrequency = totalNumOutputSpikes / float(totalNumSimulationSeconds)
ISICV = np.std(listOfISIs) / np.mean(listOfISIs)
entireExperimentDurationInMinutes = (time.time() - experimentStartTime) / 60
                            
# calculate some collective meassures of the experiment
print('-------------------------------------------------\\')
print("entire experiment took %.2f minutes" % (entireExperimentDurationInMinutes))
print('-----------------------------------------------')
print('total number of collected spikes is ' + str(totalNumOutputSpikes))
print('average output frequency is %.2f [Hz]' % (averageOutputFrequency))
print('number of spikes per simulation minute is %.2f' % (totalNumOutputSpikes / entireExperimentDurationInMinutes))
print('ISI-CV is ' + str(ISICV))
print('-------------------------------------------------/')
sys.stdout.flush()

#%% organize and save everything


# create a simulation parameters dict
experimentParams = {}
experimentParams['randomSeed']     = randomSeed
experimentParams['numSimulations'] = numSimulations
experimentParams['totalSimDurationInSec']   = totalSimDurationInSec
experimentParams['collectAndSaveDVTs']      = collectAndSaveDVTs
experimentParams['numSamplesPerMS_HighRes'] = numSamplesPerMS_HighRes
experimentParams['excitatorySynapseType']   = excitatorySynapseType
experimentParams['inhibitorySynapseType']   = inhibitorySynapseType
experimentParams['useActiveDendrites']      = useActiveDendrites
experimentParams['Ih_vshift'] = Ih_vshift
experimentParams['inst_rate_sampling_time_interval_options_ms'] = inst_rate_sampling_time_interval_options_ms
experimentParams['num_bas_ex_spikes_per_100ms_range']          = num_bas_ex_spikes_per_100ms_range
experimentParams['num_bas_ex_inh_spike_diff_per_100ms_range']  = num_bas_ex_inh_spike_diff_per_100ms_range
experimentParams['num_apic_ex_spikes_per_100ms_range']         = num_apic_ex_spikes_per_100ms_range
experimentParams['num_apic_ex_inh_spike_diff_per_100ms_range'] = num_apic_ex_inh_spike_diff_per_100ms_range
experimentParams['allSectionsType']          = allSectionsType
experimentParams['allSections_DistFromSoma'] = allSections_DistFromSoma
experimentParams['allSectionsLength']        = allSectionsLength
experimentParams['allSegmentsType']                 = allSegmentsType
experimentParams['allSegmentsLength']               = allSegmentsLength
experimentParams['allSegments_DistFromSoma']        = allSegments_DistFromSoma
experimentParams['allSegments_SectionDistFromSoma'] = allSegments_SectionDistFromSoma
experimentParams['allSegments_SectionInd']          = allSegments_SectionInd

experimentParams['ISICV'] = ISICV
experimentParams['listOfISIs'] = listOfISIs
experimentParams['numOutputSpikesPerSim']     = numOutputSpikesPerSim
experimentParams['totalNumOutputSpikes']      = totalNumOutputSpikes
experimentParams['totalNumSimulationSeconds'] = totalNumSimulationSeconds
experimentParams['averageOutputFrequency']    = averageOutputFrequency
experimentParams['entireExperimentDurationInMinutes'] = entireExperimentDurationInMinutes

# the important things to store
experimentResults = {}
experimentResults['listOfSingleSimulationDicts'] = listOfSingleSimulationDicts

# the dict that will hold everything
experimentDict = {}
experimentDict['Params']  = experimentParams
experimentDict['Results'] = experimentResults

dirToSaveIn, filenameToSave = GetDirNameAndFileName(totalNumOutputSpikes, randomSeed)
if not os.path.exists(dirToSaveIn):
    os.makedirs(dirToSaveIn)

# pickle everythin
pickle.dump(experimentDict, open(dirToSaveIn + filenameToSave, "wb"), protocol=2)



================================================================================
================================================================================
L5PC_NEURON_simulation/mods/Ih.mod:
===================================
:Comment : Modified With vshift
:Reference : :		Kole,Hallermann,and Stuart, J. Neurosci. 2006

NEURON	{
	SUFFIX Ih
	NONSPECIFIC_CURRENT ihcn
	RANGE gIhbar, gIh, ihcn, vshift
}

UNITS	{
	(S)  = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gIhbar = 0.00001 (S/cm2) 
	ehcn   =  -45.0 (mV)
	vhalf  = -154.9
	vshift = 0
}

ASSIGNED	{
	v      (mV)
	ihcn   (mA/cm2)
	gIh    (S/cm2)
	mInf
	mTau
	mAlpha
	mBeta
}

STATE	{ 
	m
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gIh = gIhbar*m
	ihcn = gIh*(v-ehcn)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
}

INITIAL{
	rates()
	m = mInf
}

PROCEDURE rates(){
	UNITSOFF
		if(v == vhalf){
            v = v + 0.0001
        }
		mAlpha =  0.001*6.43*(v-(vhalf+vshift))/(exp((v-(vhalf+vshift))/11.9)-1)
		mBeta  =  0.001*193*exp((v-vshift)/33.1)
		mInf = mAlpha/(mAlpha + mBeta)
		mTau = 1/(mAlpha + mBeta)
		       
	UNITSON
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/SK_E2.mod:
======================================
: SK-type calcium-activated potassium current
: Reference : Kohler et al. 1996

NEURON {
       SUFFIX SK_E2
       USEION k READ ek WRITE ik
       USEION ca READ cai
       RANGE gSK_E2bar, gSK_E2, ik
}

UNITS {
      (mV) = (millivolt)
      (mA) = (milliamp)
      (mM) = (milli/liter)
}

PARAMETER {
          v            (mV)
          gSK_E2bar = .000001 (mho/cm2)
          zTau = 1              (ms)
          ek           (mV)
          cai          (mM)
}

ASSIGNED {
         zInf
         ik            (mA/cm2)
         gSK_E2	       (S/cm2)
}

STATE {
      z   FROM 0 TO 1
}

BREAKPOINT {
           SOLVE states METHOD cnexp
           gSK_E2  = gSK_E2bar * z
           ik   =  gSK_E2 * (v - ek)
}

DERIVATIVE states {
        rates(cai)
        z' = (zInf - z) / zTau
}

PROCEDURE rates(ca(mM)) {
          if(ca < 1e-7){
	              ca = ca + 1e-07
          }
          zInf = 1/(1 + (0.00043 / ca)^4.8)
}

INITIAL {
        rates(cai)
        z = zInf
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/ProbAMPANMDA_EMS.mod:
=================================================
COMMENT
/*                                                                               
Copyright (c) 2015 EPFL-BBP, All rights reserved.                                
                                                                                 
THIS SOFTWARE IS PROVIDED BY THE BLUE BRAIN PROJECT ``AS IS''                    
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,            
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR           
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE BLUE BRAIN PROJECT                 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF             
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR                  
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,            
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE             
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN           
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                    
                                                                                 
This work is licensed under a                                                    
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
To view a copy of this license, visit                                            
http://creativecommons.org/licenses/by-nc-sa/4.0/legalcode or send a letter to   
Creative Commons,                                                                
171 Second Street, Suite 300,                                                    
San Francisco, California, 94105, USA.                                           
*/                 
ENDCOMMENT

TITLE Probabilistic AMPA and NMDA receptor with presynaptic short-term plasticity 


COMMENT
AMPA and NMDA receptor conductance using a dual-exponential profile
presynaptic short-term plasticity as in Fuhrmann et al. 2002

_EMS (Eilif Michael Srikanth)
Modification of ProbAMPANMDA: 2-State model by Eilif Muller, Michael Reimann, Srikanth Ramaswamy, Blue Brain Project, August 2011
This new model was motivated by the following constraints:

1) No consumption on failure.  
2) No release just after release until recovery.
3) Same ensemble averaged trace as deterministic/canonical Tsodyks-Markram 
   using same parameters determined from experiment.
4) Same quantal size as present production probabilistic model.

To satisfy these constaints, the synapse is implemented as a
uni-vesicular (generalization to multi-vesicular should be
straight-forward) 2-state Markov process.  The states are
{1=recovered, 0=unrecovered}.

For a pre-synaptic spike or external spontaneous release trigger
event, the synapse will only release if it is in the recovered state,
and with probability u (which follows facilitation dynamics).  If it
releases, it will transition to the unrecovered state.  Recovery is as
a Poisson process with rate 1/Dep.

This model satisfies all of (1)-(4).
ENDCOMMENT

COMMENT                                                                          
/**                                                                              
 @file ProbAMPANMDA_EMS.mod                                                        
 @brief Probabilistic AMPA and NMDA receptor with presynaptic short-term plasticity                   
 @author Eilif Muller, Michael Reimann, Srikanth Ramaswamy, James King @ BBP     
 @date 2011                                                                      
*/                                                                               
ENDCOMMENT  

NEURON {
    THREADSAFE
        POINT_PROCESS ProbAMPANMDA_EMS
        RANGE tau_r_AMPA, tau_d_AMPA, tau_r_NMDA, tau_d_NMDA
        RANGE Use, u, Dep, Fac, u0, mg, Rstate, tsyn_fac, u
        RANGE i, i_AMPA, i_NMDA, g_AMPA, g_NMDA, g, e, NMDA_ratio
        RANGE A_AMPA_step, B_AMPA_step, A_NMDA_step, B_NMDA_step
        NONSPECIFIC_CURRENT i
        POINTER rng
        RANGE synapseID, verboseLevel
}

PARAMETER {


        tau_r_AMPA = 0.2   (ms)  : dual-exponential conductance profile
        tau_d_AMPA = 1.7    (ms)  : IMPORTANT: tau_r < tau_d
        tau_r_NMDA = 0.29   (ms) : dual-exponential conductance profile
        tau_d_NMDA = 43     (ms) : IMPORTANT: tau_r < tau_d
        Use = 1.0   (1)   : Utilization of synaptic efficacy (just initial values! Use, Dep and Fac are overwritten by BlueBuilder assigned values) 
        Dep = 100   (ms)  : relaxation time constant from depression
        Fac = 10   (ms)  :  relaxation time constant from facilitation
        e = 0     (mV)  : AMPA and NMDA reversal potential
        mg = 1   (mM)  : initial concentration of mg2+
        mggate
        gmax = .001 (uS) : weight conversion factor (from nS to uS)
        u0 = 0 :initial value of u, which is the running value of release probability
        synapseID = 0
        verboseLevel = 0
	NMDA_ratio = 0.71 (1) : The ratio of NMDA to AMPA
}

COMMENT
The Verbatim block is needed to generate random nos. from a uniform distribution between 0 and 1 
for comparison with Pr to decide whether to activate the synapse or not
ENDCOMMENT

VERBATIM

#include<stdlib.h>
#include<stdio.h>
#include<math.h>

double nrn_random_pick(void* r);
void* nrn_random_arg(int argpos);

ENDVERBATIM
  

ASSIGNED {

        v (mV)
        i (nA)
        i_AMPA (nA)
        i_NMDA (nA)
        g_AMPA (uS)
        g_NMDA (uS)
        g (uS)
        factor_AMPA
        factor_NMDA
        A_AMPA_step
        B_AMPA_step
        A_NMDA_step
        B_NMDA_step
        rng

	: Recording these three, you can observe full state of model
	: tsyn_fac gives you presynaptic times, Rstate gives you 
        : state transitions,
        : u gives you the "release probability" at transitions 
        : (attention: u is event based based, so only valid at incoming events)
	Rstate (1) : recovered state {0=unrecovered, 1=recovered}
	tsyn_fac (ms) : the time of the last spike
	u (1) : running release probability

}

STATE {

        A_AMPA       : AMPA state variable to construct the dual-exponential profile - decays with conductance tau_r_AMPA
        B_AMPA       : AMPA state variable to construct the dual-exponential profile - decays with conductance tau_d_AMPA
        A_NMDA       : NMDA state variable to construct the dual-exponential profile - decays with conductance tau_r_NMDA
        B_NMDA       : NMDA state variable to construct the dual-exponential profile - decays with conductance tau_d_NMDA
}

INITIAL{

        LOCAL tp_AMPA, tp_NMDA

	Rstate=1
	tsyn_fac=0
	u=u0
        
        A_AMPA = 0
        B_AMPA = 0
        
        A_NMDA = 0
        B_NMDA = 0
        
        tp_AMPA = (tau_r_AMPA*tau_d_AMPA)/(tau_d_AMPA-tau_r_AMPA)*log(tau_d_AMPA/tau_r_AMPA) :time to peak of the conductance
        tp_NMDA = (tau_r_NMDA*tau_d_NMDA)/(tau_d_NMDA-tau_r_NMDA)*log(tau_d_NMDA/tau_r_NMDA) :time to peak of the conductance
        
        factor_AMPA = -exp(-tp_AMPA/tau_r_AMPA)+exp(-tp_AMPA/tau_d_AMPA) :AMPA Normalization factor - so that when t = tp_AMPA, gsyn = gpeak
        factor_AMPA = 1/factor_AMPA
        
        factor_NMDA = -exp(-tp_NMDA/tau_r_NMDA)+exp(-tp_NMDA/tau_d_NMDA) :NMDA Normalization factor - so that when t = tp_NMDA, gsyn = gpeak
        factor_NMDA = 1/factor_NMDA

        A_AMPA_step = exp(dt*(( - 1.0 ) / tau_r_AMPA))
        B_AMPA_step = exp(dt*(( - 1.0 ) / tau_d_AMPA))
        A_NMDA_step = exp(dt*(( - 1.0 ) / tau_r_NMDA))
        B_NMDA_step = exp(dt*(( - 1.0 ) / tau_d_NMDA))
}

BREAKPOINT {

        SOLVE state
        mggate = 1 / (1 + exp(0.08 (/mV) * -(v)) * (mg / 3.57 (mM))) :mggate kinetics - Jahr & Stevens 1990
        g_AMPA = gmax*(B_AMPA-A_AMPA) :compute time varying conductance as the difference of state variables B_AMPA and A_AMPA
        g_NMDA = gmax*(B_NMDA-A_NMDA) * mggate :compute time varying conductance as the difference of state variables B_NMDA and A_NMDA and mggate kinetics
        g = g_AMPA + g_NMDA
        i_AMPA = g_AMPA*(v-e) :compute the AMPA driving force based on the time varying conductance, membrane potential, and AMPA reversal
        i_NMDA = g_NMDA*(v-e) :compute the NMDA driving force based on the time varying conductance, membrane potential, and NMDA reversal
        i = i_AMPA + i_NMDA
}

PROCEDURE state() {
        A_AMPA = A_AMPA*A_AMPA_step
        B_AMPA = B_AMPA*B_AMPA_step
        A_NMDA = A_NMDA*A_NMDA_step
        B_NMDA = B_NMDA*B_NMDA_step
}


NET_RECEIVE (weight,weight_AMPA, weight_NMDA, Psurv, tsyn (ms)){
        LOCAL result
        weight_AMPA = weight
        weight_NMDA = weight * NMDA_ratio
	: Locals:
	: Psurv - survival probability of unrecovered state
	: tsyn - time since last surival evaluation.
	
        INITIAL{
                tsyn=t
        }

    : Do not perform any calculations if the synapse (netcon) is deactivated.  This avoids drawing from the random stream
    if(  !(weight > 0) ) {
VERBATIM
        return;
ENDVERBATIM
    }

        : calc u at event-
        if (Fac > 0) {
                u = u*exp(-(t - tsyn_fac)/Fac) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           } else {
                  u = Use  
           } 
           if(Fac > 0){
                  u = u + Use*(1-u) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           }    

	   : tsyn_fac knows about all spikes, not only those that released
	   : i.e. each spike can increase the u, regardless of recovered state.
	   tsyn_fac = t

	   : recovery

	   if (Rstate == 0) {
	   : probability of survival of unrecovered state based on Poisson recovery with rate 1/tau
	          Psurv = exp(-(t-tsyn)/Dep)
		  result = urand()
		  if (result>Psurv) {
		         Rstate = 1     : recover      

                         if( verboseLevel > 0 ) {
                             printf( "Recovered! %f at time %g: Psurv = %g, urand=%g\n", synapseID, t, Psurv, result )
                         }

		  }
		  else {
		         : survival must now be from this interval
		         tsyn = t
                         if( verboseLevel > 0 ) {
                             printf( "Failed to recover! %f at time %g: Psurv = %g, urand=%g\n", synapseID, t, Psurv, result )
                         }
		  }
           }	   
	   
	   if (Rstate == 1) {
   	          result = urand()
		  if (result<u) {
		  : release!
   		         tsyn = t
			 Rstate = 0
                         A_AMPA = A_AMPA + weight_AMPA*factor_AMPA
                         B_AMPA = B_AMPA + weight_AMPA*factor_AMPA
                         A_NMDA = A_NMDA + weight_NMDA*factor_NMDA
                         B_NMDA = B_NMDA + weight_NMDA*factor_NMDA
                         
                         if( verboseLevel > 0 ) {
                             printf( "Release! %f at time %g: vals %g %g %g %g\n", synapseID, t, A_AMPA, weight_AMPA, factor_AMPA, weight )
                         }
		  		  
		  }
		  else {
		         if( verboseLevel > 0 ) {
			     printf("Failure! %f at time %g: urand = %g\n", synapseID, t, result )
		         }

		  }

	   }

}

PROCEDURE setRNG() {
VERBATIM
    {
        /**
         * This function takes a NEURON Random object declared in hoc and makes it usable by this mod file.
         * Note that this method is taken from Brett paper as used by netstim.hoc and netstim.mod
         * which points out that the Random must be in uniform(1) mode
         */
        void** pv = (void**)(&_p_rng);
        if( ifarg(1)) {
            *pv = nrn_random_arg(1);
        } else {
            *pv = (void*)0;
        }
    }
ENDVERBATIM
}

FUNCTION urand() {
VERBATIM
        double value;
        if (_p_rng) {
                /*
                :Supports separate independent but reproducible streams for
                : each instance. However, the corresponding hoc Random
                : distribution MUST be set to Random.negexp(1)
                */
                value = nrn_random_pick(_p_rng);
                //printf("random stream for this simulation = %lf\n",value);
                return value;
        }else{
ENDVERBATIM
                : the old standby. Cannot use if reproducible parallel sim
                : independent of nhost or which host this instance is on
                : is desired, since each instance on this cpu draws from
                : the same stream
                value = scop_random(1)
VERBATIM
        }
ENDVERBATIM
        urand = value
}

FUNCTION toggleVerbose() {
    verboseLevel = 1-verboseLevel
}

================================================================================
================================================================================
L5PC_NEURON_simulation/morphologies/cell1.asc:
==============================================
;	V3 text file written for MicroBrightField products.
(Sections S1 "C060311B_1_mcorrected.added.DAT" 0 0 0)
(SSM "C060311B_1_mcorrected.added.DAT" 1)
(SSM2 1)
(ImageCoords)

("Section_1Contour"
  (Color Yellow)
  (Closed)
  (Resolution 0.804327)
  (   80.93  1257.26    -0.04     1.17 S1)  ;  1, 1
  (   41.33  1258.87    -0.04     1.17 S1)  ;  1, 2
  (  -26.87  1255.65     2.92     1.17 S1)  ;  1, 3
  ( -125.64  1253.24     2.92     1.17 S1)  ;  1, 4
  ( -195.31  1269.32     2.92     1.17 S1)  ;  1, 5
  ( -253.24  1285.41     2.92     1.17 S1)  ;  1, 6
  ( -323.63  1291.04     2.92     1.17 S1)  ;  1, 7
  ( -439.27  1303.11    -2.35     1.17 S1)  ;  1, 8
  ( -524.85  1316.94   -14.32     1.17 S1)  ;  1, 9
  ( -634.11  1321.77   -35.64     1.17 S1)  ;  1, 10
  ( -707.44  1338.66   -39.84     1.17 S1)  ;  1, 11
  ( -817.95  1339.46   -39.84     1.17 S1)  ;  1, 12
  ( -979.79  1344.29   -39.84     1.17 S1)  ;  1, 13
  (-1120.37  1332.22   -39.84     1.17 S1)  ;  1, 14
  (-1256.76  1327.40   -43.67     1.17 S1)  ;  1, 15
  (-1374.60  1308.09   -43.67     1.17 S1)  ;  1, 16
  (-1466.26  1294.42   -43.67     1.17 S1)  ;  1, 17
  (-1615.64  1271.90   -43.67     1.17 S1)  ;  1, 18
  (-1781.88  1248.57   -45.30     1.17 S1)  ;  1, 19
  (-1955.96  1234.90   -47.19     1.17 S1)  ;  1, 20
  (-2084.29  1236.51   -47.19     1.17 S1)  ;  1, 21
  (-2156.15  1222.83   -50.11     1.17 S1)  ;  1, 22
  (-2201.62  1234.09   -51.40     1.17 S1)  ;  1, 23
  (-2268.13  1246.16   -63.63     1.17 S1)  ;  1, 24
  (-2331.19  1252.59   -65.49     1.17 S1)  ;  1, 25
  (-2399.39  1263.86   -69.61     1.17 S1)  ;  1, 26
  (-2514.81  1248.57   -72.38     1.17 S1)  ;  1, 27
  (-2536.08  1235.70   -73.10     1.17 S1)  ;  1, 28
  (-2558.08  1209.97   -73.48     1.17 S1)  ;  1, 29
  (-2572.74  1208.36   -73.67     1.17 S1)  ;  1, 30
  (-2605.74  1231.68   -74.39     1.17 S1)  ;  1, 31
  (-2651.94  1263.86   -74.39     1.17 S1)  ;  1, 32
  (-2720.87  1282.35   -74.61     1.17 S1)  ;  1, 33
  (-2820.38  1292.01   -86.32     1.17 S1)  ;  1, 34
  (-2903.98  1300.85   -91.05     1.17 S1)  ;  1, 35
  (-2994.91  1308.90   -97.64     1.17 S1)  ;  1, 36
  (-3090.75  1306.48  -108.63     1.17 S1)  ;  1, 37
  (-3172.88  1309.70  -125.10     1.17 S1)  ;  1, 38
  (-3218.86  1300.05  -131.05     1.17 S1)  ;  1, 39
  (-3285.59  1283.16  -141.27     1.17 S1)  ;  1, 40
  (-3330.32  1271.90  -154.38     1.17 S1)  ;  1, 41
  (-3364.78  1263.05  -160.10     1.17 S1)  ;  1, 42
  (-3484.82  1242.14  -161.80     1.17 S1)  ;  1, 43
  (-3588.73  1222.83  -162.67     1.17 S1)  ;  1, 44
  (-3662.06  1203.53  -165.40     1.17 S1)  ;  1, 45
  (-3787.97  1171.36  -165.40     1.17 S1)  ;  1, 46
  (-3829.04  1142.40  -165.40     1.17 S1)  ;  1, 47
  (-3888.95  1114.89  -165.40     1.17 S1)  ;  1, 48
  (-3910.95  1111.68  -165.40     1.17 S1)  ;  1, 49
  (-3937.34  1118.92  -165.40     1.17 S1)  ;  1, 50
  (-3981.34  1139.02  -165.40     1.17 S1)  ;  1, 51
  (-4074.47  1183.26  -165.40     1.17 S1)  ;  1, 52
  (-4187.91  1193.72  -165.40     1.17 S1)  ;  1, 53
  (-4249.51  1183.26  -165.40     1.17 S1)  ;  1, 54
  (-4303.04  1176.02  -165.40     1.17 S1)  ;  1, 55
  (-4451.46  1155.11  -153.05     1.17 S1)  ;  1, 56
  (-4575.39  1136.61  -153.05     1.17 S1)  ;  1, 57
  (-4707.90  1105.24  -153.05     1.17 S1)  ;  1, 58
  (-4779.76  1091.57  -156.80     1.17 S1)  ;  1, 59
  (-4842.09  1078.70  -156.80     1.17 S1)  ;  1, 60
  (-4985.60  1056.02  -156.80     1.17 S1)  ;  1, 61
  (-5072.13  1025.45  -156.42     1.17 S1)  ;  1, 62
  (-5214.90   984.43  -156.42     1.17 S1)  ;  1, 63
  (-5389.94   925.72  -156.42     1.17 S1)  ;  1, 64
  (-5542.98   886.95  -156.42     1.17 S1)  ;  1, 65
  (-5638.31   858.80  -156.42     1.17 S1)  ;  1, 66
  (-5836.60   777.56  -156.42     1.17 S1)  ;  1, 67
  (-5920.93   740.40  -156.42     1.17 S1)  ;  1, 68
  (-6000.86   682.49  -156.42     1.17 S1)  ;  1, 69
  (-6112.83   589.02  -156.42     1.17 S1)  ;  1, 70
  (-6167.83   529.50  -156.42     1.17 S1)  ;  1, 71
  (-6211.83   472.24  -156.92     1.17 S1)  ;  1, 72
  (-6252.89   405.32  -156.92     1.17 S1)  ;  1, 73
  (-6290.07   341.61  -156.92     1.17 S1)  ;  1, 74
  (-6305.47   270.03  -162.33     1.17 S1)  ;  1, 75
  (-6351.67   193.62  -162.33     1.17 S1)  ;  1, 76
  (-6411.58   129.91  -167.71     1.17 S1)  ;  1, 77
  (-6422.58   100.96  -167.71     1.17 S1)  ;  1, 78
  (-6432.84    56.72  -167.71     1.17 S1)  ;  1, 79
  (-6473.91   -21.46  -167.71     1.17 S1)  ;  1, 80
  (-6490.77   -45.59  -167.71     1.17 S1)  ;  1, 81
  (-6512.04   -59.26  -167.71     1.17 S1)  ;  1, 82
  (-6514.24  -110.10  -167.71     1.17 S1)  ;  1, 83
  (-6519.37  -122.16  -167.71     1.17 S1)  ;  1, 84
  (-6536.97  -124.57  -167.71     1.17 S1)  ;  1, 85
  (-6545.77  -132.62  -167.71     1.17 S1)  ;  1, 86
  (-6550.91  -139.05  -167.71     1.17 S1)  ;  1, 87
  (-6550.17  -168.81  -167.71     1.17 S1)  ;  1, 88
  (-6561.91  -290.43  -167.71     1.17 S1)  ;  1, 89
  (-6564.84  -414.45  -167.71     1.17 S1)  ;  1, 90
  (-6560.44  -502.13  -167.71     1.17 S1)  ;  1, 91
  (-6550.17  -601.38  -167.71     1.17 S1)  ;  1, 92
  (-6544.82  -674.57  -167.71     1.17 S1)  ;  1, 93
  (-6521.35  -749.38  -166.61     1.17 S1)  ;  1, 94
  (-6488.35  -839.78  -166.61     1.17 S1)  ;  1, 95
  (-6454.62  -959.63  -166.61     1.17 S1)  ;  1, 96
  (-6413.78 -1061.94  -166.61     1.17 S1)  ;  1, 97
  (-6389.58 -1143.34  -166.61     1.17 S1)  ;  1, 98
  (-6378.58 -1263.98  -170.48     1.17 S1)  ;  1, 99
  (-6364.65 -1337.50  -170.48     1.17 S1)  ;  1, 100
  (-6352.18 -1352.78  -170.48     1.17 S1)  ;  1, 101
  (-6316.25 -1377.72  -170.48     1.17 S1)  ;  1, 102
  (-6267.12 -1401.04  -170.48     1.17 S1)  ;  1, 103
  (-6162.26 -1433.22  -170.48     1.17 S1)  ;  1, 104
  (-6056.37 -1472.63  -182.94     1.17 S1)  ;  1, 105
  (-5950.77 -1491.93  -182.94     1.17 S1)  ;  1, 106
  (-5793.33 -1513.81  -182.94     1.17 S1)  ;  1, 107
  (-5629.81 -1532.31  -182.94     1.17 S1)  ;  1, 108
  (-5470.17 -1551.61  -182.94     1.17 S1)  ;  1, 109
  (-5271.15 -1563.68  -182.94     1.17 S1)  ;  1, 110
  (-5137.69 -1580.57  -182.94     1.17 S1)  ;  1, 111
  (-5022.78 -1587.16  -182.94     1.17 S1)  ;  1, 112
  (-4950.18 -1583.14  -182.94     1.17 S1)  ;  1, 113
  (-4848.25 -1600.84  -182.94     1.17 S1)  ;  1, 114
  (-4792.74 -1634.62  -182.94     1.17 S1)  ;  1, 115
  (-4699.10 -1674.03  -182.94     1.17 S1)  ;  1, 116
  (-4613.52 -1712.00  -179.83     1.17 S1)  ;  1, 117
  (-4510.86 -1759.45  -179.83     1.17 S1)  ;  1, 118
  (-4450.73 -1806.91  -179.83     1.17 S1)  ;  1, 119
  (-4442.66 -1822.99  -179.83     1.17 S1)  ;  1, 120
  (-4392.07 -1859.19  -179.83     1.17 S1)  ;  1, 121
  (-4368.60 -1859.19  -179.83     1.17 S1)  ;  1, 122
  (-4345.13 -1871.25  -179.83     1.17 S1)  ;  1, 123
  (-4302.82 -1884.28  -179.83     1.17 S1)  ;  1, 124
  (-4237.56 -1914.85  -179.83     1.17 S1)  ;  1, 125
  (-4119.50 -1936.56  -180.17     1.17 S1)  ;  1, 126
  (-4009.94 -1937.37  -180.17     1.17 S1)  ;  1, 127
  (-3878.68 -1966.32  -180.17     1.17 S1)  ;  1, 128
  (-3814.88 -1972.76  -180.17     1.17 S1)  ;  1, 129
  (-3682.38 -1991.42  -180.17     1.17 S1)  ;  1, 130
  (-3609.78 -1994.64  -180.17     1.17 S1)  ;  1, 131
  (-3487.32 -2003.48  -180.17     1.17 S1)  ;  1, 132
  (-3366.03 -2022.79  -180.17     1.17 S1)  ;  1, 133
  (-3272.90 -2020.37  -180.17     1.17 S1)  ;  1, 134
  (-3206.17 -2025.20  -180.17     1.17 S1)  ;  1, 135
  (-3181.97 -2034.05  -180.17     1.17 S1)  ;  1, 136
  (-3137.97 -2058.18  -180.17     1.17 S1)  ;  1, 137
  (-3118.61 -2072.66  -180.17     1.17 S1)  ;  1, 138
  (-3054.08 -2082.31  -180.17     1.17 S1)  ;  1, 139
  (-2988.82 -2084.72  -180.17     1.17 S1)  ;  1, 140
  (-2966.09 -2072.66  -180.17     1.17 S1)  ;  1, 141
  (-2960.22 -2071.05  -180.17     1.17 S1)  ;  1, 142
  (-2948.49 -2071.05  -180.17     1.17 S1)  ;  1, 143
  (-2936.02 -2076.68  -180.17     1.17 S1)  ;  1, 144
  (-2913.29 -2088.74  -180.17     1.17 S1)  ;  1, 145
  (-2875.89 -2106.44  -180.17     1.17 S1)  ;  1, 146
  (-2834.09 -2114.48  -180.17     1.17 S1)  ;  1, 147
  (-2762.96 -2116.09  -180.17     1.17 S1)  ;  1, 148
  (-2725.78 -2109.82  -180.17     1.17 S1)  ;  1, 149
  (-2697.18 -2108.21  -180.17     1.17 S1)  ;  1, 150
  (-2679.59 -2112.23  -180.17     1.17 S1)  ;  1, 151
  (-2670.79 -2123.49  -180.17     1.17 S1)  ;  1, 152
  (-2638.52 -2148.42  -180.17     1.17 S1)  ;  1, 153
  (-2605.52 -2170.14  -180.17     1.17 S1)  ;  1, 154
  (-2551.26 -2177.38  -180.17     1.17 S1)  ;  1, 155
  (-2503.08 -2173.36  -180.17     1.17 S1)  ;  1, 156
  (-2434.88 -2198.29  -180.17     1.17 S1)  ;  1, 157
  (-2355.69 -2216.79  -180.17     1.17 S1)  ;  1, 158
  (-2280.38 -2233.68  -171.88     1.17 S1)  ;  1, 159
  (-2194.58 -2242.53  -168.32     1.17 S1)  ;  1, 160
  (-2130.05 -2248.16  -164.11     1.17 S1)  ;  1, 161
  (-2000.69 -2252.34  -161.88     1.17 S1)  ;  1, 162
  (-1900.97 -2252.34  -160.02     1.17 S1)  ;  1, 163
  (-1795.37 -2272.45  -158.73     1.17 S1)  ;  1, 164
  (-1744.04 -2285.32  -158.13     1.17 S1)  ;  1, 165
  (-1698.28 -2289.34  -157.07     1.17 S1)  ;  1, 166
  (-1644.75 -2286.12  -156.23     1.17 S1)  ;  1, 167
  (-1592.69 -2284.52  -156.23     1.17 S1)  ;  1, 168
  (-1559.69 -2263.60  -154.95     1.17 S1)  ;  1, 169
  (-1526.69 -2266.02  -154.64     1.17 S1)  ;  1, 170
  (-1455.56 -2241.08  -153.39     1.17 S1)  ;  1, 171
  (-1373.43 -2223.39  -153.01     1.17 S1)  ;  1, 172
  (-1335.52 -2207.30  -151.05     1.17 S1)  ;  1, 173
  (-1318.65 -2183.97  -149.87     1.17 S1)  ;  1, 174
  (-1292.25 -2122.04  -149.45     1.17 S1)  ;  1, 175
  (-1277.59 -2089.71  -148.62     1.17 S1)  ;  1, 176
  (-1281.99 -2051.10  -145.29     1.17 S1)  ;  1, 177
  (-1297.39 -2018.93  -142.49     1.17 S1)  ;  1, 178
  (-1291.52 -1985.14  -141.12     1.17 S1)  ;  1, 179
  (-1271.94 -1898.76  -141.05     1.17 S1)  ;  1, 180
  (-1229.41 -1815.91  -141.05     1.17 S1)  ;  1, 181
  (-1142.88 -1738.70  -141.05     1.17 S1)  ;  1, 182
  (-1067.57 -1696.71  -141.05     1.17 S1)  ;  1, 183
  ( -970.77 -1679.82  -141.05     1.17 S1)  ;  1, 184
  ( -842.44 -1677.41  -141.05     1.17 S1)  ;  1, 185
  ( -779.60 -1671.78  -141.05     1.17 S1)  ;  1, 186
  ( -632.21 -1678.21  -141.05     1.17 S1)  ;  1, 187
  ( -511.43 -1692.53  -141.05     1.17 S1)  ;  1, 188
  ( -403.34 -1709.42  -141.05     1.17 S1)  ;  1, 189
  ( -300.68 -1713.44  -141.05     1.17 S1)  ;  1, 190
  ( -156.22 -1719.88  -141.05     1.17 S1)  ;  1, 191
  (  -48.43 -1710.23  -141.05     1.17 S1)  ;  1, 192
  (   76.02 -1683.04  -141.05     1.17 S1)  ;  1, 193
  (  193.86 -1637.03  -129.87     1.17 S1)  ;  1, 194
  (  327.32 -1579.92  -129.87     1.17 S1)  ;  1, 195
  (  467.89 -1493.86  -129.87     1.17 S1)  ;  1, 196
  (  584.27 -1406.03  -129.87     1.17 S1)  ;  1, 197
  (  674.46 -1354.55  -129.87     1.17 S1)  ;  1, 198
  (  883.23 -1261.09  -129.87     1.17 S1)  ;  1, 199
  (  962.94 -1220.07  -129.87     1.17 S1)  ;  1, 200
  ( 1112.32 -1170.04  -129.87     1.17 S1)  ;  1, 201
  ( 1246.51 -1122.58  -129.87     1.17 S1)  ;  1, 202
  ( 1315.22 -1095.24  -129.87     1.17 S1)  ;  1, 203
  ( 1404.47 -1047.62  -129.87     1.17 S1)  ;  1, 204
  ( 1496.13  -994.53  -129.87     1.17 S1)  ;  1, 205
  ( 1564.11  -941.29  -129.87     1.17 S1)  ;  1, 206
  ( 1594.17  -918.77  -129.87     1.17 S1)  ;  1, 207
  ( 1598.57  -871.31  -129.87     1.17 S1)  ;  1, 208
  ( 1633.77  -826.27  -129.87     1.17 S1)  ;  1, 209
  ( 1681.43  -773.02  -129.87     1.17 S1)  ;  1, 210
  ( 1731.30  -740.85  -129.87     1.17 S1)  ;  1, 211
  ( 1777.50  -695.65  -129.87     1.17 S1)  ;  1, 212
  ( 1814.16  -665.89  -129.87     1.17 S1)  ;  1, 213
  ( 1852.07  -653.02  -129.87     1.17 S1)  ;  1, 214
  ( 1896.07  -641.76  -129.87     1.17 S1)  ;  1, 215
  ( 1919.54  -634.52  -129.87     1.17 S1)  ;  1, 216
  ( 1928.34  -634.52  -129.87     1.17 S1)  ;  1, 217
  ( 1931.27  -634.52  -129.87     1.17 S1)  ;  1, 218
  ( 1931.27  -636.13  -129.87     1.17 S1)  ;  1, 219
  ( 1926.14  -642.56  -129.87     1.17 S1)  ;  1, 220
  ( 1910.74  -649.80  -129.87     1.17 S1)  ;  1, 221
  ( 1857.21  -684.39  -129.87     1.17 S1)  ;  1, 222
  ( 1816.14  -722.99  -129.87     1.17 S1)  ;  1, 223
  ( 1782.41  -755.97  -129.87     1.17 S1)  ;  1, 224
  ( 1742.81  -801.82  -129.87     1.17 S1)  ;  1, 225
  ( 1687.08  -866.97  -129.87     1.17 S1)  ;  1, 226
  ( 1664.35  -900.91  -129.87     1.17 S1)  ;  1, 227
  ( 1658.48  -938.71  -129.87     1.17 S1)  ;  1, 228
  ( 1629.15  -981.34  -129.87     1.17 S1)  ;  1, 229
  ( 1576.35 -1025.74  -129.87     1.17 S1)  ;  1, 230
  ( 1480.22 -1095.08  -129.87     1.17 S1)  ;  1, 231
  ( 1391.49 -1141.73  -129.87     1.17 S1)  ;  1, 232
  ( 1301.29 -1177.92  -129.87     1.17 S1)  ;  1, 233
  ( 1211.09 -1225.38  -129.87     1.17 S1)  ;  1, 234
  ( 1150.96 -1261.57  -129.87     1.17 S1)  ;  1, 235
  ( 1080.57 -1291.49  -129.87     1.17 S1)  ;  1, 236
  ( 1044.63 -1314.82  -129.87     1.17 S1)  ;  1, 237
  (  983.99 -1361.63  -129.87     1.17 S1)  ;  1, 238
  (  909.93 -1431.61  -129.87     1.17 S1)  ;  1, 239
  (  846.13 -1500.78  -129.87     1.17 S1)  ;  1, 240
  (  721.18 -1637.68  -129.87     1.17 S1)  ;  1, 241
  (  573.78 -1796.45  -129.87     1.17 S1)  ;  1, 242
  (  508.52 -1878.49  -129.87     1.17 S1)  ;  1, 243
  (  454.99 -1955.06  -129.87     1.17 S1)  ;  1, 244
  (  376.01 -1994.64  -129.87     1.17 S1)  ;  1, 245
  (  367.94 -2011.53  -129.87     1.17 S1)  ;  1, 246
  (  361.34 -2042.90  -129.87     1.17 S1)  ;  1, 247
  (  310.01 -2166.76  -129.87     1.17 S1)  ;  1, 248
  (  304.15 -2192.02  -129.87     1.17 S1)  ;  1, 249
  (  278.48 -2215.34  -129.87     1.17 S1)  ;  1, 250
  (  244.02 -2227.41  -129.87     1.17 S1)  ;  1, 251
  (  212.70 -2237.06  -129.87     1.17 S1)  ;  1, 252
  (  191.44 -2251.54  -129.87     1.17 S1)  ;  1, 253
  (  179.71 -2274.06  -129.87     1.17 S1)  ;  1, 254
  (  143.77 -2319.10  -129.87     1.17 S1)  ;  1, 255
  (  123.97 -2372.99  -129.87     1.17 S1)  ;  1, 256
  (   73.60 -2405.33  -129.87     1.17 S1)  ;  1, 257
  (   42.06 -2413.37  -129.87     1.17 S1)  ;  1, 258
  (   -8.53 -2426.24  -129.87     1.17 S1)  ;  1, 259
  (  -21.00 -2443.93  -129.87     1.17 S1)  ;  1, 260
  (  -56.93 -2505.06  -129.87     1.17 S1)  ;  1, 261
  ( -118.53 -2533.21  -129.87     1.17 S1)  ;  1, 262
  ( -250.30 -2568.12  -129.87     1.17 S1)  ;  1, 263
  ( -300.17 -2572.14  -129.87     1.17 S1)  ;  1, 264
  ( -330.23 -2585.01  -129.87     1.17 S1)  ;  1, 265
  ( -344.90 -2600.29  -129.87     1.17 S1)  ;  1, 266
  ( -401.88 -2652.58  -129.87     1.17 S1)  ;  1, 267
  ( -410.68 -2691.99  -129.87     1.17 S1)  ;  1, 268
  ( -410.68 -2721.75  -129.87     1.17 S1)  ;  1, 269
  ( -410.68 -2761.96  -129.87     1.17 S1)  ;  1, 270
  ( -380.61 -2798.96  -129.87     1.17 S1)  ;  1, 271
  ( -330.01 -2871.67  -129.87     1.17 S1)  ;  1, 272
  ( -265.48 -2940.85  -129.87     1.17 S1)  ;  1, 273
  ( -187.02 -3008.41  -129.87     1.17 S1)  ;  1, 274
  ( -124.18 -3089.00  -129.87     1.17 S1)  ;  1, 275
  (  -53.78 -3111.53  -129.87     1.17 S1)  ;  1, 276
  (   54.75 -3138.07  -129.87     1.17 S1)  ;  1, 277
  (  184.84 -3140.64  -144.11     1.17 S1)  ;  1, 278
  (  349.83 -3134.21  -144.11     1.17 S1)  ;  1, 279
  (  505.80 -3139.03  -144.11     1.17 S1)  ;  1, 280
  (  596.51 -3085.14  -144.11     1.17 S1)  ;  1, 281
  (  662.51 -3069.06  -144.11     1.17 S1)  ;  1, 282
  (  804.04 -3051.36  -144.11     1.17 S1)  ;  1, 283
  (  886.90 -3007.93  -144.11     1.17 S1)  ;  1, 284
  ( 1039.21 -2955.49  -127.94     1.17 S1)  ;  1, 285
  ( 1192.98 -2908.83  -127.94     1.17 S1)  ;  1, 286
  ( 1291.02 -2885.35  -127.94     1.17 S1)  ;  1, 287
  ( 1460.93 -2911.89  -124.91     1.17 S1)  ;  1, 288
  ( 1642.79 -2900.63  -124.91     1.17 S1)  ;  1, 289
  ( 1804.41 -2891.78  -124.91     1.17 S1)  ;  1, 290
  ( 1974.53 -2872.48  -124.91     1.17 S1)  ;  1, 291
  ( 2178.69 -2833.87  -115.10     1.17 S1)  ;  1, 292
  ( 2329.75 -2778.37  -115.29     1.17 S1)  ;  1, 293
  ( 2539.98 -2742.82  -106.92     1.17 S1)  ;  1, 294
  ( 2657.09 -2715.47  -106.92     1.17 S1)  ;  1, 295
  ( 2881.26 -2668.02  -106.92     1.17 S1)  ;  1, 296
  ( 3093.70 -2605.92  -106.92     1.17 S1)  ;  1, 297
  ( 3287.59 -2561.69  -106.92     1.17 S1)  ;  1, 298
  ( 3443.78 -2511.82  -106.92     1.17 S1)  ;  1, 299
  ( 3624.68 -2443.29  -106.92     1.17 S1)  ;  1, 300
  ( 3700.73 -2377.17  -107.26     1.17 S1)  ;  1, 301
  ( 3750.37 -2297.55  -107.26     1.17 S1)  ;  1, 302
  ( 3756.24 -2244.46  -107.26     1.17 S1)  ;  1, 303
  ( 3753.30 -2166.92  -114.65     1.17 S1)  ;  1, 304
  ( 3761.37 -2124.29  -114.65     1.17 S1)  ;  1, 305
  ( 3814.90 -2086.49  -113.81     1.17 S1)  ;  1, 306
  ( 3923.43 -2072.01  -113.81     1.17 S1)  ;  1, 307
  ( 4004.83 -2030.19  -113.81     1.17 S1)  ;  1, 308
  ( 4067.67 -2026.97  -113.81     1.17 S1)  ;  1, 309
  ( 4185.00 -2018.93  -113.81     1.17 S1)  ;  1, 310
  ( 4324.11 -2003.48  -113.81     1.17 S1)  ;  1, 311
  ( 4551.94 -1967.29  -125.52     1.17 S1)  ;  1, 312
  ( 4756.10 -1915.81  -125.52     1.17 S1)  ;  1, 313
  ( 4921.09 -1906.96  -125.52     1.17 S1)  ;  1, 314
  ( 4942.13 -1896.35  -125.52     1.17 S1)  ;  1, 315
  ( 4992.00 -1862.57  -125.52     1.17 S1)  ;  1, 316
  ( 5157.73 -1768.46  -125.52     1.17 S1)  ;  1, 317
  ( 5368.70 -1695.10  -128.74     1.17 S1)  ;  1, 318
  ( 5654.98 -1608.88  -128.74     1.17 S1)  ;  1, 319
  ( 5833.17 -1567.86  -128.74     1.17 S1)  ;  1, 320
  ( 5876.95 -1548.39  -128.74     1.17 S1)  ;  1, 321
  ( 6033.65 -1419.70  -128.74     1.17 S1)  ;  1, 322
  ( 6137.78 -1335.89  -131.16     1.17 S1)  ;  1, 323
  ( 6251.22 -1300.50  -131.16     1.17 S1)  ;  1, 324
  ( 6344.87 -1268.97  -131.16     1.17 S1)  ;  1, 325
  ( 6487.13 -1248.86  -131.16     1.17 S1)  ;  1, 326
  ( 6623.30 -1198.99  -131.16     1.17 S1)  ;  1, 327
  ( 6692.23 -1157.97  -131.16     1.17 S1)  ;  1, 328
  ( 6746.28 -1129.82  -131.16     1.17 S1)  ;  1, 329
  ( 6785.14 -1104.89  -127.15     1.17 S1)  ;  1, 330
  ( 6885.60 -1126.61  -124.84     1.17 S1)  ;  1, 331
  ( 6937.67 -1158.78  -123.70     1.17 S1)  ;  1, 332
  ( 6998.31 -1174.06  -123.70     1.17 S1)  ;  1, 333
  ( 7055.29 -1178.89  -119.42     1.17 S1)  ;  1, 334
  ( 7202.68 -1190.95  -119.42     1.17 S1)  ;  1, 335
  ( 7287.53 -1157.97  -119.42     1.17 S1)  ;  1, 336
  ( 7400.46 -1109.71  -119.42     1.17 S1)  ;  1, 337
  ( 7580.63 -1026.71  -118.21     1.17 S1)  ;  1, 338
  ( 7719.22  -974.43  -118.21     1.17 S1)  ;  1, 339
  ( 7796.73  -926.81  -117.26     1.17 S1)  ;  1, 340
  ( 7839.26  -848.79  -117.26     1.17 S1)  ;  1, 341
  ( 7867.64  -742.46  -113.40     1.17 S1)  ;  1, 342
  ( 7891.11  -537.84  -135.71     1.17 S1)  ;  1, 343
  ( 7891.84  -454.99  -135.71     1.17 S1)  ;  1, 344
  ( 7875.71  -264.05  -132.94     1.17 S1)  ;  1, 345
  ( 7840.51  -138.25  -132.94     1.17 S1)  ;  1, 346
  ( 7843.44    21.01  -127.98     1.17 S1)  ;  1, 347
  ( 7795.78   147.45  -110.82     1.17 S1)  ;  1, 348
  ( 7751.05   299.63  -110.82     1.17 S1)  ;  1, 349
  ( 7714.38   420.44  -110.82     1.17 S1)  ;  1, 350
  ( 7609.01   555.73  -110.82     1.17 S1)  ;  1, 351
  ( 7509.28   676.54  -110.82     1.17 S1)  ;  1, 352
  ( 7376.26   748.28   -97.94     1.17 S1)  ;  1, 353
  ( 7278.73   807.00   -96.16     1.17 S1)  ;  1, 354
  ( 7178.26   885.98   -91.92     1.17 S1)  ;  1, 355
  ( 7111.53   938.26   -89.54     1.17 S1)  ;  1, 356
  ( 7027.42   981.05   -84.16     1.17 S1)  ;  1, 357
  ( 6927.70  1043.79   -83.59     1.17 S1)  ;  1, 358
  ( 6776.34  1089.80   -81.28     1.17 S1)  ;  1, 359
  ( 6645.81  1118.75   -79.46     1.17 S1)  ;  1, 360
  ( 6543.15  1146.91   -78.89     1.17 S1)  ;  1, 361
  ( 6426.04  1163.80   -77.68     1.17 S1)  ;  1, 362
  ( 6278.87  1222.67   -76.39     1.17 S1)  ;  1, 363
  ( 6163.74  1268.52   -75.56     1.17 S1)  ;  1, 364
  ( 6048.10  1282.19   -72.30     1.17 S1)  ;  1, 365
  ( 5928.79  1311.31   -68.44     1.17 S1)  ;  1, 366
  ( 5801.93  1337.05   -64.58     1.17 S1)  ;  1, 367
  ( 5591.18  1376.46   -62.87     1.17 S1)  ;  1, 368
  ( 5449.65  1398.98   -61.77     1.17 S1)  ;  1, 369
  ( 5266.55  1407.19   -61.36     1.17 S1)  ;  1, 370
  ( 5191.75  1409.60   -60.41     1.17 S1)  ;  1, 371
  ( 5112.77  1409.60   -57.68     1.17 S1)  ;  1, 372
  ( 5029.91  1418.45   -52.46     1.17 S1)  ;  1, 373
  ( 4863.89  1424.08   -57.68     1.17 S1)  ;  1, 374
  ( 4750.96  1425.69   -55.07     1.17 S1)  ;  1, 375
  ( 4646.83  1434.53   -53.44     1.17 S1)  ;  1, 376
  ( 4466.88  1447.40   -47.84     1.17 S1)  ;  1, 377
  ( 4334.15  1453.84   -47.04     1.17 S1)  ;  1, 378
  ( 4081.60  1454.64   -39.50     1.17 S1)  ;  1, 379
  ( 3921.01  1459.47   -38.03     1.17 S1)  ;  1, 380
  ( 3691.93  1454.64   -25.75     1.17 S1)  ;  1, 381
  ( 3552.60  1456.25   -24.20     1.17 S1)  ;  1, 382
  ( 3191.74  1415.23   -24.20     1.17 S1)  ;  1, 383
  ( 3058.28  1396.73   -24.09     1.17 S1)  ;  1, 384
  ( 2946.09  1385.47   -22.76     1.17 S1)  ;  1, 385
  ( 2806.98  1365.36   -25.75     1.17 S1)  ;  1, 386
  ( 2640.74  1315.33   -22.80     1.17 S1)  ;  1, 387
  ( 2537.56  1274.31   -19.09     1.17 S1)  ;  1, 388
  ( 2495.77  1269.49   -18.48     1.17 S1)  ;  1, 389
  ( 2402.64  1261.44   -17.54     1.17 S1)  ;  1, 390
  ( 2305.33  1285.57   -17.50     1.17 S1)  ;  1, 391
  ( 2193.87  1311.31   -16.82     1.17 S1)  ;  1, 392
  ( 2115.62  1329.81   -16.10     1.17 S1)  ;  1, 393
  ( 2007.83  1316.94   -14.47     1.17 S1)  ;  1, 394
  ( 1897.32  1308.90   -14.35     1.17 S1)  ;  1, 395
  ( 1821.06  1300.05   -13.48     1.17 S1)  ;  1, 396
  ( 1712.01  1280.75   -12.16     1.17 S1)  ;  1, 397
  ( 1637.95  1270.29   -10.87     1.17 S1)  ;  1, 398
  ( 1519.37  1256.62   -10.23     1.17 S1)  ;  1, 399
  ( 1421.85  1262.25   -10.00     1.17 S1)  ;  1, 400
  ( 1343.82  1263.05   -10.00     1.17 S1)  ;  1, 401
  ( 1261.69  1251.79    -9.39     1.17 S1)  ;  1, 402
  ( 1177.36  1235.70    -8.71     1.17 S1)  ;  1, 403
  ( 1070.30  1211.57    -7.61     1.17 S1)  ;  1, 404
  (  972.26  1213.99    -7.42     1.17 S1)  ;  1, 405
  (  875.46  1217.20    -6.25     1.17 S1)  ;  1, 406
  (  836.60  1221.23    -5.76     1.17 S1)  ;  1, 407
  (  739.51  1226.86    -5.53     1.17 S1)  ;  1, 408
  (  657.38  1222.83    -5.00     1.17 S1)  ;  1, 409
  (  498.25  1206.75    -4.89     1.17 S1)  ;  1, 410
  (  423.67  1201.76    -4.89     1.17 S1)  ;  1, 411
  (  351.08  1187.28    -4.89     1.17 S1)  ;  1, 412
  (  327.10  1188.89    -4.20     1.17 S1)  ;  1, 413
  (  272.83  1225.89    -3.64     1.17 S1)  ;  1, 414
  (  210.50  1244.39    -3.07     1.17 S1)  ;  1, 415
  (  153.31  1250.83    -2.31     1.17 S1)  ;  1, 416
  (  112.97  1251.63    -0.57     1.17 S1)  ;  1, 417
  (   96.11  1254.04     0.27     1.17 S1)  ;  1, 418 Closure point
)  ;  End of contour


("CellBody"
  (Color RGB (0, 255, 64))
  (CellBody)
  (   38.02    25.30   -50.25     0.26 S1)  ;  3, 1
  (   35.45    22.74   -50.25     0.26 S1)  ;  3, 2
  (   33.91    20.18   -50.25     0.26 S1)  ;  3, 3
  (   34.42    17.34   -50.25     0.26 S1)  ;  3, 4
  (   35.96    14.79   -50.25     0.26 S1)  ;  3, 5
  (   37.76    12.51   -50.25     0.26 S1)  ;  3, 6
  (   39.56    11.09   -50.25     0.26 S1)  ;  3, 7
  (   43.16     9.96   -50.25     0.26 S1)  ;  3, 8
  (   46.51     9.10   -50.25     0.26 S1)  ;  3, 9
  (   49.34    10.24   -50.25     0.26 S1)  ;  3, 10
  (   52.94    12.51   -50.25     0.26 S1)  ;  3, 11
  (   55.76    14.50   -50.25     0.26 S1)  ;  3, 12
  (   57.56    16.77   -50.25     0.26 S1)  ;  3, 13
  (   56.54    20.75   -50.25     0.26 S1)  ;  3, 14
  (   55.25    23.88   -50.25     0.26 S1)  ;  3, 15
  (   53.45    25.30   -50.25     0.26 S1)  ;  3, 16
  (   50.88    26.43   -50.25     0.26 S1)  ;  3, 17
  (   47.02    27.29   -50.25     0.26 S1)  ;  3, 18
  (   43.42    26.72   -50.25     0.26 S1)  ;  3, 19
  (   40.34    26.15   -50.25     0.26 S1)  ;  3, 20
)  ;  End of contour

( (Color Orange)
  (Axon)
  (   46.27     9.75   -52.42     0.29 S1)  ; Root
  (   46.57     7.19   -50.20     1.46 S1)  ; 1, R
  (   46.86     4.31   -48.75     1.46 S1)  ; 2
  (   47.15     1.42   -47.02     1.46 S1)  ; 3
  (   47.15    -1.78   -45.05     1.46 S1)  ; 4
  (   47.44    -4.98   -41.85     1.46 S1)  ; 5
  (   47.44    -8.50   -41.60     1.17 S1)  ; 6
  (   48.32   -12.02   -41.60     1.17 S1)  ; 7
  (   48.90   -15.55   -41.60     1.17 S1)  ; 8
  (   48.90   -18.75   -41.50     1.17 S1)  ; 9
  (   48.03   -21.31   -41.47     1.17 S1)  ; 10
  (   48.32   -24.19   -41.20     1.17 S1)  ; 11
  (   47.44   -27.07   -41.05     1.17 S1)  ; 12
  (   47.15   -30.60   -39.85     1.17 S1)  ; 13
   Incomplete
)  ;  End of tree

( (Color DarkRed)
  (Dendrite)
  (   56.41    20.23   -50.25     0.58 S1)  ; Root
  (   57.87    20.55   -50.25     1.17 S1)  ; 1, R
  (   61.37    21.51   -49.35     1.17 S1)  ; 2
  (   63.71    22.15   -51.15     1.17 S1)  ; 3
  (   66.63    21.19   -52.40     1.17 S1)  ; 4
  (   69.84    19.59   -48.02     1.17 S1)  ; 5
  (   71.29    18.31   -45.13     1.17 S1)  ; 6
  (   74.67    18.98   -44.58     1.17 S1)  ; 7
  (
    (   78.46    19.30   -42.47     0.88 S1)  ; 1, R-1
    (   81.38    20.26   -40.38     0.88 S1)  ; 2
    (   84.00    19.94   -44.27     0.88 S1)  ; 3
    (   86.05    19.94   -44.27     0.88 S1)  ; 4
    (   86.41    19.89   -44.30     0.88 S1)  ; 5

    (Cross
      (Color DarkRed)
      (Name "Marker 3")
      (   80.50    19.30   -40.38     0.88 S1)  ; 1
      (   82.31    19.66   -49.75     0.58 S1)  ; 2
      (   84.36    20.94   -49.75     0.58 S1)  ; 3
    )  ;  End of markers
    (
      (   88.04    24.20   -43.30     0.58 S1)  ; 1, R-1-1
      (   89.79    26.76   -42.80     0.58 S1)  ; 2
      (   90.08    29.01   -42.40     0.58 S1)  ; 3
      (   91.83    29.65   -41.80     0.58 S1)  ; 4
      (   94.46    31.57   -41.73     0.58 S1)  ; 5
      (   95.34    33.49   -44.65     0.58 S1)  ; 6
      (   97.67    34.45   -43.02     0.58 S1)  ; 7
      (  100.30    37.33   -39.85     0.58 S1)  ; 8
      (  102.63    38.93   -39.60     0.58 S1)  ; 9
      (  103.51    41.49   -39.08     0.58 S1)  ; 10
      (  104.38    43.10   -38.13     0.58 S1)  ; 11
      (  106.72    44.38   -34.72     0.58 S1)  ; 12
      (  109.05    45.98   -33.35     0.58 S1)  ; 13
      (  111.09    47.90   -33.40     0.58 S1)  ; 14
      (  110.51    49.18   -31.30     0.58 S1)  ; 15
      (  111.97    50.46   -29.22     0.58 S1)  ; 16
      (  113.43    51.74   -28.85     0.58 S1)  ; 17
      (  116.64    53.34   -28.75     0.58 S1)  ; 18
      (  119.56    55.58   -28.05     0.58 S1)  ; 19
      (  122.18    57.18   -25.13     0.58 S1)  ; 20
      (  123.64    59.11   -23.65     0.58 S1)  ; 21
      (  125.39    62.63   -23.37     0.58 S1)  ; 22
      (  125.10    64.55   -23.02     0.58 S1)  ; 23
      (  125.39    66.47   -30.60     0.58 S1)  ; 24
      (  126.27    68.39   -29.75     0.58 S1)  ; 25
      (  127.44    69.67   -32.52     0.58 S1)  ; 26
      (  129.30    73.78   -30.87     0.58 S1)  ; 27
      (  130.46    76.34   -31.35     0.58 S1)  ; 28
      (  130.17    79.22   -31.98     0.58 S1)  ; 29
      (  132.51    81.46   -32.13     0.58 S1)  ; 30
      (  135.13    82.74   -32.60     0.58 S1)  ; 31
      (  135.13    85.31   -32.70     0.58 S1)  ; 32
      (  137.18    88.19   -33.35     0.58 S1)  ; 33
      (  138.34    90.75   -33.50     0.58 S1)  ; 34
      (  137.47    92.99   -29.20     0.58 S1)  ; 35
      (  137.76    95.23   -27.38     0.58 S1)  ; 36
      (  139.80    96.83   -24.48     0.58 S1)  ; 37
      (  140.39    99.72   -22.22     0.29 S1)  ; 38
      (  138.93   102.60   -20.07     0.29 S1)  ; 39
      (  140.09   104.20   -19.55     0.29 S1)  ; 40
      (  142.14   106.12   -19.55     0.29 S1)  ; 41
      (  141.85   108.36   -19.40     0.29 S1)  ; 42
      (  143.01   110.28   -19.17     0.29 S1)  ; 43
      (  145.06   110.60   -16.32     0.29 S1)  ; 44
      (  146.51   111.88   -14.95     0.29 S1)  ; 45
      (  146.81   114.45   -14.88     0.29 S1)  ; 46
      (  148.27   116.37   -13.63     0.29 S1)  ; 47

      (Cross
        (Color DarkRed)
        (Name "Marker 3")
        (   99.42    37.97   -39.85     0.58 S1)  ; 1
        (  100.59    38.93   -39.85     0.58 S1)  ; 2
        (  100.88    37.01   -39.85     0.58 S1)  ; 3
        (   95.34    35.09   -48.22     0.58 S1)  ; 4
        (   94.75    34.13   -48.22     0.58 S1)  ; 5
        (   94.46    32.85   -48.22     0.58 S1)  ; 6
        (   95.63    33.17   -49.52     0.58 S1)  ; 7
        (   95.34    32.21   -49.52     0.58 S1)  ; 8
        (   94.46    29.97   -41.77     0.58 S1)  ; 9
        (   93.29    32.21   -41.77     0.58 S1)  ; 10
        (   88.92    29.65   -41.77     0.58 S1)  ; 11
        (   90.08    29.65   -41.77     0.58 S1)  ; 12
        (   88.62    25.80   -42.77     0.58 S1)  ; 13
        (  107.59    45.66   -33.27     0.58 S1)  ; 14
        (  108.76    43.74   -33.27     0.58 S1)  ; 15
        (  104.67    44.38   -37.15     0.58 S1)  ; 16
        (  102.92    41.17   -41.90     0.58 S1)  ; 17
        (  104.97    41.17   -45.38     0.58 S1)  ; 18
        (  102.92    43.10   -45.38     0.58 S1)  ; 19
        (  110.22    45.34   -33.40     0.58 S1)  ; 20
        (  109.34    50.14   -31.30     0.58 S1)  ; 21
        (  111.97    48.54   -31.30     0.58 S1)  ; 22
        (  119.27    54.62   -28.05     0.58 S1)  ; 23
        (  118.39    55.90   -28.05     0.58 S1)  ; 24
        (  115.47    54.30   -28.05     0.58 S1)  ; 25
        (  114.30    51.10   -28.05     0.58 S1)  ; 26
        (  124.23    61.99   -23.02     0.58 S1)  ; 27
        (  125.98    61.67   -23.02     0.58 S1)  ; 28
        (  123.64    60.39   -23.02     0.58 S1)  ; 29
        (  125.10    58.47   -23.02     0.58 S1)  ; 30
        (  121.89    56.22   -30.87     0.58 S1)  ; 31
        (  121.60    58.47   -23.90     0.58 S1)  ; 32
        (  124.52    64.55   -27.32     0.58 S1)  ; 33
        (  125.98    65.51   -27.32     0.58 S1)  ; 34
        (  125.69    63.91   -27.32     0.58 S1)  ; 35
        (  124.23    65.83   -27.47     0.58 S1)  ; 36
        (  124.23    67.11   -27.47     0.58 S1)  ; 37
        (  125.69    69.03   -27.47     0.58 S1)  ; 38
        (  128.02    72.23   -33.13     0.58 S1)  ; 39
        (  130.06    72.23   -33.13     0.58 S1)  ; 40
        (  128.60    69.03   -33.13     0.58 S1)  ; 41
        (  136.88    96.51   -27.35     0.58 S1)  ; 42
        (  139.80    95.55   -27.38     0.58 S1)  ; 43
        (  140.09    93.31   -27.38     0.58 S1)  ; 44
        (  137.76    90.75   -27.38     0.58 S1)  ; 45
        (  136.59    86.91   -36.27     0.58 S1)  ; 46
        (  136.59    83.06   -32.70     0.58 S1)  ; 47
        (  135.72    82.10   -29.75     0.58 S1)  ; 48
        (  132.51    81.46   -29.77     0.58 S1)  ; 49
        (  131.63    81.14   -29.77     0.58 S1)  ; 50
        (  128.71    76.02   -29.77     0.58 S1)  ; 51
        (  131.05    74.42   -29.77     0.58 S1)  ; 52
        (  130.17    78.26   -29.77     0.58 S1)  ; 53
        (  132.22    77.62   -29.77     0.58 S1)  ; 54
        (  136.88    86.59   -32.50     0.58 S1)  ; 55
        (  140.39   105.80   -19.75     0.29 S1)  ; 56
        (  140.09   104.52   -19.75     0.29 S1)  ; 57
        (  139.51   102.92   -19.75     0.29 S1)  ; 58
        (  138.34   101.32   -25.67     0.29 S1)  ; 59
        (  139.80    99.72   -25.67     0.29 S1)  ; 60
        (  140.97    98.44   -24.00     0.29 S1)  ; 61
        (  145.35   111.56   -14.55     0.29 S1)  ; 62
        (  147.97   115.09   -14.55     0.29 S1)  ; 63
        (  147.39   111.56   -20.10     0.29 S1)  ; 64
        (  148.56   112.84   -20.10     0.29 S1)  ; 65
        (  141.55   109.32   -20.10     0.29 S1)  ; 66
        (  142.43   107.08   -20.10     0.29 S1)  ; 67
      )  ;  End of markers
       Normal
    |
      (   89.04    20.21   -41.38     0.88 S1)  ; 1, R-1-2
      (   92.54    20.21   -41.08     0.88 S1)  ; 2
      (
        (   94.87    20.21   -34.08     0.58 S1)  ; 1, R-1-2-1
        (   97.21    20.21   -30.92     0.58 S1)  ; 2
        (   98.37    19.89   -27.17     0.58 S1)  ; 3
        (   98.37    18.61   -24.90     0.58 S1)  ; 4
        (  100.71    16.04   -23.10     0.58 S1)  ; 5
        (  101.00    14.12   -21.42     0.58 S1)  ; 6
        (  102.46    12.84   -20.05     0.58 S1)  ; 7
        (  105.09    11.88   -17.38     0.58 S1)  ; 8
        (  106.55    11.24   -15.07     0.58 S1)  ; 9
        (  107.71    12.20   -12.42     0.58 S1)  ; 10
        (  107.13     9.96    -7.80     0.58 S1)  ; 11
        (  108.88     9.64    -6.20     0.58 S1)  ; 12
        (  110.63     9.32    -2.57     0.58 S1)  ; 13
        (  112.09     8.36     1.67     0.58 S1)  ; 14
        (  111.21     6.76     5.45     0.58 S1)  ; 15
        (  110.92     4.84     7.30     0.58 S1)  ; 16
        (  112.97     2.60     7.65     0.58 S1)  ; 17
        (  114.72     0.99     7.77     0.58 S1)  ; 18
        (  114.13    -1.89     8.55     0.58 S1)  ; 19
        (  114.72    -4.77     8.60     0.58 S1)  ; 20
        (  115.30    -8.61     8.93     0.58 S1)  ; 21
        (  115.88   -11.49     9.55     0.58 S1)  ; 22
        (  116.76   -14.06     9.95     0.58 S1)  ; 23
        (  119.68   -15.34    10.30     0.58 S1)  ; 24
        (  121.43   -15.98    11.93     0.58 S1)  ; 25
        (  123.18   -15.98    12.38     0.29 S1)  ; 26
        (  123.18   -17.26    15.00     0.29 S1)  ; 27
        (  124.64   -17.90    15.15     0.29 S1)  ; 28

        (Cross
          (Color DarkRed)
          (Name "Marker 3")
          (   94.00    21.49   -36.72     0.58 S1)  ; 1
          (   99.25    19.57   -24.80     0.58 S1)  ; 2
          (   97.79    17.97   -23.10     0.58 S1)  ; 3
          (   99.83    18.29   -23.10     0.58 S1)  ; 4
          (  100.42    18.29   -23.10     0.58 S1)  ; 5
          (  100.13    17.65   -23.10     0.58 S1)  ; 6
          (  102.17    15.40   -22.90     0.58 S1)  ; 7
          (  100.71    14.44   -20.52     0.58 S1)  ; 8
          (  101.00    12.20   -17.38     0.58 S1)  ; 9
          (  102.75    11.88   -17.38     0.58 S1)  ; 10
          (  105.38    13.16   -17.38     0.58 S1)  ; 11
          (  103.63    13.80   -17.38     0.58 S1)  ; 12
          (  106.25    12.84   -15.00     0.58 S1)  ; 13
          (  107.42    10.28   -15.00     0.58 S1)  ; 14
          (  108.59    12.20    -2.57     0.58 S1)  ; 15
          (  109.76    11.88    -2.57     0.58 S1)  ; 16
          (  111.21     9.64     1.67     0.58 S1)  ; 17
          (  109.46     9.00     1.67     0.58 S1)  ; 18
          (  112.97     9.00     5.45     0.58 S1)  ; 19
          (  109.46     5.48     7.65     0.58 S1)  ; 20
          (  110.05     4.84     7.65     0.58 S1)  ; 21
          (  110.34     3.88     7.65     0.58 S1)  ; 22
          (  113.26     4.52     7.65     0.58 S1)  ; 23
          (  112.97     4.20     8.23     0.58 S1)  ; 24
          (  112.09     2.60     8.23     0.58 S1)  ; 25
          (  115.30     0.67     8.23     0.58 S1)  ; 26
          (  112.97    -0.93     8.23     0.58 S1)  ; 27
          (  117.63   -12.13    10.30     0.58 S1)  ; 28
          (  118.80   -13.74    10.30     0.58 S1)  ; 29
          (  115.88    -7.97     4.85     0.58 S1)  ; 30
          (  116.47   -10.21     4.85     0.58 S1)  ; 31
          (  125.22   -16.94    15.20     0.29 S1)  ; 32
          (  119.09   -16.62     4.10     0.29 S1)  ; 33
        )  ;  End of markers
         Normal
      |
        (   95.16    22.45   -43.33     0.58 S1)  ; 1, R-1-2-2
        (   99.83    23.41   -43.45     0.58 S1)  ; 2
        (  102.46    22.77   -44.07     0.58 S1)  ; 3
        (  105.96    21.81   -43.45     0.58 S1)  ; 4
        (  110.34    20.85   -46.45     0.58 S1)  ; 5
        (  113.55    19.25   -46.97     0.58 S1)  ; 6
        (  115.59    17.01   -48.70     0.58 S1)  ; 7
        (  118.80    17.33   -49.67     0.58 S1)  ; 8
        (  122.30    16.36   -51.85     0.58 S1)  ; 9
        (  123.47    14.12   -52.08     0.58 S1)  ; 10
        (  124.64    11.56   -52.47     0.58 S1)  ; 11
        (  128.43    10.28   -53.45     0.58 S1)  ; 12
        (  131.35     9.00   -53.45     0.58 S1)  ; 13
        (  135.73     6.76   -54.60     0.58 S1)  ; 14
        (  139.23     6.12   -56.28     0.58 S1)  ; 15
        (  141.56     3.88   -57.35     0.58 S1)  ; 16
        (  145.06     2.60   -57.57     0.58 S1)  ; 17
        (  149.15     2.28   -58.13     0.58 S1)  ; 18
        (  150.32     0.67   -53.35     0.58 S1)  ; 19
        (  154.40    -0.29   -52.35     0.58 S1)  ; 20
        (  157.90    -2.85   -51.65     0.58 S1)  ; 21
        (  161.11    -2.85   -52.00     0.58 S1)  ; 22
        (  164.32    -3.49   -50.30     0.58 S1)  ; 23
        (  167.83    -3.81   -46.65     0.58 S1)  ; 24
        (  169.58    -3.49   -46.00     0.58 S1)  ; 25
        (  172.50    -4.77   -46.28     0.29 S1)  ; 26
        (  175.41    -6.05   -49.35     0.29 S1)  ; 27
        (  179.50    -6.69   -50.20     0.29 S1)  ; 28
        (  184.46    -7.01   -51.00     0.29 S1)  ; 29
        (  185.92    -8.29   -51.12     0.29 S1)  ; 30
        (  189.13    -8.29   -51.12     0.29 S1)  ; 31
        (  191.76   -10.21   -51.32     0.29 S1)  ; 32
        (  194.97   -11.49   -53.25     0.29 S1)  ; 33
        (  197.01   -13.09   -54.38     0.29 S1)  ; 34
        (  199.63   -14.06   -54.43     0.29 S1)  ; 35
        (  203.14   -15.34   -54.58     0.29 S1)  ; 36
        (  205.18   -16.62   -54.83     0.29 S1)  ; 37
        (  206.35   -15.98   -51.40     0.29 S1)  ; 38
        (  208.97   -15.98   -50.85     0.29 S1)  ; 39
        (  210.43   -17.26   -50.90     0.29 S1)  ; 40
        (  213.06   -19.50   -51.60     0.29 S1)  ; 41
        (  215.98   -20.78   -56.17     0.29 S1)  ; 42
        (  218.89   -22.70   -56.32     0.29 S1)  ; 43
        (  220.35   -24.94   -54.25     0.29 S1)  ; 44
        (  220.64   -27.82   -53.88     0.29 S1)  ; 45
        (  219.77   -31.67   -54.10     0.29 S1)  ; 46
        (  220.35   -33.59   -52.82     0.29 S1)  ; 47
        (  221.23   -36.15   -52.08     0.29 S1)  ; 48
        (  221.23   -38.71   -50.25     0.29 S1)  ; 49
        (  220.94   -40.63   -49.67     0.29 S1)  ; 50
        (  219.77   -42.87   -48.20     0.29 S1)  ; 51
        (  222.98   -44.16   -46.50     0.29 S1)  ; 52
        (  224.73   -46.40   -46.30     0.29 S1)  ; 53
        (  226.19   -47.68   -45.13     0.29 S1)  ; 54
        (  227.36   -49.60   -43.95     0.29 S1)  ; 55

        (Cross
          (Color DarkRed)
          (Name "Marker 3")
          (   94.00    22.45   -43.45     0.58 S1)  ; 1
          (   99.54    23.41   -44.10     0.58 S1)  ; 2
        )  ;  End of markers

        (Cross
          (Color RGB (0, 128, 192))
          (Name "Marker 3")
          (  103.92    20.53   -43.45     0.58 S1)  ; 1
          (   99.83    23.73   -43.45     0.58 S1)  ; 2
          (  110.05    18.93   -48.70     0.58 S1)  ; 3
          (  113.84    20.21   -42.88     0.58 S1)  ; 4
          (  110.34    21.81   -42.75     0.58 S1)  ; 5
          (  110.05    21.17   -40.80     0.58 S1)  ; 6
          (  111.21    21.17   -40.80     0.58 S1)  ; 7
          (  106.55    20.85   -40.80     0.58 S1)  ; 8
          (  132.81     6.76   -53.45     0.58 S1)  ; 9
          (  132.52     8.68   -53.45     0.58 S1)  ; 10
          (  130.47     9.96   -52.67     0.58 S1)  ; 11
          (  125.51    10.28   -51.85     0.58 S1)  ; 12
          (  127.56    11.88   -50.17     0.58 S1)  ; 13
          (  125.51    13.48   -50.17     0.58 S1)  ; 14
          (  124.93    15.08   -50.17     0.58 S1)  ; 15
          (  122.60    15.08   -46.10     0.58 S1)  ; 16
          (  122.89    12.20   -46.10     0.58 S1)  ; 17
          (  122.30    15.08   -45.35     0.58 S1)  ; 18
          (  135.73     5.48   -49.38     0.58 S1)  ; 19
          (  138.35     7.08   -56.05     0.58 S1)  ; 20
          (  142.44     5.16   -56.42     0.58 S1)  ; 21
          (  143.61     4.20   -58.13     0.58 S1)  ; 22
          (  145.36     1.64   -58.42     0.58 S1)  ; 23
          (  150.61     2.28   -58.42     0.58 S1)  ; 24
          (  154.11     0.99   -58.42     0.58 S1)  ; 25
          (  154.11    -0.93   -59.22     0.58 S1)  ; 26
          (  158.20    -4.13   -54.22     0.58 S1)  ; 27
          (  185.34    -9.25   -51.32     0.29 S1)  ; 28
          (  185.63    -7.01   -51.32     0.29 S1)  ; 29
          (  182.71    -7.65   -52.92     0.29 S1)  ; 30
          (  178.92    -6.05   -48.88     0.29 S1)  ; 31
          (  180.08    -8.29   -48.88     0.29 S1)  ; 32
          (  182.42    -7.97   -48.88     0.29 S1)  ; 33
          (  180.67    -5.73   -46.82     0.29 S1)  ; 34
          (  166.66    -4.45   -51.45     0.29 S1)  ; 35
          (  168.41    -4.45   -51.45     0.29 S1)  ; 36
          (  174.83    -7.01   -51.45     0.29 S1)  ; 37
          (  187.67    -7.33   -50.10     0.29 S1)  ; 38
          (  190.00    -7.97   -50.10     0.29 S1)  ; 39
          (  191.76    -8.93   -50.10     0.29 S1)  ; 40
          (  209.26   -15.34   -51.60     0.29 S1)  ; 41
          (  208.97   -17.26   -51.60     0.29 S1)  ; 42
          (  207.51   -15.02   -51.60     0.29 S1)  ; 43
          (  200.51   -15.66   -54.30     0.29 S1)  ; 44
          (  203.43   -14.70   -54.30     0.29 S1)  ; 45
          (  193.21    -9.57   -52.28     0.29 S1)  ; 46
          (  220.64   -27.82   -53.88     0.29 S1)  ; 47
          (  220.94   -24.94   -52.35     0.29 S1)  ; 48
          (  219.77   -23.02   -52.35     0.29 S1)  ; 49
          (  212.18   -19.82   -51.22     0.29 S1)  ; 50
          (  213.35   -20.14   -51.22     0.29 S1)  ; 51
          (  215.10   -20.78   -51.22     0.29 S1)  ; 52
          (  216.85   -20.46   -51.22     0.29 S1)  ; 53
          (  220.94   -41.59   -48.20     0.29 S1)  ; 54
          (  220.94   -37.11   -48.20     0.29 S1)  ; 55
          (  222.40   -37.11   -52.90     0.29 S1)  ; 56
          (  221.81   -36.15   -52.90     0.29 S1)  ; 57
          (  221.52   -34.23   -52.90     0.29 S1)  ; 58
          (  219.19   -30.39   -54.70     0.29 S1)  ; 59
          (  219.48   -32.95   -54.70     0.29 S1)  ; 60
          (  228.52   -51.20   -47.22     0.29 S1)  ; 61
          (  226.77   -47.36   -46.03     0.29 S1)  ; 62
          (  225.61   -47.68   -46.03     0.29 S1)  ; 63
          (  223.27   -46.08   -45.70     0.29 S1)  ; 64
          (  221.23   -41.59   -52.40     0.29 S1)  ; 65
          (  227.06   -49.92   -48.27     0.29 S1)  ; 66
          (  227.94   -49.28   -48.27     0.29 S1)  ; 67
          (  221.81   -43.19   -51.65     0.29 S1)  ; 68
        )  ;  End of markers
         Normal
      )  ;  End of split
    )  ;  End of split
  |
    (   76.77    18.70   -48.58     0.58 S1)  ; 1, R-2
    (   78.81    19.98   -52.40     0.58 S1)  ; 2
    (   80.86    20.94   -53.27     0.58 S1)  ; 3
    (   84.07    20.94   -54.38     0.58 S1)  ; 4
    (   88.15    23.19   -52.10     0.58 S1)  ; 5
    (   91.65    24.47   -54.45     0.58 S1)  ; 6
    (   93.11    26.07   -54.45     0.29 S1)  ; 7
    (   96.91    26.71   -54.25     0.29 S1)  ; 8
    (  101.57    27.35   -54.25     0.29 S1)  ; 9
    (  105.66    27.99   -51.88     0.29 S1)  ; 10
    (  109.16    27.67   -51.65     0.29 S1)  ; 11
    (  112.66    27.03   -49.70     0.58 S1)  ; 12
    (  114.41    26.71   -49.70     0.58 S1)  ; 13
    (  116.46    28.31   -49.47     0.58 S1)  ; 14
    (  119.96    28.31   -49.00     0.58 S1)  ; 15
    (  123.75    28.95   -48.78     0.58 S1)  ; 16
    (  127.55    28.63   -47.33     0.58 S1)  ; 17
    (  130.76    27.67   -47.33     0.58 S1)  ; 18
    (  133.38    27.99   -49.07     0.58 S1)  ; 19
    (  136.88    28.95   -48.88     0.58 S1)  ; 20
    (  140.09    28.95   -48.50     0.58 S1)  ; 21
    (  142.72    27.99   -48.15     0.58 S1)  ; 22
    (  146.22    28.63   -47.90     0.58 S1)  ; 23
    (  148.85    29.91   -47.02     0.29 S1)  ; 24
    (  150.02    31.51   -45.80     0.29 S1)  ; 25
    (  152.93    32.79   -43.92     0.29 S1)  ; 26
    (  154.10    33.43   -40.92     0.29 S1)  ; 27
    (  154.98    34.71   -39.72     0.29 S1)  ; 28
    (  155.85    36.31   -37.17     0.29 S1)  ; 29
    (  156.44    36.95   -35.00     0.29 S1)  ; 30
    (  158.77    37.91   -32.83     0.29 S1)  ; 31
    (  161.10    39.52   -32.38     0.29 S1)  ; 32
    (  163.36    40.70   -31.92     0.29 S1)  ; 33
    (  163.95    43.58   -31.15     0.29 S1)  ; 34
    (  164.82    44.86   -29.70     0.29 S1)  ; 35
    (  166.28    46.14   -29.58     0.29 S1)  ; 36
    (  168.61    47.74   -27.65     0.29 S1)  ; 37
    (  169.49    49.34   -26.85     0.29 S1)  ; 38
    (  170.37    50.94   -24.13     0.29 S1)  ; 39
    (  173.58    51.90   -24.05     0.29 S1)  ; 40
    (  175.03    53.83   -24.05     0.29 S1)  ; 41

    (Cross
      (Color DarkRed)
      (Name "Marker 3")
      (   89.90    22.54   -52.10     0.58 S1)  ; 1
      (   89.61    25.11   -52.10     0.58 S1)  ; 2
      (  108.87    26.07   -51.65     0.29 S1)  ; 3
      (  108.58    28.31   -51.65     0.29 S1)  ; 4
      (  106.24    29.59   -51.65     0.29 S1)  ; 5
      (  105.37    27.03   -51.65     0.29 S1)  ; 6
      (  101.87    26.39   -51.65     0.29 S1)  ; 7
      (  100.41    27.99   -51.65     0.29 S1)  ; 8
      (  131.92    29.27   -47.33     0.58 S1)  ; 9
      (  133.09    27.67   -47.33     0.58 S1)  ; 10
      (  124.04    29.91   -49.58     0.58 S1)  ; 11
      (  119.67    28.95   -53.60     0.58 S1)  ; 12
      (  119.67    27.67   -54.65     0.58 S1)  ; 13
      (  146.51    29.59   -47.90     0.58 S1)  ; 14
      (  144.76    27.35   -47.90     0.58 S1)  ; 15
      (  142.43    27.03   -52.50     0.58 S1)  ; 16
      (  140.97    29.59   -52.50     0.58 S1)  ; 17
      (  140.09    27.67   -52.50     0.58 S1)  ; 18
      (  135.72    27.67   -52.75     0.58 S1)  ; 19
      (  154.69    32.15   -47.22     0.29 S1)  ; 20
      (  152.06    33.75   -47.22     0.29 S1)  ; 21
      (  149.14    29.59   -51.72     0.29 S1)  ; 22
      (  157.31    35.99   -35.00     0.29 S1)  ; 23
      (  156.73    37.59   -35.00     0.29 S1)  ; 24
      (  159.65    36.63   -32.38     0.29 S1)  ; 25
      (  158.19    38.24   -32.38     0.29 S1)  ; 26
      (  163.36    42.94   -29.58     0.29 S1)  ; 27
      (  164.53    45.82   -29.58     0.29 S1)  ; 28
      (  165.70    43.90   -34.47     0.29 S1)  ; 29
      (  163.65    40.38   -38.50     0.29 S1)  ; 30
      (  161.90    39.74   -38.50     0.29 S1)  ; 31
      (  167.45    47.42   -31.63     0.29 S1)  ; 32
      (  165.70    47.42   -31.63     0.29 S1)  ; 33
      (  172.99    50.94   -24.05     0.29 S1)  ; 34
      (  169.49    49.66   -24.05     0.29 S1)  ; 35
      (  169.20    51.26   -24.05     0.29 S1)  ; 36
      (  170.07    48.38   -24.05     0.29 S1)  ; 37
      (  175.91    53.51   -24.05     0.29 S1)  ; 38
    )  ;  End of markers
     Normal
  )  ;  End of split
)  ;  End of tree

( (Color RGB (255, 128, 128))
  (Dendrite)
  (   54.86    18.70   -54.25     0.29 S1)  ; Root
  (   55.74    18.06   -54.25     1.46 S1)  ; 1, R
  (   57.49    18.70   -58.78     1.17 S1)  ; 2
  (   60.70    18.06   -62.77     1.17 S1)  ; 3
  (   63.03    18.38   -64.75     1.17 S1)  ; 4
  (   65.95    19.02   -68.07     1.17 S1)  ; 5
  (   68.87    18.70   -68.97     1.17 S1)  ; 6
  (   71.49    18.06   -70.00     1.17 S1)  ; 7
  (   73.83    18.06   -70.85     1.17 S1)  ; 8
  (
    (   75.26    16.30   -72.95     0.58 S1)  ; 1, R-1
    (   76.72    15.66   -79.63     0.58 S1)  ; 2
    (   77.89    14.06   -82.52     0.58 S1)  ; 3
    (   78.47    11.82   -84.43     0.58 S1)  ; 4
    (
      (   80.22    11.18   -86.70     0.29 S1)  ; 1, R-1-1
      (   81.68     9.26   -87.28     0.29 S1)  ; 2
      (   83.43     8.94   -91.70     0.29 S1)  ; 3
      (   85.48     8.30   -97.05     0.29 S1)  ; 4
       Incomplete
    |
      (   78.18     9.58   -84.43     0.58 S1)  ; 1, R-1-2
      (   79.06     7.34   -86.62     0.58 S1)  ; 2
      (   79.35     5.10   -87.65     0.58 S1)  ; 3
      (   79.06     2.21   -87.65     0.58 S1)  ; 4
      (   79.06    -0.99   -88.20     0.29 S1)  ; 5
      (   78.47    -4.83   -88.70     0.29 S1)  ; 6
      (   79.06    -7.07   -89.35     0.29 S1)  ; 7
      (   77.60    -8.67   -89.78     0.29 S1)  ; 8
      (   77.30   -11.56   -91.95     0.29 S1)  ; 9
      (   77.01   -15.40   -92.80     0.29 S1)  ; 10
      (   77.60   -18.60   -92.90     0.29 S1)  ; 11
      (   76.43   -21.80   -94.95     0.29 S1)  ; 12
      (   77.01   -24.68   -96.60     0.29 S1)  ; 13
      (   77.30   -27.89   -98.10     0.29 S1)  ; 14
      (   78.76   -29.81  -100.10     0.29 S1)  ; 15
      (   78.18   -31.73  -103.40     0.29 S1)  ; 16
      (   79.64   -35.89  -106.57     0.29 S1)  ; 17
      (   79.35   -39.09  -108.20     0.29 S1)  ; 18
      (   80.51   -42.62  -110.52     0.29 S1)  ; 19
      (   82.56   -45.82  -114.55     0.29 S1)  ; 20
       High
    )  ;  End of split
  |
    (   77.62    18.06   -66.90     0.88 S1)  ; 1, R-2
    (   79.96    18.70   -67.85     0.88 S1)  ; 2
    (
      (   81.42    17.10   -67.85     0.88 S1)  ; 1, R-2-1
      (   83.75    15.50   -68.13     0.88 S1)  ; 2
      (   86.67    15.18   -68.50     0.88 S1)  ; 3
      (   88.13    14.54   -68.65     0.88 S1)  ; 4
      (   90.17    12.62   -69.05     0.88 S1)  ; 5
      (   93.09    11.98   -72.10     0.88 S1)  ; 6
      (   95.13    10.05   -73.40     0.88 S1)  ; 7
      (   96.30     7.49   -74.70     0.88 S1)  ; 8
      (   97.76     5.57   -75.45     0.88 S1)  ; 9
      (   99.80     4.29   -76.17     0.88 S1)  ; 10
      (
        (  102.30     2.90   -76.17     0.58 S1)  ; 1, R-2-1-1
        (  104.64     3.22   -79.47     0.58 S1)  ; 2
        (  107.85     2.26   -79.47     0.29 S1)  ; 3
        (  109.31     1.30   -81.75     0.29 S1)  ; 4
        (  111.06     1.62   -83.80     0.29 S1)  ; 5
        (  113.10     0.34   -81.53     0.29 S1)  ; 6
        (  114.56    -0.94   -83.47     0.29 S1)  ; 7
        (  116.60    -0.94   -83.97     0.29 S1)  ; 8
        (  118.35    -1.91   -85.70     0.29 S1)  ; 9
        (  120.40    -3.19   -88.75     0.29 S1)  ; 10
        (  122.73    -4.47   -90.65     0.29 S1)  ; 11
        (  125.06    -5.43   -92.50     0.29 S1)  ; 12
        (  126.82    -6.39   -93.27     0.29 S1)  ; 13
        (  129.73    -8.95   -94.43     0.29 S1)  ; 14
        (  131.78   -10.87   -94.63     0.29 S1)  ; 15
        (  133.24   -13.43   -94.95     0.29 S1)  ; 16
        (  134.99   -15.67   -96.40     0.29 S1)  ; 17
        (  137.90   -17.92   -96.93     0.29 S1)  ; 18
        (  140.82   -20.48   -98.95     0.29 S1)  ; 19
        (  143.74   -22.40  -100.47     0.29 S1)  ; 20
        (  147.83   -22.72  -101.82     0.29 S1)  ; 21
        (  151.62   -24.00  -101.93     0.29 S1)  ; 22
        (  155.41   -24.00  -102.63     0.29 S1)  ; 23
        (  158.04   -25.60  -100.92     0.29 S1)  ; 24
        (  161.25   -27.52  -101.20     0.29 S1)  ; 25
        (  164.17   -29.44   -97.13     0.29 S1)  ; 26
        (  166.79   -30.72   -96.70     0.29 S1)  ; 27
        (  169.71   -31.69   -94.97     0.29 S1)  ; 28
        (  173.21   -33.29   -94.12     0.29 S1)  ; 29
        (  175.26   -34.57   -94.05     0.29 S1)  ; 30
        (  175.84   -35.85   -94.78     0.29 S1)  ; 31
        (  176.72   -36.49   -94.25     0.29 S1)  ; 32
        (  179.05   -36.81   -94.00     0.29 S1)  ; 33
        (  181.09   -38.73   -93.13     0.29 S1)  ; 34
        (  183.14   -41.29   -92.92     0.29 S1)  ; 35
        (  184.30   -42.25   -97.52     0.29 S1)  ; 36
        (  185.47   -43.85  -104.85     0.29 S1)  ; 37
        (  187.81   -45.45  -107.17     0.29 S1)  ; 38
        (  190.14   -47.38  -109.88     0.29 S1)  ; 39
        (  191.31   -48.98  -115.25     0.29 S1)  ; 40
        (  192.77   -50.58  -118.20     0.29 S1)  ; 41
        (  195.10   -51.54  -122.38     0.29 S1)  ; 42
         High
      |
        (  101.55     2.05   -76.17     0.58 S1)  ; 1, R-2-1-2
        (  103.01    -0.19   -76.72     0.58 S1)  ; 2
        (  104.76    -2.11   -73.47     0.58 S1)  ; 3
        (  105.35    -4.68   -73.15     0.58 S1)  ; 4
        (  107.97    -7.24   -72.90     0.58 S1)  ; 5
        (  109.43    -8.84   -71.30     0.58 S1)  ; 6
        (  111.77   -12.36   -68.82     0.58 S1)  ; 7
        (  112.93   -14.60   -66.00     0.58 S1)  ; 8
        (  113.81   -16.84   -64.32     0.58 S1)  ; 9
        (  114.98   -19.73   -62.95     0.58 S1)  ; 10
        (  117.89   -21.97   -62.42     0.58 S1)  ; 11
        (  120.81   -23.89   -65.92     0.58 S1)  ; 12
        (  123.44   -25.17   -66.03     0.58 S1)  ; 13
        (  124.77   -27.20   -67.60     0.58 S1)  ; 14
        (  127.11   -29.76   -67.82     0.58 S1)  ; 15
        (  130.03   -31.36   -69.20     0.58 S1)  ; 16
        (  131.78   -32.33   -66.80     0.58 S1)  ; 17
        (  134.40   -32.33   -64.02     0.58 S1)  ; 18
        (  136.74   -32.97   -63.00     0.58 S1)  ; 19
        (  137.90   -34.57   -62.65     0.58 S1)  ; 20
        (  139.07   -35.85   -62.33     0.58 S1)  ; 21
        (  141.41   -37.45   -61.90     0.58 S1)  ; 22
        (  143.74   -39.37   -61.70     0.58 S1)  ; 23
        (  146.66   -41.93   -61.42     0.58 S1)  ; 24
        (  149.87   -43.85   -65.45     0.58 S1)  ; 25
        (  152.20   -45.13   -64.22     0.58 S1)  ; 26
        (  153.95   -46.41   -62.77     0.58 S1)  ; 27
        (  155.71   -47.38   -61.28     0.58 S1)  ; 28
        (  158.04   -48.66   -58.90     0.29 S1)  ; 29
        (  161.54   -49.62   -57.17     0.29 S1)  ; 30
        (  162.71   -50.58   -55.05     0.29 S1)  ; 31
        (  162.71   -52.18   -53.80     0.29 S1)  ; 32
        (  163.00   -54.42   -52.13     0.29 S1)  ; 33
        (  162.71   -55.38   -50.83     0.29 S1)  ; 34
        (  160.96   -56.34   -49.25     0.29 S1)  ; 35
        (  160.96   -57.94   -48.72     0.29 S1)  ; 36
        (  161.54   -59.22   -47.42     0.29 S1)  ; 37
        (  160.67   -59.86   -46.25     0.29 S1)  ; 38
        (  161.25   -61.79   -44.78     0.29 S1)  ; 39
        (  162.42   -62.75   -42.80     0.29 S1)  ; 40
        (  163.58   -64.03   -40.92     0.29 S1)  ; 41
        (  163.58   -65.95   -40.13     0.29 S1)  ; 42
        (  162.42   -67.23   -38.47     0.29 S1)  ; 43
        (  163.00   -68.51   -37.60     0.29 S1)  ; 44
        (  163.88   -69.79   -36.58     0.29 S1)  ; 45
         Normal
      )  ;  End of split
    |
      (   83.17    20.30   -67.85     0.58 S1)  ; 1, R-2-2
      (   83.75    21.90   -70.97     0.58 S1)  ; 2
      (   84.33    23.18   -74.55     0.58 S1)  ; 3
      (   86.38    24.78   -73.38     0.58 S1)  ; 4
      (   89.30    27.35   -78.32     0.58 S1)  ; 5
      (   91.63    29.59   -79.82     0.29 S1)  ; 6
      (   92.80    32.15   -80.70     0.29 S1)  ; 7
      (   94.55    33.43   -84.03     0.29 S1)  ; 8
      (   97.76    34.71   -84.20     0.29 S1)  ; 9
      (  100.38    36.31   -86.15     0.29 S1)  ; 10
      (  103.01    38.23   -88.65     0.29 S1)  ; 11
      (  104.76    39.51   -89.97     0.29 S1)  ; 12
       Incomplete
    )  ;  End of split
  )  ;  End of split
)  ;  End of tree

( (Color RGB (128, 128, 255))
  (Dendrite)
  (   56.26    15.85   -50.25     1.46 S1)  ; Root
  (   58.30    15.21   -47.53     1.46 S1)  ; 1, R
  (   61.22    14.25   -44.35     1.46 S1)  ; 2
  (   63.84    12.97   -43.82     1.46 S1)  ; 3

  (Cross
    (Color Green)
    (Name "Marker 3")
    (   59.39    13.50   -47.36     0.07 S1)  ; 1
    (   62.18    12.91   -45.79     0.07 S1)  ; 2
    (   62.84    14.38   -45.79     0.07 S1)  ; 3
  )  ;  End of markers
  (
    (   66.06    11.31   -42.98     1.17 S1)  ; 1, R-1
    (   68.40    10.67   -43.22     1.17 S1)  ; 2
    (   69.56    10.99   -41.93     1.17 S1)  ; 3
    (
      (   71.52    10.35   -34.17     1.17 S1)  ; 1, R-1-1
      (   71.81     9.39   -28.47     0.88 S1)  ; 2
      (   69.48     9.39   -27.05     0.88 S1)  ; 3
      (   68.02     8.75   -24.85     0.88 S1)  ; 4
      (   66.85     8.11   -23.02     0.88 S1)  ; 5
      (   66.27     9.07   -21.38     0.88 S1)  ; 6
      (   65.98     7.79   -19.15     0.88 S1)  ; 7
      (   66.85     7.47   -15.80     0.88 S1)  ; 8
      (   65.68     8.11   -15.12     0.88 S1)  ; 9
      (   64.22     7.47   -13.80     0.88 S1)  ; 10
      (   63.64     5.87    -7.25     0.88 S1)  ; 11
      (
        (   60.72     7.47    -7.25     0.58 S1)  ; 1, R-1-1-1
        (   58.97     8.43    -5.27     0.58 S1)  ; 2
        (   56.93     9.07    -3.92     0.58 S1)  ; 3
        (   56.64    10.67    -2.13     0.58 S1)  ; 4
        (   55.18    10.35     0.22     0.58 S1)  ; 5
        (   54.30    11.63     1.05     0.58 S1)  ; 6
        (   53.72    13.23     2.70     0.58 S1)  ; 7
        (   54.89    14.19     3.47     0.58 S1)  ; 8
        (   54.01    14.51     4.65     0.58 S1)  ; 9
        (   52.84    15.79     6.35     0.58 S1)  ; 10
        (   51.38    15.15     7.25     0.58 S1)  ; 11
        (   50.22    13.87     7.45     0.58 S1)  ; 12
        (   48.17    13.55     7.63     0.58 S1)  ; 13
         Normal
      |
        (   64.81     4.59    -7.45     0.58 S1)  ; 1, R-1-1-2
        (
          (   64.52     2.99    -7.45     0.58 S1)  ; 1, R-1-1-2-1
          (   66.56     2.34    -6.47     0.29 S1)  ; 2
          (   67.14     1.06    -5.63     0.29 S1)  ; 3
          (   67.73     0.42    -0.63     0.29 S1)  ; 4
          (   66.56    -0.22    -0.40     0.29 S1)  ; 5
          (   66.85    -2.46     0.85     0.29 S1)  ; 6
          (   68.02    -3.74     2.00     0.29 S1)  ; 7
          (   68.89    -2.46     3.90     0.29 S1)  ; 8
          (   70.64    -2.78     5.95     0.29 S1)  ; 9
          (   70.35    -5.02     6.73     0.29 S1)  ; 10
           Normal
        |
          (   67.14     3.95    -7.45     0.58 S1)  ; 1, R-1-1-2-2
          (   67.73     4.59    -6.85     0.58 S1)  ; 2
          (   68.02     6.51    -6.78     0.29 S1)  ; 3
          (   70.35     5.87    -5.72     0.29 S1)  ; 4
          (   72.98     6.83    -4.82     0.29 S1)  ; 5
          (   74.73     8.11    -4.27     0.29 S1)  ; 6
          (   76.77     8.43    -3.32     0.29 S1)  ; 7
          (   78.52     9.07    -2.10     0.29 S1)  ; 8
          (   81.44     8.75    -1.13     0.29 S1)  ; 9
          (   84.65     8.75    -0.37     0.29 S1)  ; 10
          (   86.11     9.39     1.05     0.29 S1)  ; 11
          (   85.53    10.35     3.57     0.29 S1)  ; 12
          (   86.11    11.63     6.13     0.29 S1)  ; 13
          (   86.69    13.55     7.25     0.29 S1)  ; 14
          (   89.61    14.51     8.40     0.29 S1)  ; 15
          (   92.82    16.43     9.27     0.29 S1)  ; 16
          (   96.03    18.04     9.90     0.29 S1)  ; 17
          (
            (   95.74    19.64     9.90     0.29 S1)  ; 1, R-1-1-2-2-1
            (   96.32    20.92    10.80     0.29 S1)  ; 2
            (   96.32    22.20    11.65     0.29 S1)  ; 3
             Normal
          |
            (   97.20    16.11     6.15     0.29 S1)  ; 1, R-1-1-2-2-2
            (   98.95    14.83     6.85     0.29 S1)  ; 2
            (  100.70    13.87     5.80     0.29 S1)  ; 3
            (  101.58    12.59     3.05     0.29 S1)  ; 4
            (  102.74    10.99     1.90     0.29 S1)  ; 5
             Normal
          )  ;  End of split
        )  ;  End of split
      )  ;  End of split
    |
      (   71.02     9.39   -41.17     1.17 S1)  ; 1, R-1-2
      (   71.32     7.79   -37.83     1.17 S1)  ; 2
      (   69.86     5.55   -37.20     1.17 S1)  ; 3
      (   69.86     2.99   -36.33     1.17 S1)  ; 4
      (   71.90     0.74   -35.88     1.17 S1)  ; 5
      (   71.90    -1.50   -32.08     1.17 S1)  ; 6
      (   73.07    -4.06   -31.15     1.17 S1)  ; 7
      (   74.23    -5.98   -30.10     1.17 S1)  ; 8
      (   74.23    -8.22   -29.35     1.17 S1)  ; 9
      (   74.23    -9.50   -29.10     1.17 S1)  ; 10

      (Cross
        (Color Green)
        (Name "Marker 3")
        (   71.80     8.46   -37.81     0.07 S1)  ; 1
        (   69.96     7.43   -37.05     0.07 S1)  ; 2
        (   69.08     4.93   -36.59     0.07 S1)  ; 3
        (   71.21     6.11   -36.59     0.07 S1)  ; 4
        (   68.86     3.09   -36.59     0.07 S1)  ; 5
        (   70.55     4.34   -35.59     0.07 S1)  ; 6
        (   70.11     0.96   -33.89     0.07 S1)  ; 7
        (   73.71    -0.95   -33.11     0.07 S1)  ; 8
        (   70.40    -0.95   -33.11     0.07 S1)  ; 9
        (   75.91    -6.91   -32.30     0.07 S1)  ; 10
        (   76.64    -5.95   -32.30     0.07 S1)  ; 11
        (   75.69    -5.58   -32.30     0.07 S1)  ; 12
        (   72.75    -7.72   -31.81     0.07 S1)  ; 13
        (   73.04    -6.32   -31.95     0.07 S1)  ; 14
        (   72.97    -4.85   -31.38     0.07 S1)  ; 15
        (   74.37    -4.92   -30.13     0.07 S1)  ; 16
        (   75.10    -5.95   -29.41     0.07 S1)  ; 17
        (   75.10    -8.23   -29.41     0.07 S1)  ; 18
      )  ;  End of markers
      (
        (   71.81   -12.71   -29.58     0.88 S1)  ; 1, R-1-2-1
        (   70.94   -15.59   -26.55     0.88 S1)  ; 2
        (   70.06   -17.19   -25.97     0.88 S1)  ; 3
        (   69.77   -19.75   -25.40     0.88 S1)  ; 4
        (   68.60   -21.35   -24.15     0.88 S1)  ; 5
        (   65.10   -21.03   -22.73     0.88 S1)  ; 6
        (   61.89   -22.31   -21.02     0.88 S1)  ; 7
        (   59.85   -24.55   -19.90     0.88 S1)  ; 8
        (   58.68   -26.47   -19.23     0.88 S1)  ; 9
        (   58.10   -28.40   -17.63     0.88 S1)  ; 10
        (   58.39   -29.68   -17.15     0.88 S1)  ; 11

        (Cross
          (Color Green)
          (Name "Marker 3")
          (   71.52    -9.91   -30.11     0.07 S1)  ; 1
          (   73.65   -11.53   -30.56     0.07 S1)  ; 2
          (   73.35   -12.92   -28.92     0.07 S1)  ; 3
          (   72.32   -11.01   -28.05     0.07 S1)  ; 4
          (   72.47   -15.65   -27.51     0.07 S1)  ; 5
          (   70.85   -16.38   -26.70     0.07 S1)  ; 6
          (   70.85   -14.69   -26.70     0.07 S1)  ; 7
          (   72.54   -15.06   -26.44     0.07 S1)  ; 8
          (   68.94   -18.15   -24.84     0.07 S1)  ; 9
          (   70.27   -15.20   -24.84     0.07 S1)  ; 10
          (   70.56   -20.06   -24.84     0.07 S1)  ; 11
          (   70.85   -18.73   -23.47     0.07 S1)  ; 12
          (   69.09   -21.53   -23.89     0.07 S1)  ; 13
          (   68.58   -22.26   -22.70     0.07 S1)  ; 14
          (   64.68   -23.07   -23.52     0.07 S1)  ; 15
          (   64.91   -20.87   -22.32     0.07 S1)  ; 16
          (   63.66   -20.28   -21.36     0.07 S1)  ; 17
          (   64.24   -19.76   -21.36     0.07 S1)  ; 18
          (   67.70   -20.72   -21.36     0.07 S1)  ; 19
          (   62.04   -21.31   -21.36     0.07 S1)  ; 20
          (   64.46   -21.90   -20.09     0.07 S1)  ; 21
          (   61.01   -25.28   -20.09     0.07 S1)  ; 22
          (   59.18   -22.34   -19.88     0.07 S1)  ; 23
          (   62.78   -22.56   -19.04     0.07 S1)  ; 24
          (   64.02   -23.29   -19.04     0.07 S1)  ; 25
          (   61.09   -22.04   -19.04     0.07 S1)  ; 26
          (   59.40   -26.75   -18.48     0.07 S1)  ; 27
          (   57.71   -25.28   -18.48     0.07 S1)  ; 28
          (   59.69   -28.81   -18.48     0.07 S1)  ; 29
          (   58.96   -25.50   -18.30     0.07 S1)  ; 30
          (   60.50   -23.14   -19.38     0.07 S1)  ; 31
        )  ;  End of markers
        (
          (   55.18   -31.98   -16.92     0.88 S1)  ; 1, R-1-2-1-1
          (   54.30   -33.26   -14.65     0.88 S1)  ; 2
          (   54.01   -34.54   -12.05     0.88 S1)  ; 3
          (   51.97   -36.14   -10.57     0.58 S1)  ; 4
          (   50.80   -37.75   -10.25     0.58 S1)  ; 5
          (   49.93   -39.03    -9.98     0.58 S1)  ; 6
          (   47.01   -41.27    -9.52     0.58 S1)  ; 7
          (   44.96   -44.15    -9.02     0.58 S1)  ; 8
          (   43.51   -46.07    -8.25     0.58 S1)  ; 9
          (   41.46   -46.71    -7.32     0.58 S1)  ; 10
          (   39.13   -47.35    -5.97     0.58 S1)  ; 11
          (   38.54   -48.95    -5.42     0.58 S1)  ; 12
          (   36.79   -49.59    -3.85     0.58 S1)  ; 13
          (   34.75   -49.91    -2.95     0.58 S1)  ; 14
          (   33.29   -50.87    -1.05     0.58 S1)  ; 15
          (   33.29   -51.84    -0.50     0.58 S1)  ; 16
          (   34.17   -52.80     0.47     0.58 S1)  ; 17
          (   35.04   -53.76     1.88     0.58 S1)  ; 18
          (   35.92   -56.32     3.32     0.58 S1)  ; 19
          (   36.50   -58.56     4.80     0.58 S1)  ; 20
          (   37.67   -60.16     5.95     0.58 S1)  ; 21
          (   38.25   -62.72     7.30     0.58 S1)  ; 22
          (   37.67   -64.32     7.87     0.58 S1)  ; 23
          (   36.79   -63.36     8.25     0.58 S1)  ; 24
          (   37.67   -61.76     8.60     0.58 S1)  ; 25
          (   39.13   -62.08    10.07     0.58 S1)  ; 26
          (   40.59   -62.08    10.77     0.58 S1)  ; 27
          (   41.46   -60.16    11.42     0.58 S1)  ; 28
          (   41.17   -58.56    12.20     0.29 S1)  ; 29
           Normal
        |
          (   59.56   -32.62   -17.25     0.88 S1)  ; 1, R-1-2-1-2
          (   60.43   -35.18   -16.52     0.88 S1)  ; 2
          (   59.26   -38.07   -16.35     0.88 S1)  ; 3
          (   60.14   -40.63   -20.57     0.88 S1)  ; 4
          (   59.56   -42.55   -24.67     0.88 S1)  ; 5
          (   58.68   -44.15   -27.10     0.88 S1)  ; 6
          (   58.97   -47.67   -27.38     0.88 S1)  ; 7
          (   58.10   -49.27   -24.32     0.88 S1)  ; 8
          (   57.51   -51.19   -21.72     0.88 S1)  ; 9
          (   58.68   -53.76   -20.30     0.88 S1)  ; 10
          (   58.97   -56.32   -19.55     0.88 S1)  ; 11
          (   60.14   -59.84   -23.15     0.88 S1)  ; 12
          (   61.01   -61.44   -25.50     0.88 S1)  ; 13
          (   62.18   -63.68   -27.38     0.88 S1)  ; 14
          (   62.18   -67.53   -27.80     0.88 S1)  ; 15
          (   60.72   -70.09   -27.80     0.88 S1)  ; 16
          (   61.01   -72.97   -28.00     0.88 S1)  ; 17
          (   59.56   -74.89   -25.52     0.88 S1)  ; 18
          (   57.51   -77.77   -24.70     0.58 S1)  ; 19
          (   57.80   -81.62   -24.38     0.58 S1)  ; 20
          (   58.97   -84.50   -20.45     0.58 S1)  ; 21
          (   59.56   -86.10   -17.98     0.58 S1)  ; 22
          (   58.10   -88.02   -15.68     0.58 S1)  ; 23
          (   58.39   -91.22   -14.80     0.58 S1)  ; 24
          (   55.47   -93.46   -14.15     0.58 S1)  ; 25
          (   55.76   -96.99   -12.67     0.58 S1)  ; 26
          (   56.35   -99.23   -11.32     0.58 S1)  ; 27
          (   56.05  -100.83   -15.10     0.58 S1)  ; 28
          (   56.05  -101.79   -18.60     0.58 S1)  ; 29
          (   55.47  -104.03   -20.77     0.58 S1)  ; 30
          (   55.18  -105.95   -20.95     0.58 S1)  ; 31
          (   55.18  -108.83   -21.85     0.58 S1)  ; 32
          (   54.01  -110.75   -23.42     0.58 S1)  ; 33
          (   51.68  -111.46   -23.42     0.29 S1)  ; 34
          (   50.22  -114.66   -23.45     0.29 S1)  ; 35
          (   50.51  -116.90   -23.15     0.29 S1)  ; 36
          (   50.22  -120.10   -21.25     0.29 S1)  ; 37
          (   49.93  -123.63   -21.15     0.29 S1)  ; 38
          (   49.34  -126.19   -21.10     0.29 S1)  ; 39
          (   49.34  -128.75   -20.97     0.29 S1)  ; 40
          (   49.63  -132.27   -20.83     0.29 S1)  ; 41
          (   50.51  -133.55   -20.65     0.29 S1)  ; 42
          (   50.80  -135.79   -20.45     0.29 S1)  ; 43
          (   49.63  -139.32   -20.23     0.29 S1)  ; 44
          (   50.22  -142.20   -20.05     0.29 S1)  ; 45
          (   48.76  -143.80   -19.77     0.29 S1)  ; 46
          (   48.76  -145.72   -19.07     0.29 S1)  ; 47
          (   49.63  -147.96   -18.77     0.29 S1)  ; 48
          (   48.76  -149.88   -23.90     0.29 S1)  ; 49
          (   48.47  -151.81   -25.40     0.29 S1)  ; 50
          (   48.76  -154.69   -26.20     0.29 S1)  ; 51
          (   49.05  -157.25   -26.88     0.29 S1)  ; 52
          (   49.93  -159.49   -27.47     0.29 S1)  ; 53
          (   49.93  -162.05   -26.88     0.29 S1)  ; 54
          (   50.80  -163.33   -26.42     0.29 S1)  ; 55

          (Cross
            (Color Green)
            (Name "Marker 3")
            (   60.06   -30.55   -16.91     0.07 S1)  ; 1
            (   58.22   -33.63   -17.42     0.07 S1)  ; 2
            (   58.66   -34.81   -17.42     0.07 S1)  ; 3
            (   60.13   -32.16   -17.34     0.07 S1)  ; 4
            (   60.87   -34.00   -16.95     0.07 S1)  ; 5
            (   61.31   -35.32   -17.95     0.07 S1)  ; 6
            (   60.87   -38.63   -17.95     0.07 S1)  ; 7
            (   58.74   -37.53   -17.30     0.07 S1)  ; 8
            (   57.71   -38.19   -17.08     0.07 S1)  ; 9
            (   60.35   -37.16   -16.10     0.07 S1)  ; 10
            (   60.50   -37.75   -16.10     0.07 S1)  ; 11
            (   60.35   -41.65   -17.35     0.07 S1)  ; 12
            (   58.37   -41.43   -19.23     0.07 S1)  ; 13
            (   58.15   -39.07   -19.23     0.07 S1)  ; 14
            (   60.94   -40.91   -21.63     0.07 S1)  ; 15
            (   59.10   -46.50   -18.02     0.07 S1)  ; 16
            (   60.13   -45.54   -18.02     0.07 S1)  ; 17
            (   58.07   -45.40   -18.02     0.07 S1)  ; 18
            (   60.79   -44.37   -19.23     0.07 S1)  ; 19
            (   57.27   -47.31   -19.23     0.07 S1)  ; 20
            (   57.85   -48.34   -20.27     0.07 S1)  ; 21
            (   59.03   -49.29   -20.27     0.07 S1)  ; 22
            (   57.27   -49.59   -20.27     0.07 S1)  ; 23
            (   60.06   -42.97   -21.63     0.07 S1)  ; 24
            (   59.40   -44.30   -21.63     0.07 S1)  ; 25
            (   58.15   -43.85   -21.63     0.07 S1)  ; 26
            (   59.98   -54.09   -17.57     0.07 S1)  ; 27
            (   58.00   -54.09   -17.45     0.07 S1)  ; 28
            (   57.78   -55.86   -17.45     0.07 S1)  ; 29
            (   60.42   -54.97   -18.40     0.07 S1)  ; 30
            (   60.42   -56.81   -18.40     0.07 S1)  ; 31
            (   57.49   -54.61   -19.44     0.07 S1)  ; 32
            (   61.16   -60.12   -19.29     0.07 S1)  ; 33
            (   59.54   -61.67   -20.24     0.07 S1)  ; 34
            (   60.20   -58.36   -20.84     0.07 S1)  ; 35
            (   58.66   -60.64   -20.84     0.07 S1)  ; 36
            (   58.66   -57.25   -20.84     0.07 S1)  ; 37
            (   58.96   -59.02   -20.84     0.07 S1)  ; 38
            (   62.63   -62.11   -22.11     0.07 S1)  ; 39
            (   61.53   -60.93   -23.36     0.07 S1)  ; 40
            (   63.00   -62.99   -23.36     0.07 S1)  ; 41
            (   63.88   -64.02   -24.21     0.07 S1)  ; 42
            (   61.01   -65.05   -24.45     0.07 S1)  ; 43
            (   63.36   -67.55   -22.66     0.07 S1)  ; 44
            (   63.00   -66.08   -22.66     0.07 S1)  ; 45
            (   64.46   -64.90   -20.95     0.07 S1)  ; 46
            (   61.45   -67.03   -20.95     0.07 S1)  ; 47
            (   58.88   -52.33   -17.57     0.07 S1)  ; 48
            (   56.90   -51.37   -17.57     0.07 S1)  ; 49
            (   59.84   -70.49   -23.84     0.07 S1)  ; 50
            (   60.20   -69.02   -23.84     0.07 S1)  ; 51
            (   61.75   -74.16   -23.84     0.07 S1)  ; 52
            (   62.92   -71.44   -22.34     0.07 S1)  ; 53
            (   60.28   -71.52   -22.34     0.07 S1)  ; 54
            (   62.33   -73.21   -21.74     0.07 S1)  ; 55
            (   59.62   -76.88   -21.90     0.07 S1)  ; 56
            (   59.32   -80.26   -21.90     0.07 S1)  ; 57
            (   56.02   -80.26   -21.90     0.07 S1)  ; 58
            (   57.34   -85.04   -21.72     0.07 S1)  ; 59
            (   56.75   -79.01   -20.95     0.07 S1)  ; 60
            (   56.83   -77.98   -20.95     0.07 S1)  ; 61
            (   58.88   -78.05   -20.95     0.07 S1)  ; 62
            (   59.62   -75.63   -20.95     0.07 S1)  ; 63
            (   59.40   -83.05   -20.00     0.07 S1)  ; 64
            (   58.66   -74.82   -20.75     0.07 S1)  ; 65
            (   61.09   -86.66   -19.65     0.07 S1)  ; 66
            (   59.84   -84.30   -19.65     0.07 S1)  ; 67
            (   57.78   -85.63   -17.79     0.07 S1)  ; 68
            (   60.06   -88.05   -16.55     0.07 S1)  ; 69
            (   59.03   -87.83   -15.60     0.07 S1)  ; 70
            (   59.76   -89.67   -18.99     0.07 S1)  ; 71
            (   57.05   -89.52   -17.79     0.07 S1)  ; 72
            (   60.13   -92.54   -16.55     0.07 S1)  ; 73
            (   58.96   -90.19   -15.60     0.07 S1)  ; 74
            (   56.16   -92.19   -20.61     0.07 S1)  ; 75
            (   57.34   -99.54   -19.89     0.07 S1)  ; 76
            (   55.28   -96.67   -19.89     0.07 S1)  ; 77
            (   53.81   -93.58   -18.77     0.07 S1)  ; 78
            (   57.49   -94.61   -18.77     0.07 S1)  ; 79
            (   54.99   -95.94   -18.77     0.07 S1)  ; 80
            (   56.90   -97.48   -18.77     0.07 S1)  ; 81
            (   53.52   -99.69   -20.42     0.07 S1)  ; 82
            (   57.78  -102.26   -20.42     0.07 S1)  ; 83
            (   54.33  -101.60   -21.38     0.07 S1)  ; 84
            (   56.02  -103.58   -21.38     0.07 S1)  ; 85
            (   57.34  -105.72   -22.12     0.07 S1)  ; 86
            (   57.34  -104.69   -22.12     0.07 S1)  ; 87
            (   57.34  -103.80   -22.12     0.07 S1)  ; 88
            (   58.37  -106.38   -22.12     0.07 S1)  ; 89
            (   54.70  -103.66   -22.12     0.07 S1)  ; 90
            (   56.31  -105.13   -19.42     0.07 S1)  ; 91
            (   54.48  -105.64   -19.42     0.07 S1)  ; 92
            (   56.97   -96.38   -18.46     0.07 S1)  ; 93
            (   55.94  -106.75   -23.34     0.07 S1)  ; 94
            (   56.53  -108.66   -20.60     0.07 S1)  ; 95
            (   55.43  -109.17   -20.60     0.07 S1)  ; 96
            (   54.70  -108.29   -20.60     0.07 S1)  ; 97
            (   54.11  -109.47   -20.60     0.07 S1)  ; 98
            (   51.68  -109.67   -24.39     0.07 S1)  ; 99
            (   52.27  -110.63   -23.42     0.07 S1)  ; 100
            (   49.63  -113.71   -23.89     0.07 S1)  ; 101
            (   52.86  -108.57   -23.51     0.07 S1)  ; 102
            (   49.11  -116.58   -24.44     0.07 S1)  ; 103
            (   49.11  -115.26   -24.06     0.07 S1)  ; 104
            (   52.56  -119.67   -24.01     0.07 S1)  ; 105
            (   51.83  -120.18   -23.13     0.07 S1)  ; 106
            (   49.63  -120.62   -23.13     0.07 S1)  ; 107
            (   49.70  -119.30   -23.72     0.07 S1)  ; 108
            (   50.88  -117.24   -23.72     0.07 S1)  ; 109
            (   51.54  -119.52   -24.56     0.07 S1)  ; 110
            (   50.95  -122.02   -25.26     0.07 S1)  ; 111
            (   50.66  -124.89   -24.55     0.07 S1)  ; 112
            (   48.82  -126.21   -24.55     0.07 S1)  ; 113
            (   49.99  -129.01   -24.55     0.07 S1)  ; 114
            (   51.32  -125.18   -23.17     0.07 S1)  ; 115
            (   49.70  -127.17   -23.17     0.07 S1)  ; 116
            (   48.23  -126.95   -23.17     0.07 S1)  ; 117
            (   50.66  -123.64   -23.29     0.07 S1)  ; 118
            (   49.99  -125.99   -26.42     0.07 S1)  ; 119
            (   49.63  -129.45   -25.33     0.07 S1)  ; 120
            (   50.58  -132.02   -25.33     0.07 S1)  ; 121
            (   48.75  -133.12   -25.33     0.07 S1)  ; 122
            (   52.71  -135.92   -25.07     0.07 S1)  ; 123
            (   48.82  -134.30   -25.07     0.07 S1)  ; 124
            (   50.14  -135.74   -20.39     0.07 S1)  ; 125
            (   50.80  -137.87   -20.39     0.07 S1)  ; 126
            (   51.90  -137.21   -20.39     0.07 S1)  ; 127
            (   49.04  -138.39   -20.39     0.07 S1)  ; 128
            (   49.04  -138.83   -20.39     0.07 S1)  ; 129
            (   49.33  -139.86   -20.39     0.07 S1)  ; 130
            (   51.32  -140.30   -20.39     0.07 S1)  ; 131
            (   51.17  -142.95   -19.84     0.07 S1)  ; 132
            (   51.61  -142.29   -19.84     0.07 S1)  ; 133
            (   47.42  -143.09   -19.84     0.07 S1)  ; 134
            (   49.77  -145.45   -18.10     0.07 S1)  ; 135
            (   49.11  -142.36   -18.10     0.07 S1)  ; 136
            (   48.89  -148.24   -20.44     0.07 S1)  ; 137
            (   50.21  -148.54   -21.29     0.07 S1)  ; 138
            (   50.21  -151.77   -22.15     0.07 S1)  ; 139
            (   47.86  -151.99   -22.15     0.07 S1)  ; 140
            (   49.99  -156.33   -23.01     0.07 S1)  ; 141
            (   48.53  -158.39   -23.01     0.07 S1)  ; 142
            (   47.42  -154.71   -23.01     0.07 S1)  ; 143
            (   49.99  -158.83   -24.35     0.07 S1)  ; 144
            (   48.53  -156.18   -24.35     0.07 S1)  ; 145
            (   49.04  -163.61   -24.35     0.07 S1)  ; 146
            (   52.34  -163.53   -25.81     0.07 S1)  ; 147
            (   49.48  -163.02   -25.81     0.07 S1)  ; 148
            (   49.11  -162.28   -25.81     0.07 S1)  ; 149
            (   51.32  -159.49   -25.81     0.07 S1)  ; 150
            (   49.63  -160.15   -24.84     0.07 S1)  ; 151
            (   52.56  -164.34   -26.05     0.07 S1)  ; 152
            (   49.77  -154.64   -21.00     0.07 S1)  ; 153
            (   48.23  -154.86   -22.43     0.07 S1)  ; 154
            (   47.86  -150.23   -21.74     0.07 S1)  ; 155
          )  ;  End of markers
           Normal
        )  ;  End of split
      |
        (   75.98   -11.42   -29.10     0.88 S1)  ; 1, R-1-2-2
        (   77.74   -13.03   -28.17     0.88 S1)  ; 2
        (   78.03   -15.59   -28.47     0.88 S1)  ; 3
        (   78.90   -19.11   -28.25     0.88 S1)  ; 4
        (   81.24   -21.35   -29.72     0.88 S1)  ; 5
        (   82.70   -22.95   -31.20     0.88 S1)  ; 6
        (   83.57   -25.51   -33.05     0.88 S1)  ; 7
        (   84.45   -26.15   -34.60     0.88 S1)  ; 8
        (
          (   83.19   -29.04   -35.97     0.58 S1)  ; 1, R-1-2-2-1
          (   84.07   -30.64   -36.15     0.58 S1)  ; 2
          (   85.82   -32.56   -33.03     0.58 S1)  ; 3
          (   87.28   -34.16   -34.45     0.58 S1)  ; 4
          (   88.15   -36.08   -36.82     0.58 S1)  ; 5
          (   89.03   -38.32   -38.22     0.58 S1)  ; 6
          (   90.78   -40.24   -40.80     0.58 S1)  ; 7
          (   92.82   -40.88   -41.60     0.88 S1)  ; 8
          (   92.82   -41.20   -41.60     0.88 S1)  ; 9
          (
            (   94.57   -41.20   -41.60     0.29 S1)  ; 1, R-1-2-2-1-1
            (   96.91   -42.81   -43.55     0.29 S1)  ; 2
            (   98.95   -43.77   -46.00     0.29 S1)  ; 3
            (  100.41   -45.37   -48.42     0.29 S1)  ; 4
            (  101.58   -47.29   -50.13     0.29 S1)  ; 5
            (  103.04   -49.53   -52.25     0.29 S1)  ; 6
            (  104.79   -50.49   -53.45     0.29 S1)  ; 7
            (  107.41   -51.45   -53.72     0.29 S1)  ; 8
            (  108.87   -53.37   -51.60     0.29 S1)  ; 9
            (  110.91   -56.25   -52.13     0.29 S1)  ; 10
            (  113.83   -58.18   -52.60     0.29 S1)  ; 11
            (  116.75   -59.14   -53.65     0.29 S1)  ; 12
            (  119.09   -60.10   -54.83     0.29 S1)  ; 13
            (  120.54   -62.02   -55.27     0.29 S1)  ; 14
            (  122.59   -64.90   -57.20     0.29 S1)  ; 15
            (  124.34   -66.50   -59.02     0.29 S1)  ; 16
            (  125.51   -67.46   -62.35     0.29 S1)  ; 17
            (  125.80   -68.42   -65.10     0.29 S1)  ; 18
            (  123.46   -69.38   -65.55     0.29 S1)  ; 19
            (  121.71   -70.98   -66.32     0.29 S1)  ; 20
            (  119.96   -72.91   -68.05     0.29 S1)  ; 21
            (  118.21   -76.11   -69.50     0.29 S1)  ; 22
            (  117.63   -78.99   -68.28     0.29 S1)  ; 23
            (  117.63   -81.23   -69.05     0.29 S1)  ; 24
            (  116.46   -82.83   -70.45     0.29 S1)  ; 25
            (  116.46   -85.39   -71.97     0.29 S1)  ; 26
            (  116.46   -87.31   -75.80     0.29 S1)  ; 27
            (  116.75   -89.24   -77.95     0.29 S1)  ; 28
            (  117.92   -87.06   -77.13     0.29 S1)  ; 29
            (  118.79   -85.78   -81.85     0.29 S1)  ; 30
             Normal
          |
            (   96.03   -43.13   -39.52     0.88 S1)  ; 1, R-1-2-2-1-2
            (   96.32   -43.13   -39.52     0.88 S1)  ; 2
            (   98.95   -46.65   -39.05     0.88 S1)  ; 3
            (  101.87   -50.17   -38.80     0.88 S1)  ; 4
            (  101.87   -52.41   -38.25     0.88 S1)  ; 5
            (  102.74   -54.65   -37.67     0.88 S1)  ; 6
            (  103.04   -55.93   -34.80     0.88 S1)  ; 7
            (  104.49   -56.89   -30.17     0.88 S1)  ; 8
            (  105.66   -58.18   -29.82     0.88 S1)  ; 9
            (  106.25   -58.82   -27.95     0.88 S1)  ; 10
            (  107.41   -60.42   -26.67     0.88 S1)  ; 11
            (  108.00   -61.38   -24.58     0.58 S1)  ; 12
            (  108.87   -62.98   -24.17     0.58 S1)  ; 13
            (  109.75   -64.58   -23.75     0.58 S1)  ; 14
            (  110.33   -65.86   -19.52     0.58 S1)  ; 15
            (  110.91   -67.46   -17.67     0.58 S1)  ; 16
            (  110.62   -69.70   -17.38     0.58 S1)  ; 17
            (  111.79   -71.62   -16.73     0.58 S1)  ; 18
            (  113.25   -73.23   -15.90     0.58 S1)  ; 19
            (  114.42   -75.15   -15.40     0.58 S1)  ; 20
            (  115.88   -76.81   -14.43     0.58 S1)  ; 21
            (  119.09   -77.77   -13.72     0.29 S1)  ; 22
            (  121.13   -79.05   -13.45     0.29 S1)  ; 23
            (  121.71   -80.97   -13.10     0.29 S1)  ; 24
            (  123.46   -81.29   -12.35     0.29 S1)  ; 25
            (  125.21   -81.94   -12.20     0.29 S1)  ; 26
            (  124.63   -84.18   -12.07     0.29 S1)  ; 27
            (  125.80   -86.74   -11.73     0.29 S1)  ; 28
            (  126.96   -88.98   -11.35     0.29 S1)  ; 29
            (  129.01   -89.62   -10.80     0.29 S1)  ; 30
            (  130.17   -90.90    -9.27     0.29 S1)  ; 31
            (  131.93   -92.18    -8.42     0.29 S1)  ; 32
            (  132.80   -93.78    -6.40     0.29 S1)  ; 33
            (  134.84   -95.06    -2.90     0.29 S1)  ; 34
            (  137.47   -95.38    -1.58     0.29 S1)  ; 35
            (  139.51   -96.02     1.05     0.29 S1)  ; 36
             Normal
          )  ;  End of split
        |
          (   87.37   -25.51   -29.38     0.58 S1)  ; 1, R-1-2-2-2
          (   89.99   -26.47   -28.85     0.58 S1)  ; 2
          (   91.74   -28.40   -28.75     0.58 S1)  ; 3
          (   94.08   -29.36   -28.15     0.58 S1)  ; 4
          (   96.70   -30.00   -26.50     0.58 S1)  ; 5
          (   97.58   -31.28   -26.00     0.58 S1)  ; 6
          (   99.91   -31.92   -25.47     0.58 S1)  ; 7
          (  102.25   -33.84   -23.60     0.58 S1)  ; 8
          (  105.17   -35.44   -23.23     0.58 S1)  ; 9
          (  107.50   -36.08   -21.63     0.58 S1)  ; 10
          (  108.08   -38.00   -20.73     0.58 S1)  ; 11
          (  111.29   -38.32   -19.73     0.58 S1)  ; 12
          (  112.17   -38.32   -20.47     0.58 S1)  ; 13
          (  111.88   -38.64   -18.50     0.58 S1)  ; 14
          (  111.88   -39.60   -17.95     0.58 S1)  ; 15
          (  112.46   -39.92   -14.85     0.58 S1)  ; 16
          (  113.34   -41.52   -12.88     0.58 S1)  ; 17
          (  114.80   -40.88   -10.92     0.58 S1)  ; 18
          (  116.17   -41.84    -8.27     0.58 S1)  ; 19
          (  119.38   -43.13    -6.73     0.58 S1)  ; 20
          (  122.59   -44.73    -6.22     0.29 S1)  ; 21
          (  124.63   -46.01    -4.75     0.29 S1)  ; 22
          (  126.38   -47.29    -3.32     0.29 S1)  ; 23
          (  127.26   -49.21    -3.10     0.29 S1)  ; 24
          (  128.13   -49.85    -2.95     0.29 S1)  ; 25
          (  129.30   -48.89    -2.95     0.29 S1)  ; 26
          (  131.93   -48.25    -2.45     0.29 S1)  ; 27
          (  134.84   -48.57    -1.32     0.29 S1)  ; 28
          (  137.18   -48.89    -1.05     0.29 S1)  ; 29
          (  138.93   -49.21    -0.65     0.29 S1)  ; 30
           Normal
        )  ;  End of split
      )  ;  End of split
    )  ;  End of split
  |
    (   65.60    11.05   -43.82     0.88 S1)  ; 1, R-2
    (   68.51    10.73   -45.95     0.88 S1)  ; 2
    (   71.14    11.69   -47.02     0.88 S1)  ; 3
    (   72.31    10.41   -46.03     0.88 S1)  ; 4
    (   74.06     8.49   -49.02     0.88 S1)  ; 5
    (   74.93     8.81   -51.88     0.88 S1)  ; 6

    (Cross
      (Color Green)
      (Name "Marker 3")
      (   67.32    11.29   -42.79     0.07 S1)  ; 1
      (   67.32     9.89   -44.99     0.07 S1)  ; 2
    )  ;  End of markers
    (
      (   76.68     5.29   -55.50     0.58 S1)  ; 1, R-2-1
      (   79.02     2.72   -55.85     0.58 S1)  ; 2
      (   80.77    -0.16   -57.77     0.58 S1)  ; 3
      (   81.06    -2.72   -59.10     0.58 S1)  ; 4
      (   82.23    -5.03   -60.72     0.58 S1)  ; 5
      (   83.40    -7.27   -63.22     0.58 S1)  ; 6
      (   83.98   -10.15   -64.57     0.58 S1)  ; 7
      (   84.86   -12.07   -64.80     0.58 S1)  ; 8
      (   84.27   -15.27   -65.88     0.58 S1)  ; 9
      (   84.56   -17.51   -66.38     0.58 S1)  ; 10
      (   83.69   -19.44   -66.82     0.58 S1)  ; 11
      (   84.27   -21.36   -67.38     0.58 S1)  ; 12
      (   85.73   -24.24   -68.97     0.58 S1)  ; 13
      (   86.31   -26.48   -70.38     0.58 S1)  ; 14
      (   87.48   -28.40   -71.52     0.58 S1)  ; 15
      (   87.19   -30.00   -72.88     0.58 S1)  ; 16
      (   86.31   -31.60   -73.15     0.58 S1)  ; 17
      (   86.31   -33.52   -74.70     0.58 S1)  ; 18
      (   87.48   -35.45   -76.38     0.58 S1)  ; 19
      (   89.52   -36.09   -78.40     0.58 S1)  ; 20
      (   89.52   -35.13   -80.02     0.58 S1)  ; 21
      (   88.36   -35.77   -81.77     0.58 S1)  ; 22
      (   88.94   -36.73   -84.30     0.58 S1)  ; 23
      (   87.77   -38.33   -84.90     0.58 S1)  ; 24
      (   88.07   -41.21   -85.28     0.58 S1)  ; 25
      (   88.65   -44.73   -84.48     0.58 S1)  ; 26
      (   89.52   -46.97   -84.38     0.58 S1)  ; 27
      (   90.11   -49.86   -84.90     0.58 S1)  ; 28
      (   89.82   -52.10   -85.70     0.58 S1)  ; 29
      (   90.98   -55.30   -88.47     0.58 S1)  ; 30
      (   93.03   -58.18   -90.10     0.58 S1)  ; 31
      (   93.90   -61.06   -91.13     0.58 S1)  ; 32
      (   94.78   -62.98   -93.32     0.58 S1)  ; 33
      (   96.82   -66.25   -94.38     0.29 S1)  ; 34
      (   97.40   -68.49   -95.75     0.29 S1)  ; 35
      (  100.03   -70.73   -98.07     0.29 S1)  ; 36
      (  101.20   -72.01  -100.13     0.29 S1)  ; 37
      (  102.66   -75.54  -103.38     0.29 S1)  ; 38
      (  104.41   -80.34  -104.70     0.29 S1)  ; 39
      (  107.03   -84.82  -105.70     0.29 S1)  ; 40
      (  108.78   -89.31  -108.63     0.29 S1)  ; 41
      (  108.49   -93.15  -111.38     0.29 S1)  ; 42
      (  108.78   -98.91  -111.60     0.29 S1)  ; 43
      (  108.78  -102.11  -113.42     0.29 S1)  ; 44
      (  108.78  -106.60  -115.40     0.29 S1)  ; 45
      (  109.95  -108.52  -117.70     0.29 S1)  ; 46
      (  107.03  -114.28  -118.15     0.29 S1)  ; 47
       High
    |
      (   76.98    10.09   -53.80     0.58 S1)  ; 1, R-2-2
      (   79.89    10.73   -54.97     0.58 S1)  ; 2
      (   80.77    11.37   -56.65     0.58 S1)  ; 3
      (   82.23    13.29   -57.75     0.58 S1)  ; 4
      (   83.69    14.57   -58.30     0.58 S1)  ; 5
      (   84.86    16.49   -59.17     0.58 S1)  ; 6
      (   86.02    18.09   -60.92     0.58 S1)  ; 7
      (   88.07    19.05   -61.32     0.58 S1)  ; 8
      (   89.52    20.98   -61.95     0.58 S1)  ; 9
      (   91.28    22.26   -62.77     0.58 S1)  ; 10
      (   93.32    23.22   -64.80     0.58 S1)  ; 11
      (   96.82    24.50   -66.52     0.58 S1)  ; 12
      (   98.28    26.74   -68.07     0.58 S1)  ; 13
      (  100.03    28.34   -69.27     0.58 S1)  ; 14
      (  102.07    29.94   -69.57     0.58 S1)  ; 15
      (  104.11    31.54   -70.67     0.58 S1)  ; 16
      (  105.28    33.14   -71.63     0.58 S1)  ; 17
      (  107.62    35.06   -72.77     0.58 S1)  ; 18
      (  109.08    36.35   -73.60     0.58 S1)  ; 19
      (
        (  110.53    36.35   -72.30     0.29 S1)  ; 1, R-2-2-1
        (  113.16    37.31   -73.15     0.29 S1)  ; 2
        (  115.20    39.23   -74.13     0.29 S1)  ; 3
        (  118.12    39.23   -74.13     0.29 S1)  ; 4
        (  120.16    41.15   -74.42     0.29 S1)  ; 5
        (  121.62    40.83   -75.18     0.29 S1)  ; 6
        (  123.08    41.47   -77.40     0.29 S1)  ; 7
        (  126.29    41.15   -79.60     0.29 S1)  ; 8
        (  129.21    41.15   -80.70     0.29 S1)  ; 9
        (  131.84    41.15   -82.20     0.29 S1)  ; 10
        (  135.05    40.83   -84.85     0.29 S1)  ; 11
        (  138.84    40.83   -86.00     0.29 S1)  ; 12
        (  142.93    41.15   -85.68     0.29 S1)  ; 13
        (  147.01    41.47   -86.27     0.29 S1)  ; 14
        (  150.51    42.43   -86.67     0.29 S1)  ; 15
        (  155.18    42.11   -89.55     0.29 S1)  ; 16
        (  160.73    41.79   -90.25     0.29 S1)  ; 17
        (  166.56    41.15   -81.67     0.29 S1)  ; 18
        (  170.07    39.23   -81.53     0.29 S1)  ; 19
        (  171.52    36.67   -80.68     0.29 S1)  ; 20
        (  170.65    34.10   -79.10     0.29 S1)  ; 21
         Normal
      |
        (  109.95    38.91   -74.15     0.58 S1)  ; 1, R-2-2-2
        (  112.29    40.83   -75.13     0.58 S1)  ; 2
        (  113.16    42.75   -77.38     0.58 S1)  ; 3
        (  114.33    44.99   -78.85     0.58 S1)  ; 4
        (  114.91    46.59   -82.28     0.58 S1)  ; 5
        (  117.83    47.87   -83.10     0.58 S1)  ; 6
        (  120.46    50.11   -85.45     0.58 S1)  ; 7
        (  123.08    52.36   -87.38     0.58 S1)  ; 8
        (  126.29    53.96   -88.38     0.58 S1)  ; 9
        (  129.50    56.52   -89.25     0.58 S1)  ; 10
        (  131.55    58.12   -89.85     0.58 S1)  ; 11
        (  133.30    59.72   -89.38     0.29 S1)  ; 12
        (  136.21    60.36   -91.65     0.29 S1)  ; 13
        (  139.13    62.28   -94.03     0.29 S1)  ; 14
        (  141.47    64.52   -97.28     0.29 S1)  ; 15
        (  144.09    65.81   -98.02     0.29 S1)  ; 16
        (  147.01    65.81   -98.72     0.29 S1)  ; 17
        (  150.51    68.05   -99.92     0.29 S1)  ; 18
        (  153.14    69.01  -102.57     0.29 S1)  ; 19
         High
      )  ;  End of split
    )  ;  End of split
  )  ;  End of split
)  ;  End of tree

( (Color DarkRed)
  (Dendrite)
  (   42.05    13.55   -47.88     0.88 S1)  ; Root
  (   42.05    12.59   -44.70     0.88 S1)  ; 1, R
  (   42.63    10.35   -42.80     0.88 S1)  ; 2
  (   43.80    10.03   -38.60     0.88 S1)  ; 3
  (   45.26     8.75   -35.33     0.88 S1)  ; 4
  (   46.13     7.47   -31.70     0.88 S1)  ; 5
  (   47.30     5.55   -33.10     0.88 S1)  ; 6
  (   48.17     2.66   -31.25     0.88 S1)  ; 7
  (   48.47     0.74   -28.33     0.88 S1)  ; 8
  (   47.88    -1.18   -27.50     0.88 S1)  ; 9
  (   49.93    -2.78   -26.67     0.88 S1)  ; 10
  (   49.05    -5.98   -25.40     0.88 S1)  ; 11
  (   49.93    -7.58   -23.92     0.88 S1)  ; 12
  (   50.51    -9.82   -21.98     0.88 S1)  ; 13
  (   51.68   -12.06   -19.97     0.88 S1)  ; 14
  (   52.84   -13.03   -18.55     0.88 S1)  ; 15
  (   54.89   -13.99   -17.90     0.88 S1)  ; 16
  (   54.30   -16.23   -17.45     0.88 S1)  ; 17
  (   56.05   -17.83   -15.52     0.88 S1)  ; 18
  (   56.93   -19.43   -13.57     0.88 S1)  ; 19
  (   57.80   -20.39    -9.77     0.88 S1)  ; 20
  (   57.80   -21.67    -6.40     0.88 S1)  ; 21
  (   56.93   -24.23    -7.70     0.88 S1)  ; 22
  (   56.05   -26.47   -10.17     0.88 S1)  ; 23
  (   55.47   -30.32   -10.43     0.88 S1)  ; 24
  (   56.35   -33.52    -8.63     0.88 S1)  ; 25
  (   57.22   -35.76    -5.90     0.88 S1)  ; 26
  (   56.35   -38.32    -3.55     0.88 S1)  ; 27
  (   54.59   -39.60    -2.85     0.88 S1)  ; 28
  (   52.26   -40.88    -2.57     0.88 S1)  ; 29
  (   51.38   -42.16    -1.15     0.88 S1)  ; 30
  (   50.80   -44.41    -0.57     0.88 S1)  ; 31
  (
    (   51.38   -44.73   -10.10     0.88 S1)  ; 1, R-1
    (   50.51   -46.01   -12.00     0.88 S1)  ; 2
    (   49.05   -49.21   -12.45     0.88 S1)  ; 3
    (   47.88   -51.45   -12.57     0.88 S1)  ; 4
    (   47.88   -52.73   -11.55     0.88 S1)  ; 5
    (   47.30   -54.01    -9.20     0.88 S1)  ; 6
    (   48.17   -55.29    -7.77     0.88 S1)  ; 7
    (   49.63   -56.57    -6.00     0.88 S1)  ; 8
    (   49.34   -57.54    -2.60     0.88 S1)  ; 9
    (   48.17   -59.14    -0.75     0.88 S1)  ; 10
    (   46.13   -60.74    -0.43     0.88 S1)  ; 11
    (   44.38   -62.34     0.77     0.88 S1)  ; 12
    (   43.51   -63.94     1.38     0.88 S1)  ; 13
    (   42.63   -66.82     2.20     0.88 S1)  ; 14
    (   42.63   -68.42     3.00     0.88 S1)  ; 15
    (   41.75   -71.62     3.50     0.88 S1)  ; 16
    (   42.92   -74.51     3.88     0.88 S1)  ; 17
    (   43.80   -77.77     4.90     0.88 S1)  ; 18
    (   44.67   -80.01     5.35     0.88 S1)  ; 19
    (   44.67   -82.58     3.57     0.88 S1)  ; 20
    (   45.55   -84.82     2.13     0.88 S1)  ; 21
    (   47.59   -86.74     2.35     0.88 S1)  ; 22
    (   47.88   -89.62     3.78     0.88 S1)  ; 23
    (   49.05   -91.22     6.70     0.88 S1)  ; 24
    (   48.17   -93.14     7.47     0.88 S1)  ; 25
    (   49.34   -95.38     7.80     0.58 S1)  ; 26
    (   48.76   -98.59     8.50     0.58 S1)  ; 27
    (   49.34  -100.83     9.50     0.58 S1)  ; 28
    (   49.34  -103.07     9.85     0.58 S1)  ; 29
    (   51.09  -103.39    10.02     0.58 S1)  ; 30
    (   52.55  -104.03    10.28     0.58 S1)  ; 31
    (   53.14  -106.59    10.68     0.58 S1)  ; 32
     Normal
  |
    (   52.55   -46.97    -3.08     0.88 S1)  ; 1, R-2
    (   53.43   -48.89    -0.10     0.88 S1)  ; 2
    (   54.89   -50.17     1.60     0.88 S1)  ; 3
    (   56.05   -52.73     2.35     0.88 S1)  ; 4
    (   56.64   -54.33     3.88     0.58 S1)  ; 5
    (   57.22   -56.25     5.48     0.58 S1)  ; 6
    (   56.64   -57.21     6.05     0.58 S1)  ; 7
    (   55.76   -57.54     6.05     0.29 S1)  ; 8
    (   54.01   -58.82     6.40     0.29 S1)  ; 9
    (   52.55   -60.42     4.35     0.29 S1)  ; 10
    (   51.38   -60.74     2.35     0.29 S1)  ; 11
    (   50.51   -61.38     1.27     0.29 S1)  ; 12
    (   48.76   -62.98    -0.05     0.29 S1)  ; 13
    (   46.42   -63.94    -0.10     0.29 S1)  ; 14
    (   44.67   -65.86    -2.42     0.29 S1)  ; 15
     Normal
  )  ;  End of split
)  ;  End of tree

( (Color RGB (128, 0, 255))
  (Dendrite)
  (   37.76    12.99   -46.08     0.58 S1)  ; Root
  (   35.43    12.35   -42.77     1.75 S1)  ; 1, R
  (   32.22    11.39   -40.22     1.75 S1)  ; 2
  (   29.01    10.43   -37.75     1.75 S1)  ; 3
  (   27.26     8.50   -37.40     1.75 S1)  ; 4

  (Cross
    (Color Green)
    (Name "Marker 3")
    (   27.69    10.72   -39.24     0.07 S1)  ; 1
    (   30.99    10.06   -39.78     0.07 S1)  ; 2
    (   33.86    11.16   -39.78     0.07 S1)  ; 3
    (   37.90    11.23   -40.80     0.07 S1)  ; 4
    (   32.46    10.65   -42.44     0.07 S1)  ; 5
    (   29.60     9.98   -42.44     0.07 S1)  ; 6
  )  ;  End of markers
  (
    (   25.43     9.95   -37.40     1.17 S1)  ; 1, R-1
    (   23.38    10.27   -40.10     1.17 S1)  ; 2
    (   22.22    10.92   -42.53     0.88 S1)  ; 3
    (   20.46    12.52   -43.25     1.17 S1)  ; 4
    (   19.30    14.44   -42.60     1.17 S1)  ; 5
    (   16.96    15.08   -41.67     1.17 S1)  ; 6
    (   15.80    17.32   -40.13     1.17 S1)  ; 7
    (   14.63    19.24   -39.52     1.17 S1)  ; 8
    (   12.88    20.20   -38.88     1.17 S1)  ; 9
    (   11.42    21.16   -38.47     1.17 S1)  ; 10

    (Cross
      (Color Green)
      (Name "Marker 3")
      (   23.65     8.83   -40.10     0.07 S1)  ; 1
      (   22.62     9.86   -39.94     0.07 S1)  ; 2
      (   18.21    12.43   -39.94     0.07 S1)  ; 3
      (   14.17    16.62   -39.94     0.07 S1)  ; 4
      (   17.26    15.74   -38.49     0.07 S1)  ; 5
      (   13.73    19.12   -38.91     0.07 S1)  ; 6
      (   13.22    20.81   -40.01     0.07 S1)  ; 7
      (   15.35    19.71   -40.01     0.07 S1)  ; 8
      (   20.64    12.50   -41.90     0.07 S1)  ; 9
      (   21.89    11.33   -41.90     0.07 S1)  ; 10
    )  ;  End of markers
    (
      (    9.37    23.01   -35.75     0.58 S1)  ; 1, R-1-1
      (    7.62    23.01   -33.35     0.58 S1)  ; 2
      (    5.87    23.33   -32.77     0.58 S1)  ; 3
      (    3.53    24.29   -31.55     0.58 S1)  ; 4
      (    2.37    25.57   -30.55     0.58 S1)  ; 5
      (    0.32    26.85   -30.10     0.58 S1)  ; 6
      (   -0.84    28.14   -29.45     0.58 S1)  ; 7
      (   -3.18    29.42   -28.65     0.58 S1)  ; 8
      (   -4.35    30.06   -27.85     0.58 S1)  ; 9
      (   -4.93    30.06   -24.82     0.58 S1)  ; 10
      (   -4.64    31.34   -23.65     0.29 S1)  ; 11
      (   -4.64    32.94   -22.83     0.29 S1)  ; 12
      (   -5.22    32.62   -20.90     0.29 S1)  ; 13
      (   -5.51    31.34   -18.35     0.29 S1)  ; 14
      (   -6.10    31.34   -17.52     0.29 S1)  ; 15
      (   -6.39    31.34   -16.73     0.29 S1)  ; 16
      (   -8.14    31.98   -15.05     0.29 S1)  ; 17
      (   -9.31    32.30   -13.95     0.29 S1)  ; 18
      (   -9.31    33.58   -12.45     0.29 S1)  ; 19
      (  -10.47    33.26    -9.77     0.29 S1)  ; 20
      (  -11.06    32.30    -7.30     0.29 S1)  ; 21
      (  -12.23    32.94    -5.30     0.29 S1)  ; 22
      (  -12.81    34.22    -4.35     0.29 S1)  ; 23
      (  -13.39    32.62    -1.65     0.29 S1)  ; 24
      (  -14.85    33.26     1.10     0.29 S1)  ; 25
      (  -14.85    35.18     2.10     0.29 S1)  ; 26
      (  -16.31    34.54     3.42     0.29 S1)  ; 27
      (  -16.60    34.86     4.38     0.29 S1)  ; 28
      (  -17.48    34.86     7.07     0.29 S1)  ; 29
      (  -17.77    35.82     8.65     0.29 S1)  ; 30
      (  -18.94    36.14     9.75     0.29 S1)  ; 31
      (  -20.69    35.50    11.65     0.29 S1)  ; 32
      (  -22.73    35.50    13.80     0.29 S1)  ; 33
      (  -23.02    36.46    14.60     0.29 S1)  ; 34
      (  -23.90    35.50    15.40     0.29 S1)  ; 35
      (  -25.36    36.46    17.05     0.29 S1)  ; 36
      (  -26.52    36.14    17.52     0.29 S1)  ; 37
      (  -28.57    35.50    18.92     0.29 S1)  ; 38
      (  -29.15    34.22    19.65     0.29 S1)  ; 39
       Low
    |
      (   10.25    24.04   -43.20     0.88 S1)  ; 1, R-1-2
      (    7.92    25.64   -43.58     0.88 S1)  ; 2
      (    7.33    26.61   -44.23     0.88 S1)  ; 3
      (    5.58    26.61   -44.78     0.88 S1)  ; 4
      (    2.66    26.61   -45.15     0.88 S1)  ; 5
      (   -0.25    28.21   -46.25     0.88 S1)  ; 6
      (   -2.59    29.81   -46.42     0.88 S1)  ; 7
      (   -4.05    31.09   -46.65     0.58 S1)  ; 8
      (   -5.80    30.13   -45.25     0.58 S1)  ; 9
      (   -9.01    30.77   -43.90     0.88 S1)  ; 10
      (  -11.34    31.73   -44.67     0.88 S1)  ; 11
      (  -13.68    32.69   -41.22     0.88 S1)  ; 12
      (  -16.89    33.97   -40.13     0.88 S1)  ; 13
      (  -20.42    35.89   -40.57     0.88 S1)  ; 14
      (  -22.17    37.49   -40.32     0.88 S1)  ; 15
      (  -24.80    39.09   -40.13     0.88 S1)  ; 16
      (  -27.71    41.34   -39.85     0.88 S1)  ; 17
      (  -28.59    43.26   -39.75     0.88 S1)  ; 18
      (  -30.63    43.90   -39.67     0.88 S1)  ; 19
      (  -32.38    45.50   -39.47     0.88 S1)  ; 20
      (  -35.19    46.71   -35.53     0.88 S1)  ; 21
      (  -38.11    47.35   -35.40     0.58 S1)  ; 22
      (  -40.74    49.59   -33.63     0.58 S1)  ; 23
      (  -43.36    50.87   -33.30     0.58 S1)  ; 24
      (  -45.11    50.55   -32.77     0.58 S1)  ; 25
      (  -46.86    50.55   -30.67     0.29 S1)  ; 26
      (  -47.16    52.47   -30.47     0.29 S1)  ; 27
      (  -48.03    54.07   -29.67     0.29 S1)  ; 28
      (  -49.49    55.35   -29.32     0.29 S1)  ; 29
      (  -51.24    56.31   -28.05     0.29 S1)  ; 30
      (  -51.24    57.92   -27.60     0.29 S1)  ; 31
      (  -51.24    58.24   -26.52     0.29 S1)  ; 32
      (  -52.41    59.20   -22.12     0.29 S1)  ; 33
      (  -53.87    59.52   -20.77     0.29 S1)  ; 34
      (  -54.74    59.84   -19.25     0.29 S1)  ; 35
      (  -53.87    60.80   -18.77     0.29 S1)  ; 36
      (  -55.33    61.12   -17.25     0.29 S1)  ; 37
      (  -57.37    60.48   -16.40     0.29 S1)  ; 38
      (  -60.29    61.44   -15.68     0.29 S1)  ; 39
      (  -62.04    61.76   -15.20     0.29 S1)  ; 40
      (  -63.50    62.72   -14.75     0.29 S1)  ; 41
      (  -65.25    61.76   -14.10     0.29 S1)  ; 42
      (  -65.83    60.48   -13.67     0.29 S1)  ; 43
      (  -67.00    60.48   -12.45     0.29 S1)  ; 44
      (  -67.29    61.12   -10.97     0.29 S1)  ; 45
      (  -69.92    62.40   -10.73     0.29 S1)  ; 46
      (  -71.67    63.36   -10.57     0.29 S1)  ; 47
      (  -75.46    63.68   -10.33     0.29 S1)  ; 48
      (  -76.92    63.04    -9.85     0.29 S1)  ; 49
      (  -78.38    63.36    -9.57     0.29 S1)  ; 50
      (  -80.13    64.32    -7.85     0.29 S1)  ; 51
      (  -82.17    64.96    -7.00     0.29 S1)  ; 52
      (  -82.76    65.28    -6.85     0.29 S1)  ; 53
      (  -83.92    64.64    -6.57     0.29 S1)  ; 54
      (  -85.68    65.92    -6.13     0.29 S1)  ; 55
      (  -88.59    67.20    -5.60     0.29 S1)  ; 56
      (  -89.47    69.12    -4.70     0.29 S1)  ; 57
      (  -90.64    71.36    -5.90     0.29 S1)  ; 58
       Normal
    )  ;  End of split
  |
    (   28.13     6.90   -37.42     1.17 S1)  ; 1, R-2
    (   27.26     4.66   -36.27     1.17 S1)  ; 2
    (   25.50     3.06   -35.10     1.17 S1)  ; 3
    (   24.54     1.17   -33.40     1.17 S1)  ; 4

    (Cross
      (Color Green)
      (Name "Marker 3")
      (   28.68     6.96   -38.56     0.07 S1)  ; 1
      (   25.89     3.65   -36.97     0.07 S1)  ; 2
    )  ;  End of markers
    (
      (   23.08     0.53   -33.40     0.88 S1)  ; 1, R-2-1
      (   23.38    -0.75   -30.67     0.88 S1)  ; 2
      (   24.25    -2.03   -27.73     0.88 S1)  ; 3
      (
        (   21.92    -2.35   -22.88     0.58 S1)  ; 1, R-2-1-1
        (   20.17    -2.03   -20.77     0.58 S1)  ; 2
        (   18.12    -1.71   -18.35     0.29 S1)  ; 3
        (   16.37    -2.03   -15.60     0.29 S1)  ; 4
        (   15.79    -2.99   -13.30     0.29 S1)  ; 5
        (   12.58    -3.31   -12.90     0.29 S1)  ; 6
        (   10.24    -4.59   -11.58     0.29 S1)  ; 7
        (    9.37    -4.91   -10.40     0.29 S1)  ; 8
        (    9.08    -3.63    -6.57     0.29 S1)  ; 9
        (    8.20    -5.55    -3.20     0.29 S1)  ; 10
        (    6.74    -4.59    -0.80     0.29 S1)  ; 11
        (    4.41    -2.67     5.05     0.29 S1)  ; 12
        (    3.82    -0.11     5.40     0.29 S1)  ; 13
        (    2.95     1.17     5.65     0.29 S1)  ; 14
        (    2.95     2.45     7.57     0.29 S1)  ; 15
        (    0.61     3.74     8.40     0.29 S1)  ; 16
        (
          (   -0.26     5.34    10.57     0.29 S1)  ; 1, R-2-1-1-1
          (    1.20     6.62    11.65     0.29 S1)  ; 2
          (   -0.26     6.62    14.45     0.29 S1)  ; 3
          (   -0.84     5.34    15.00     0.29 S1)  ; 4
          (   -2.01     6.30    15.57     0.29 S1)  ; 5
          (   -2.60     7.90    15.82     0.29 S1)  ; 6
          (   -2.89     8.86    16.55     0.29 S1)  ; 7
          (   -3.47    10.46    17.42     0.29 S1)  ; 8
          (   -3.18    10.78    18.55     0.29 S1)  ; 9
           Low
        |
          (   -1.14     2.45     3.92     0.29 S1)  ; 1, R-2-1-1-2
          (   -2.01     1.49     4.90     0.29 S1)  ; 2
          (   -3.76     1.81     5.00     0.29 S1)  ; 3
           Normal
        )  ;  End of split
      |
        (   26.00    -2.35   -30.33     0.29 S1)  ; 1, R-2-1-2
        (   26.59    -3.31   -29.45     0.29 S1)  ; 2
        (   26.00    -4.91   -27.73     0.29 S1)  ; 3
        (   26.00    -5.23   -23.55     0.29 S1)  ; 4
        (   26.59    -4.59   -19.92     0.29 S1)  ; 5
        (   27.46    -3.95   -17.85     0.29 S1)  ; 6
        (   29.50    -3.63   -15.95     0.29 S1)  ; 7
        (   30.09    -4.59   -13.47     0.29 S1)  ; 8
        (   31.84    -5.55   -12.47     0.29 S1)  ; 9
        (   31.84    -5.87   -10.40     0.29 S1)  ; 10
        (   32.71    -4.59    -8.07     0.29 S1)  ; 11
        (   30.96    -5.23    -6.75     0.29 S1)  ; 12
        (   31.25    -6.19    -5.65     0.29 S1)  ; 13
        (   32.42    -5.55    -4.10     0.29 S1)  ; 14
        (   31.55    -6.51     0.02     0.29 S1)  ; 15
        (   33.01    -7.47     1.05     0.29 S1)  ; 16
        (   33.59    -6.19     3.55     0.29 S1)  ; 17
        (   35.05    -6.83     5.42     0.29 S1)  ; 18
        (   34.17    -8.11     8.70     0.29 S1)  ; 19
        (   35.92    -7.47     8.42     0.29 S1)  ; 20
        (   34.76    -6.83    12.07     0.29 S1)  ; 21
        (   34.17    -4.27    13.18     0.29 S1)  ; 22
         Normal
      )  ;  End of split
    |
      (   24.63     0.18   -33.40     1.17 S1)  ; 1, R-2-2
      (   23.75    -2.06   -32.92     1.17 S1)  ; 2

      (Cross
        (Color Green)
        (Name "Marker 3")
        (   23.47     0.93   -33.13     0.07 S1)  ; 1
        (   25.16    -0.91   -32.96     0.07 S1)  ; 2
      )  ;  End of markers
      (
        (   24.23    -4.99   -31.77     1.17 S1)  ; 1, R-2-2-1
        (   24.23    -7.23   -31.50     1.17 S1)  ; 2
        (   24.23   -10.11   -31.13     1.17 S1)  ; 3
        (   25.40   -11.71   -32.67     1.17 S1)  ; 4
        (   26.28   -13.63   -35.80     1.17 S1)  ; 5
        (   25.98   -15.23   -39.25     1.17 S1)  ; 6
        (   25.69   -17.47   -40.48     1.17 S1)  ; 7

        (Cross
          (Color Green)
          (Name "Marker 3")
          (   24.99    -3.63   -32.26     0.07 S1)  ; 1
          (   25.80    -5.10   -32.26     0.07 S1)  ; 2
          (   24.11    -5.32   -32.26     0.07 S1)  ; 3
          (   25.58    -8.85   -31.74     0.07 S1)  ; 4
          (   26.39    -9.36   -31.74     0.07 S1)  ; 5
          (   25.72   -10.32   -31.74     0.07 S1)  ; 6
          (   23.52   -11.20   -32.60     0.07 S1)  ; 7
          (   23.67   -10.24   -33.07     0.07 S1)  ; 8
          (   24.04    -7.60   -32.61     0.07 S1)  ; 9
          (   24.99    -5.76   -32.61     0.07 S1)  ; 10
          (   23.30    -8.77   -31.13     0.07 S1)  ; 11
          (   27.19   -13.70   -33.85     0.07 S1)  ; 12
          (   24.55   -17.67   -37.08     0.07 S1)  ; 13
          (   25.36   -15.02   -34.47     0.07 S1)  ; 14
          (   27.27   -15.69   -35.61     0.07 S1)  ; 15
          (   24.55   -14.36   -35.61     0.07 S1)  ; 16
          (   25.36   -16.27   -34.11     0.07 S1)  ; 17
        )  ;  End of markers
        (
          (   24.23   -20.74   -41.82     0.29 S1)  ; 1, R-2-2-1-1
          (   22.48   -24.58   -42.33     0.29 S1)  ; 2
          (   21.02   -26.50   -43.85     0.29 S1)  ; 3
          (   20.15   -29.06   -40.57     0.29 S1)  ; 4
          (   18.98   -31.62   -35.77     0.58 S1)  ; 5
          (   17.52   -33.87   -34.72     0.58 S1)  ; 6
          (   16.06   -35.47   -32.80     0.58 S1)  ; 7
          (   16.06   -37.77   -31.35     0.58 S1)  ; 8
          (   14.31   -39.05   -30.90     0.58 S1)  ; 9
          (   12.56   -40.65   -30.17     0.58 S1)  ; 10
          (   12.27   -42.26   -29.92     0.58 S1)  ; 11
          (   11.10   -43.86   -29.90     0.58 S1)  ; 12
          (    9.64   -45.14   -29.62     0.58 S1)  ; 13
          (    7.89   -46.10   -30.27     0.58 S1)  ; 14
          (    6.14   -46.74   -30.67     0.58 S1)  ; 15
          (    4.97   -48.02   -31.15     0.58 S1)  ; 16
          (    3.81   -49.62   -31.98     0.58 S1)  ; 17
          (    2.64   -50.26   -34.05     0.58 S1)  ; 18
          (    1.18   -50.90   -35.95     0.58 S1)  ; 19
          (    0.01   -52.18   -37.00     0.58 S1)  ; 20
          (   -2.61   -53.46   -39.58     0.58 S1)  ; 21
          (   -4.36   -54.74   -41.17     0.58 S1)  ; 22
          (   -4.66   -56.66   -41.35     0.58 S1)  ; 23
          (   -4.07   -59.87   -42.75     0.58 S1)  ; 24
          (   -3.78   -62.75   -43.13     0.58 S1)  ; 25
          (   -4.36   -64.99   -43.05     0.58 S1)  ; 26
          (   -4.07   -67.55   -43.45     0.58 S1)  ; 27
          (   -2.03   -70.11   -40.70     0.58 S1)  ; 28
          (   -1.45   -72.36   -39.30     0.58 S1)  ; 29
          (    0.01   -73.96   -36.58     0.58 S1)  ; 30
          (    0.01   -75.24   -33.97     0.58 S1)  ; 31
          (    0.30   -77.48   -32.30     0.58 S1)  ; 32
          (    0.30   -81.00   -32.30     0.29 S1)  ; 33
          (    0.01   -83.88   -32.40     0.29 S1)  ; 34
          (   -0.28   -84.84   -30.75     0.29 S1)  ; 35
          (    0.01   -87.73   -30.75     0.29 S1)  ; 36
          (    1.47   -89.01   -27.25     0.29 S1)  ; 37
          (    2.35   -88.37   -27.27     0.29 S1)  ; 38

          (Cross
            (Color Green)
            (Name "Marker 3")
            (   23.66   -19.45   -41.82     0.07 S1)  ; 1
            (   24.69   -22.02   -41.61     0.07 S1)  ; 2
            (   23.66   -20.70   -40.46     0.07 S1)  ; 3
            (   24.47   -20.26   -40.46     0.07 S1)  ; 4
            (   22.78   -25.19   -43.50     0.07 S1)  ; 5
            (   22.34   -24.60   -42.40     0.07 S1)  ; 6
            (   21.38   -27.76   -44.26     0.07 S1)  ; 7
            (   19.47   -26.73   -44.26     0.07 S1)  ; 8
            (   18.59   -27.83   -41.45     0.07 S1)  ; 9
            (   19.84   -32.24   -40.61     0.07 S1)  ; 10
            (   18.30   -33.64   -40.61     0.07 S1)  ; 11
            (   20.94   -30.77   -39.74     0.07 S1)  ; 12
            (   17.64   -31.14   -39.74     0.07 S1)  ; 13
            (   19.55   -31.07   -38.75     0.07 S1)  ; 14
            (   14.85   -35.99   -38.64     0.07 S1)  ; 15
            (   16.97   -39.78   -31.07     0.07 S1)  ; 16
            (   15.50   -39.78   -31.07     0.07 S1)  ; 17
            (   14.69   -38.68   -30.75     0.07 S1)  ; 18
            (   15.72   -37.94   -30.75     0.07 S1)  ; 19
            (   17.12   -41.25   -30.01     0.07 S1)  ; 20
            (   14.11   -41.03   -30.01     0.07 S1)  ; 21
            (   13.74   -38.75   -29.38     0.07 S1)  ; 22
            (   13.59   -41.62   -29.38     0.07 S1)  ; 23
            (   11.98   -41.62   -32.49     0.07 S1)  ; 24
            (   10.65   -42.87   -31.40     0.07 S1)  ; 25
            (   13.08   -42.72   -31.40     0.07 S1)  ; 26
            (   13.15   -44.63   -31.40     0.07 S1)  ; 27
            (   10.29   -43.38   -31.40     0.07 S1)  ; 28
            (    9.40   -43.90   -31.40     0.07 S1)  ; 29
            (    8.38   -44.12   -31.40     0.07 S1)  ; 30
            (    8.52   -45.00   -31.39     0.07 S1)  ; 31
            (   10.29   -47.57   -30.91     0.07 S1)  ; 32
            (    7.35   -46.32   -31.95     0.07 S1)  ; 33
            (   11.24   -45.74   -32.10     0.07 S1)  ; 34
            (   12.27   -44.56   -30.44     0.07 S1)  ; 35
            (    7.35   -47.35   -30.44     0.07 S1)  ; 36
            (   12.05   -44.05   -28.85     0.07 S1)  ; 37
            (    2.87   -48.53   -31.01     0.07 S1)  ; 38
            (    7.64   -48.90   -30.91     0.07 S1)  ; 39
            (    5.44   -49.12   -31.52     0.07 S1)  ; 40
            (    3.38   -50.59   -32.04     0.07 S1)  ; 41
            (    2.72   -51.69   -32.95     0.07 S1)  ; 42
            (    1.11   -49.56   -33.72     0.07 S1)  ; 43
            (    0.00   -51.18   -30.66     0.07 S1)  ; 44
            (    1.99   -51.32   -31.15     0.07 S1)  ; 45
            (    0.81   -53.16   -31.50     0.07 S1)  ; 46
            (    0.00   -53.31   -31.50     0.07 S1)  ; 47
            (    0.66   -52.72   -32.36     0.07 S1)  ; 48
            (   -1.10   -54.04   -32.77     0.07 S1)  ; 49
            (   -2.27   -55.15   -33.20     0.07 S1)  ; 50
            (    0.00   -54.93   -34.44     0.07 S1)  ; 51
            (   -4.70   -54.34   -35.26     0.07 S1)  ; 52
            (   -3.15   -53.60   -35.26     0.07 S1)  ; 53
            (   -3.45   -51.84   -35.26     0.07 S1)  ; 54
            (   -4.92   -52.80   -35.41     0.07 S1)  ; 55
            (   -1.17   -55.15   -36.14     0.07 S1)  ; 56
            (   -1.32   -53.24   -36.14     0.07 S1)  ; 57
            (   -3.30   -56.77   -43.25     0.07 S1)  ; 58
            (   -5.95   -59.78   -42.64     0.07 S1)  ; 59
            (   -4.11   -60.22   -43.53     0.07 S1)  ; 60
            (   -3.82   -58.02   -42.69     0.07 S1)  ; 61
            (   -3.38   -58.38   -41.25     0.07 S1)  ; 62
            (   -4.40   -59.85   -41.25     0.07 S1)  ; 63
            (   -6.09   -57.57   -41.25     0.07 S1)  ; 64
            (   -1.54   -64.56   -42.01     0.07 S1)  ; 65
            (   -1.61   -62.50   -42.01     0.07 S1)  ; 66
            (   -5.21   -63.31   -42.01     0.07 S1)  ; 67
            (   -5.14   -62.35   -42.01     0.07 S1)  ; 68
            (   -4.77   -66.84   -42.81     0.07 S1)  ; 69
            (   -3.89   -64.63   -43.75     0.07 S1)  ; 70
            (   -3.15   -67.35   -43.75     0.07 S1)  ; 71
            (   -1.98   -68.16   -43.75     0.07 S1)  ; 72
            (   -4.26   -69.85   -43.75     0.07 S1)  ; 73
            (   -3.23   -61.47   -42.49     0.07 S1)  ; 74
            (   -2.93   -63.68   -42.11     0.07 S1)  ; 75
            (   -0.51   -71.84   -41.42     0.07 S1)  ; 76
            (   -4.48   -72.65   -43.18     0.07 S1)  ; 77
            (   -2.20   -72.57   -43.18     0.07 S1)  ; 78
            (   -3.01   -72.35   -41.77     0.07 S1)  ; 79
            (   -1.39   -74.12   -40.94     0.07 S1)  ; 80
            (   -0.73   -75.22   -41.64     0.07 S1)  ; 81
            (   -0.44   -69.56   -42.67     0.07 S1)  ; 82
            (    1.69   -78.01   -39.59     0.07 S1)  ; 83
            (   -0.88   -79.34   -40.38     0.07 S1)  ; 84
            (    0.52   -73.68   -38.25     0.07 S1)  ; 85
            (    0.59   -80.07   -39.31     0.07 S1)  ; 86
            (    1.03   -81.03   -37.76     0.07 S1)  ; 87
            (    2.21   -82.65   -36.39     0.07 S1)  ; 88
            (    1.11   -82.28   -36.39     0.07 S1)  ; 89
            (    0.59   -83.01   -36.39     0.07 S1)  ; 90
            (    1.18   -85.81   -35.41     0.07 S1)  ; 91
            (   -0.73   -87.35   -35.41     0.07 S1)  ; 92
            (    1.91   -89.34   -34.30     0.07 S1)  ; 93
            (    0.22   -88.38   -34.30     0.07 S1)  ; 94
            (    0.81   -86.84   -34.30     0.07 S1)  ; 95
            (    2.06   -90.00   -32.97     0.07 S1)  ; 96
            (    2.72   -89.56   -32.97     0.07 S1)  ; 97
            (    3.82   -88.68   -32.97     0.07 S1)  ; 98
          )  ;  End of markers
           Normal
        |
          (   27.15   -18.11   -40.48     0.88 S1)  ; 1, R-2-2-1-2
          (   27.03   -19.62   -40.60     0.88 S1)  ; 2
          (
            (   26.74   -21.22   -46.12     0.29 S1)  ; 1, R-2-2-1-2-1
            (   25.86   -23.14   -48.05     0.29 S1)  ; 2
            (   26.74   -25.07   -48.15     0.29 S1)  ; 3
            (   26.74   -26.35   -50.25     0.29 S1)  ; 4
            (   26.45   -27.31   -52.85     0.29 S1)  ; 5
            (   25.86   -29.23   -53.82     0.29 S1)  ; 6
            (   24.11   -31.79   -55.52     0.29 S1)  ; 7
            (   22.36   -34.35   -56.00     0.29 S1)  ; 8
            (   20.61   -36.27   -57.63     0.29 S1)  ; 9
            (   20.32   -39.16   -61.77     0.29 S1)  ; 10
            (   20.03   -41.08   -62.47     0.29 S1)  ; 11
            (   17.98   -42.04   -63.90     0.29 S1)  ; 12
            (   16.82   -44.60   -62.70     0.29 S1)  ; 13
            (   15.36   -46.52   -66.60     0.29 S1)  ; 14
            (   13.61   -47.80   -70.10     0.29 S1)  ; 15
            (   11.56   -51.00   -72.88     0.29 S1)  ; 16
             Normal
          |
            (   26.86   -19.71   -40.60     0.88 S1)  ; 1, R-2-2-1-2-2
            (   25.98   -21.32   -41.20     0.88 S1)  ; 2
            (   26.86   -23.88   -42.30     0.88 S1)  ; 3
            (   28.61   -26.44   -39.82     1.17 S1)  ; 4
            (   29.49   -28.68   -38.42     1.17 S1)  ; 5
            (   30.07   -32.52   -38.25     1.17 S1)  ; 6
            (   29.95   -33.71   -38.25     1.17 S1)  ; 7
            (
              (   29.07   -35.31   -41.42     0.58 S1)  ; 1, R-2-2-1-2-2-1
              (   29.07   -37.23   -44.02     0.58 S1)  ; 2
              (   29.07   -40.12   -46.32     0.58 S1)  ; 3
              (   29.36   -42.68   -47.13     0.58 S1)  ; 4
              (   30.24   -45.24   -47.53     0.58 S1)  ; 5
              (   30.82   -46.84   -48.07     0.58 S1)  ; 6
              (   29.95   -48.44   -49.43     0.58 S1)  ; 7
              (   29.07   -49.08   -49.50     0.58 S1)  ; 8
              (   29.66   -50.36   -50.00     0.58 S1)  ; 9
              (   31.12   -51.32   -50.77     0.58 S1)  ; 10
              (   31.41   -52.28   -51.67     0.58 S1)  ; 11
              (   31.12   -53.89   -52.67     0.58 S1)  ; 12
              (   31.12   -55.49   -54.02     0.58 S1)  ; 13
              (   31.41   -57.41   -54.72     0.58 S1)  ; 14
              (   30.82   -59.01   -57.00     0.58 S1)  ; 15
              (   30.53   -59.97   -60.03     0.58 S1)  ; 16
              (   29.07   -61.57   -60.45     0.58 S1)  ; 17
              (   28.49   -63.49   -62.02     0.58 S1)  ; 18
              (   28.49   -65.09   -62.88     0.58 S1)  ; 19
              (   28.49   -66.05   -63.88     0.58 S1)  ; 20
              (   27.61   -67.33   -63.97     0.58 S1)  ; 21
              (   27.61   -69.58   -65.57     0.58 S1)  ; 22
              (   26.45   -71.18   -66.38     0.58 S1)  ; 23
              (   26.45   -73.10   -66.68     0.58 S1)  ; 24
              (   24.40   -75.02   -67.25     0.58 S1)  ; 25
              (   23.53   -76.30   -68.02     0.58 S1)  ; 26
              (   23.24   -77.58   -69.18     0.58 S1)  ; 27
              (   23.24   -79.82   -70.45     0.58 S1)  ; 28
              (   24.11   -82.38   -72.10     0.58 S1)  ; 29
              (   24.40   -85.01   -70.38     0.58 S1)  ; 30
              (   24.70   -87.89   -70.65     0.58 S1)  ; 31
              (   26.45   -90.13   -70.90     0.58 S1)  ; 32
              (   26.15   -93.98   -71.52     0.58 S1)  ; 33
              (   27.32   -95.58   -72.65     0.58 S1)  ; 34
              (   26.74   -97.18   -75.05     0.58 S1)  ; 35
              (   26.45   -98.46   -79.67     0.58 S1)  ; 36
              (   28.20  -100.38   -82.10     0.58 S1)  ; 37
              (   26.74  -102.94   -83.20     0.58 S1)  ; 38
              (   28.49  -105.50   -87.70     0.58 S1)  ; 39
              (   28.49  -108.07   -88.32     0.58 S1)  ; 40
              (   29.36  -110.95   -90.80     0.58 S1)  ; 41
              (   30.82  -113.51   -93.72     0.58 S1)  ; 42
              (   31.41  -115.75   -98.10     0.58 S1)  ; 43
              (   31.99  -119.27  -101.17     0.58 S1)  ; 44
              (   32.87  -122.15  -101.45     0.58 S1)  ; 45
               High
            |
              (   30.65   -35.09   -37.92     1.17 S1)  ; 1, R-2-2-1-2-2-2
              (   31.82   -38.29   -37.92     0.88 S1)  ; 2
              (   32.40   -40.85   -37.00     0.88 S1)  ; 3
              (   32.99   -42.77   -35.77     0.88 S1)  ; 4
              (   34.74   -44.05   -32.83     0.88 S1)  ; 5
              (   36.49   -45.33   -30.33     0.88 S1)  ; 6
              (   37.37   -47.57   -28.72     0.88 S1)  ; 7
              (   38.24   -49.56   -28.25     0.88 S1)  ; 8
              (   37.95   -51.80   -27.65     0.88 S1)  ; 9
              (   37.37   -54.04   -27.47     0.88 S1)  ; 10
              (   36.49   -56.92   -27.47     0.88 S1)  ; 11
              (   36.78   -59.49   -26.95     0.88 S1)  ; 12
              (   36.49   -61.41   -25.13     0.88 S1)  ; 13
              (   36.78   -63.33   -24.82     0.88 S1)  ; 14
              (   37.07   -65.57   -24.50     0.88 S1)  ; 15
              (   36.49   -67.49   -22.40     0.88 S1)  ; 16
              (   35.91   -69.73   -21.63     0.88 S1)  ; 17
              (   35.32   -72.61   -20.60     0.88 S1)  ; 18
              (   35.61   -74.86   -20.23     0.88 S1)  ; 19
              (   37.66   -76.46   -21.02     0.88 S1)  ; 20
              (   39.41   -79.02   -22.75     0.88 S1)  ; 21
              (   40.58   -80.94   -21.30     0.88 S1)  ; 22
              (   41.45   -83.50   -18.95     0.88 S1)  ; 23
              (   42.03   -86.38   -17.38     0.88 S1)  ; 24
              (   40.87   -87.98   -17.10     0.88 S1)  ; 25
              (   39.12   -89.59   -16.92     0.88 S1)  ; 26
              (   39.41   -91.51   -16.45     0.88 S1)  ; 27
              (   40.28   -93.11   -16.30     0.88 S1)  ; 28
              (   40.58   -94.71   -15.60     0.88 S1)  ; 29
              (   40.28   -96.31   -15.45     0.88 S1)  ; 30
              (   39.12   -97.27   -14.07     0.88 S1)  ; 31
              (   37.66   -98.55   -13.97     0.88 S1)  ; 32
              (   37.66   -99.83   -13.20     0.88 S1)  ; 33
              (   38.24  -102.39   -12.75     0.88 S1)  ; 34
              (   37.37  -104.32   -11.17     0.88 S1)  ; 35
              (   36.78  -107.20   -11.02     0.88 S1)  ; 36
              (   37.07  -110.52   -15.30     0.88 S1)  ; 37
              (   38.24  -112.45   -13.72     0.88 S1)  ; 38
              (   37.95  -114.05   -13.30     0.88 S1)  ; 39
              (   37.66  -116.61   -12.05     0.88 S1)  ; 40
              (   36.78  -118.21   -11.50     0.88 S1)  ; 41
              (   37.07  -121.41   -10.95     0.88 S1)  ; 42
              (   37.95  -123.97   -10.68     0.88 S1)  ; 43
              (   38.53  -125.89    -9.70     0.88 S1)  ; 44
              (   38.53  -127.50    -5.77     0.88 S1)  ; 45
              (   37.95  -129.42    -3.17     0.88 S1)  ; 46
              (   37.07  -130.70    -1.70     0.88 S1)  ; 47
              (   38.24  -133.26     0.55     0.58 S1)  ; 48
              (   39.99  -134.22     4.15     0.58 S1)  ; 49
              (   42.03  -134.54     4.95     0.58 S1)  ; 50
              (   45.83  -134.86     7.25     0.29 S1)  ; 51
              (   50.79  -134.22     9.60     0.29 S1)  ; 52
              (   53.42  -133.26    10.60     0.29 S1)  ; 53
              (   55.46  -132.30    13.20     0.29 S1)  ; 54
              (   58.08  -131.02    14.65     0.29 S1)  ; 55
               Low
            )  ;  End of split
          )  ;  End of split
        )  ;  End of split
      |
        (   21.42    -3.34   -31.60     0.88 S1)  ; 1, R-2-2-2
        (   20.25    -4.94   -30.50     0.88 S1)  ; 2
        (   19.08    -6.55   -34.22     0.88 S1)  ; 3
        (   16.75    -8.15   -34.65     0.88 S1)  ; 4
        (   14.12    -9.11   -35.05     0.88 S1)  ; 5
        (   12.37   -11.99   -35.67     0.88 S1)  ; 6
        (   11.50   -14.23   -36.55     0.88 S1)  ; 7
        (   10.04   -15.83   -35.45     0.88 S1)  ; 8
        (    8.58   -17.75   -33.07     0.88 S1)  ; 9
        (    7.41   -19.67   -31.67     0.88 S1)  ; 10
        (    6.24   -23.52   -31.45     0.88 S1)  ; 11
        (    5.37   -26.40   -31.22     0.88 S1)  ; 12
        (    3.91   -28.32   -33.65     0.88 S1)  ; 13
        (    2.16   -29.92   -34.58     0.88 S1)  ; 14
        (    2.74   -32.16   -35.75     0.88 S1)  ; 15
        (    2.16   -34.08   -38.03     0.88 S1)  ; 16
        (    0.12   -35.69   -39.45     0.88 S1)  ; 17
        (   -1.63   -38.57   -39.92     0.88 S1)  ; 18
        (   -2.80   -41.13   -40.92     0.88 S1)  ; 19
        (   -2.80   -43.69   -41.10     0.88 S1)  ; 20
        (   -4.55   -45.61   -41.20     0.88 S1)  ; 21
        (   -6.01   -48.17   -40.83     0.88 S1)  ; 22
        (   -7.18   -49.77   -41.65     0.88 S1)  ; 23
        (   -7.76   -52.40   -40.40     0.88 S1)  ; 24
        (   -8.93   -54.32   -40.77     0.88 S1)  ; 25
        (  -10.39   -56.56   -41.30     0.88 S1)  ; 26
        (  -11.85   -59.12   -41.75     0.88 S1)  ; 27
        (  -13.31   -60.73   -42.92     0.88 S1)  ; 28
        (
          (  -13.51   -63.61   -39.85     0.58 S1)  ; 1, R-2-2-2-1
          (  -14.68   -65.85   -39.65     0.58 S1)  ; 2
          (  -16.14   -67.45   -42.53     0.58 S1)  ; 3
          (  -16.14   -69.69   -45.00     0.58 S1)  ; 4
          (  -17.89   -71.61   -46.45     0.58 S1)  ; 5
          (  -18.18   -75.78   -46.63     0.58 S1)  ; 6
          (  -19.06   -77.70   -46.85     0.58 S1)  ; 7
          (  -19.93   -79.62   -47.17     0.58 S1)  ; 8
          (  -20.81   -82.18   -48.75     0.58 S1)  ; 9
          (  -22.56   -84.74   -48.90     0.58 S1)  ; 10
          (  -23.43   -86.98   -49.22     0.58 S1)  ; 11
          (  -23.14   -89.54   -49.55     0.58 S1)  ; 12
          (  -23.72   -91.79   -49.58     0.58 S1)  ; 13
          (  -23.43   -94.03   -49.97     0.58 S1)  ; 14
          (  -24.02   -96.27   -51.40     0.58 S1)  ; 15
          (  -24.60   -97.55   -52.28     0.58 S1)  ; 16
          (  -24.89   -99.79   -52.53     0.58 S1)  ; 17
          (  -26.06  -101.07   -52.53     0.58 S1)  ; 18
          (  -27.52  -102.03   -52.75     0.58 S1)  ; 19
          (  -28.10  -104.59   -53.65     0.58 S1)  ; 20
          (  -29.27  -106.84   -54.27     0.58 S1)  ; 21
          (  -29.27  -108.44   -55.45     0.58 S1)  ; 22
          (  -30.14  -110.36   -56.85     0.58 S1)  ; 23
          (  -32.19  -111.00   -58.10     0.58 S1)  ; 24
          (  -33.94  -111.32   -60.13     0.58 S1)  ; 25
          (  -36.56  -112.60   -61.88     0.58 S1)  ; 26
          (  -38.90  -113.88   -63.33     0.58 S1)  ; 27
          (  -42.11  -114.52   -64.32     0.58 S1)  ; 28
          (  -44.74  -115.48   -66.52     0.58 S1)  ; 29
          (  -46.49  -114.52   -67.50     0.58 S1)  ; 30
          (  -47.65  -113.56   -69.32     0.58 S1)  ; 31
          (  -49.40  -112.60   -70.90     0.58 S1)  ; 32
          (  -51.16  -111.96   -71.63     0.58 S1)  ; 33
           Normal
        |
          (  -15.06   -62.97   -46.38     0.88 S1)  ; 1, R-2-2-2-2
          (  -16.52   -63.29   -48.58     0.58 S1)  ; 2
          (  -17.98   -64.57   -49.85     0.58 S1)  ; 3
          (  -18.85   -66.17   -52.55     0.58 S1)  ; 4
          (  -21.19   -67.45   -53.75     0.58 S1)  ; 5
          (  -23.23   -68.73   -56.55     0.58 S1)  ; 6
          (  -24.98   -70.01   -57.67     0.58 S1)  ; 7
          (  -25.85   -70.97   -58.58     0.58 S1)  ; 8
          (  -26.15   -72.89   -59.35     0.58 S1)  ; 9
          (  -28.48   -74.49   -61.25     0.58 S1)  ; 10
          (  -28.77   -76.10   -64.07     0.58 S1)  ; 11
          (  -29.94   -78.02   -64.70     0.58 S1)  ; 12
          (  -31.11   -79.62   -67.07     0.58 S1)  ; 13
          (  -31.98   -81.54   -67.07     0.29 S1)  ; 14
          (  -33.73   -83.14   -70.00     0.29 S1)  ; 15
          (  -35.69   -84.10   -71.03     0.29 S1)  ; 16
          (  -37.15   -85.70   -73.50     0.29 S1)  ; 17
          (  -38.32   -87.62   -73.75     0.29 S1)  ; 18
          (  -39.48   -89.54   -74.00     0.29 S1)  ; 19
          (  -40.36   -92.11   -75.18     0.29 S1)  ; 20
          (  -42.40   -95.31   -76.92     0.29 S1)  ; 21
          (  -44.15   -98.51   -77.28     0.29 S1)  ; 22
          (  -44.74  -100.11   -77.50     0.29 S1)  ; 23
          (  -47.36  -101.07   -77.53     0.29 S1)  ; 24
          (  -49.70  -102.99   -77.68     0.29 S1)  ; 25
          (  -51.16  -104.59   -74.05     0.29 S1)  ; 26
          (  -52.91  -106.20   -72.60     0.29 S1)  ; 27
          (  -53.78  -109.40   -77.65     0.29 S1)  ; 28
          (  -54.66  -113.88   -75.85     0.29 S1)  ; 29
          (  -54.95  -116.12   -78.95     0.29 S1)  ; 30
          (  -55.53  -118.36   -81.90     0.29 S1)  ; 31
          (  -58.74  -121.57   -84.17     0.29 S1)  ; 32
           Normal
        )  ;  End of split
      )  ;  End of split
    )  ;  End of split
  )  ;  End of split
)  ;  End of tree

( (Color DarkYellow)
  (Dendrite)
  (   41.62    11.76   -57.28     1.46 S1)  ; Root
  (   41.33    10.16   -57.28     2.04 S1)  ; 1, R
  (   40.16     7.60   -56.77     2.04 S1)  ; 2
  (   38.70     5.67   -58.75     2.04 S1)  ; 3
  (   36.95     3.43   -63.02     1.75 S1)  ; 4
  (   34.91     0.87   -66.03     1.75 S1)  ; 5
  (   34.62    -1.37   -68.88     1.46 S1)  ; 6
  (
    (   33.16    -3.61   -62.97     0.88 S1)  ; 1, R-1
    (   33.45    -6.49   -60.92     0.88 S1)  ; 2
    (   34.03    -9.38   -58.75     0.88 S1)  ; 3
    (   33.45   -11.94   -57.20     0.88 S1)  ; 4
    (   32.57   -13.86   -55.77     0.88 S1)  ; 5
    (   32.87   -15.78   -55.13     0.88 S1)  ; 6
    (   31.99   -16.74   -54.55     0.88 S1)  ; 7
    (
      (   34.33   -19.62   -53.90     0.58 S1)  ; 1, R-1-1
      (   35.78   -21.86   -54.15     0.58 S1)  ; 2
      (   37.54   -24.11   -52.00     0.58 S1)  ; 3
      (   39.58   -26.99   -51.70     0.58 S1)  ; 4
      (   40.45   -28.91   -48.25     0.58 S1)  ; 5
      (   38.70   -30.83   -45.97     0.58 S1)  ; 6
      (   40.16   -33.07   -43.92     0.58 S1)  ; 7
      (   40.75   -34.03   -44.43     0.58 S1)  ; 8
      (
        (   42.21   -37.74   -44.43     0.58 S1)  ; 1, R-1-1-1
        (   41.62   -40.31   -45.95     0.58 S1)  ; 2
        (   42.50   -42.23   -47.47     0.58 S1)  ; 3
        (   44.83   -43.83   -48.22     0.58 S1)  ; 4
        (   46.58   -44.15   -45.17     0.58 S1)  ; 5
        (   48.92   -44.47   -42.85     0.58 S1)  ; 6
        (   48.63   -45.75   -40.07     0.58 S1)  ; 7
        (   49.21   -47.99   -37.85     0.58 S1)  ; 8
        (   49.21   -50.55   -35.88     0.58 S1)  ; 9
        (   49.50   -53.76   -34.88     0.58 S1)  ; 10
        (   50.96   -55.36   -34.00     0.58 S1)  ; 11
        (   51.84   -56.32   -33.80     0.58 S1)  ; 12
        (   52.71   -58.24   -38.50     0.58 S1)  ; 13
        (   54.17   -59.84   -39.80     0.58 S1)  ; 14
        (   55.63   -60.80   -41.25     0.58 S1)  ; 15
        (   56.51   -64.32   -41.32     0.58 S1)  ; 16
        (   58.55   -65.60   -42.13     0.58 S1)  ; 17
        (   60.59   -68.49   -43.58     0.58 S1)  ; 18
        (   62.34   -72.33   -43.65     0.58 S1)  ; 19
        (   63.22   -74.57   -43.85     0.58 S1)  ; 20
        (   65.26   -77.13   -42.15     0.58 S1)  ; 21
        (   66.72   -79.05   -40.15     0.58 S1)  ; 22
        (   68.47   -81.29   -39.55     0.58 S1)  ; 23
        (   69.93   -83.54   -39.38     0.58 S1)  ; 24
        (   69.35   -86.74   -39.28     0.58 S1)  ; 25
        (   68.28   -88.44   -47.37     0.58 S1)  ; 26
        (   68.58   -90.36   -48.85     0.58 S1)  ; 27
        (   69.16   -93.57   -52.67     0.58 S1)  ; 28
        (   68.87   -95.49   -54.17     0.58 S1)  ; 29
        (   69.74   -96.77   -55.47     0.29 S1)  ; 30
        (   69.16   -99.01   -55.70     0.29 S1)  ; 31
        (   67.99  -100.93   -56.03     0.29 S1)  ; 32
        (   69.16  -104.13   -56.55     0.58 S1)  ; 33
        (   69.45  -107.34   -57.42     0.58 S1)  ; 34
        (   68.28  -108.94   -54.07     0.29 S1)  ; 35
        (   67.99  -111.18   -49.67     0.29 S1)  ; 36
        (   68.28  -112.78   -51.08     0.29 S1)  ; 37
        (   69.45  -113.74   -56.12     0.29 S1)  ; 38
        (   69.45  -115.34   -57.77     0.29 S1)  ; 39
        (   68.58  -118.54   -58.25     0.29 S1)  ; 40
        (   67.99  -121.74   -58.30     0.29 S1)  ; 41
        (   65.66  -123.03   -58.88     0.29 S1)  ; 42
         Normal
      |
        (   42.20   -35.63   -48.97     0.58 S1)  ; 1, R-1-1-2
        (   42.20   -38.52   -52.20     0.58 S1)  ; 2
        (   43.08   -40.76   -54.55     0.58 S1)  ; 3
        (   43.08   -42.04   -54.65     0.58 S1)  ; 4
        (   44.25   -44.28   -55.07     0.58 S1)  ; 5
        (   46.00   -46.84   -55.85     0.58 S1)  ; 6
        (   46.87   -49.08   -50.90     0.58 S1)  ; 7
        (   48.04   -51.96   -46.90     0.58 S1)  ; 8
        (   49.79   -54.85   -45.60     0.58 S1)  ; 9
        (   49.50   -55.81   -42.98     0.58 S1)  ; 10
        (   46.87   -56.77   -42.75     0.58 S1)  ; 11
        (   45.71   -58.69   -42.47     0.58 S1)  ; 12
        (   45.71   -60.61   -45.45     0.58 S1)  ; 13
        (   46.58   -62.53   -47.17     0.58 S1)  ; 14
        (   47.75   -63.81   -49.95     0.58 S1)  ; 15
        (   49.50   -64.13   -50.92     0.58 S1)  ; 16
        (   50.38   -66.37   -53.02     0.58 S1)  ; 17
        (   51.83   -67.97   -54.20     0.58 S1)  ; 18
        (   53.29   -70.86   -56.70     0.58 S1)  ; 19
        (   54.46   -72.78   -57.45     0.58 S1)  ; 20
        (   55.92   -74.38   -57.90     0.58 S1)  ; 21
        (   55.92   -76.17   -59.83     0.58 S1)  ; 22
        (   54.76   -78.73   -60.60     0.58 S1)  ; 23
        (   56.21   -80.97   -62.02     0.58 S1)  ; 24
        (   55.92   -82.89   -63.05     0.58 S1)  ; 25
        (   54.76   -84.82   -65.05     0.58 S1)  ; 26
        (   53.88   -88.34   -65.27     0.58 S1)  ; 27
        (   55.34   -91.86   -66.25     0.58 S1)  ; 28
        (   55.05   -93.14   -66.90     0.58 S1)  ; 29
        (   57.38   -94.74   -67.38     0.58 S1)  ; 30
        (   60.88   -96.02   -68.70     0.58 S1)  ; 31
        (   62.34   -97.94   -68.95     0.29 S1)  ; 32
        (   63.80   -99.55   -71.07     0.29 S1)  ; 33
        (   66.43  -100.83   -67.85     0.29 S1)  ; 34
         Normal
      )  ;  End of split
    |
      (   29.72   -19.29   -54.40     0.58 S1)  ; 1, R-1-2
      (   26.80   -21.22   -53.35     0.58 S1)  ; 2
      (   25.34   -23.46   -52.25     0.58 S1)  ; 3
      (   25.05   -25.38   -51.50     0.58 S1)  ; 4
      (   23.00   -26.98   -50.97     0.58 S1)  ; 5
      (   20.38   -28.26   -50.97     0.58 S1)  ; 6
      (   18.63   -31.14   -50.68     0.58 S1)  ; 7
      (   17.46   -34.34   -50.38     0.58 S1)  ; 8
      (   16.00   -36.27   -53.42     0.58 S1)  ; 9
      (   13.67   -37.87   -54.00     0.58 S1)  ; 10
      (   11.62   -39.15   -56.03     0.58 S1)  ; 11
      (   10.16   -42.03   -56.82     0.58 S1)  ; 12
      (    9.00   -43.63   -57.85     0.58 S1)  ; 13
      (    6.66   -45.23   -60.05     0.58 S1)  ; 14
      (    4.91   -47.79   -63.17     0.58 S1)  ; 15
      (    3.16   -49.71   -63.17     0.58 S1)  ; 16
      (    0.53   -50.68   -63.38     0.58 S1)  ; 17
      (   -2.09   -52.60   -65.65     0.58 S1)  ; 18
      (   -3.84   -54.52   -65.65     0.58 S1)  ; 19
      (
        (   -6.47   -56.44   -65.65     0.29 S1)  ; 1, R-1-2-1
        (   -7.64   -57.40   -64.80     0.29 S1)  ; 2
        (  -10.26   -59.96   -66.20     0.29 S1)  ; 3
        (  -14.35   -62.84   -66.65     0.29 S1)  ; 4
        (  -17.56   -65.41   -67.28     0.29 S1)  ; 5
        (  -20.18   -66.69   -68.42     0.29 S1)  ; 6
        (  -25.44   -68.93   -67.63     0.29 S1)  ; 7
        (  -30.98   -70.21   -68.45     0.29 S1)  ; 8
        (  -34.48   -70.85   -70.00     0.29 S1)  ; 9
        (  -38.57   -71.81   -70.97     0.29 S1)  ; 10
        (  -42.36   -72.13   -72.32     0.29 S1)  ; 11
        (  -44.99   -71.49   -73.67     0.29 S1)  ; 12
        (  -49.07   -70.53   -73.85     0.29 S1)  ; 13
        (  -53.19   -70.26   -76.80     0.29 S1)  ; 14
        (  -56.98   -70.26   -79.27     0.29 S1)  ; 15
        (  -61.07   -71.86   -82.17     0.29 S1)  ; 16
        (  -66.03   -74.10   -84.63     0.29 S1)  ; 17
        (  -69.82   -77.62   -84.78     0.29 S1)  ; 18
        (  -73.03   -78.59   -85.15     0.29 S1)  ; 19
        (  -76.24   -78.26   -86.20     0.29 S1)  ; 20
        (  -82.37   -78.91   -78.80     0.29 S1)  ; 21
        (  -83.83   -80.19   -74.65     0.29 S1)  ; 22
        (  -85.00   -81.79   -71.07     0.29 S1)  ; 23
         Normal
      |
        (   -3.29   -55.53   -67.60     0.58 S1)  ; 1, R-1-2-2
        (   -5.33   -57.77   -66.80     0.58 S1)  ; 2
        (   -6.79   -59.69   -67.65     0.58 S1)  ; 3
        (   -8.54   -60.97   -68.38     0.58 S1)  ; 4
        (   -9.42   -62.89   -70.65     0.58 S1)  ; 5
        (  -11.46   -64.18   -71.30     0.88 S1)  ; 6
        (  -12.34   -66.10   -73.35     0.88 S1)  ; 7
        (  -14.09   -68.34   -74.35     0.88 S1)  ; 8
        (  -17.59   -69.94   -76.13     0.88 S1)  ; 9
        (  -18.76   -72.18   -76.47     0.88 S1)  ; 10
        (  -20.51   -75.06   -76.92     0.88 S1)  ; 11
        (  -22.84   -77.30   -74.20     0.88 S1)  ; 12
        (  -25.47   -78.59   -72.50     0.88 S1)  ; 13
        (  -27.51   -80.19   -72.38     0.88 S1)  ; 14
        (  -28.97   -82.11   -72.22     0.88 S1)  ; 15
        (  -31.30   -84.03   -72.22     0.88 S1)  ; 16
        (  -33.35   -85.95   -71.88     0.88 S1)  ; 17
        (  -35.10   -87.55   -71.28     0.88 S1)  ; 18
        (  -36.27   -88.83   -72.28     0.88 S1)  ; 19
        (  -36.85   -90.43   -73.07     0.88 S1)  ; 20
        (  -37.43   -92.67   -68.95     0.88 S1)  ; 21
        (  -36.85   -95.56   -68.45     0.88 S1)  ; 22
        (  -36.56   -98.44   -68.38     0.88 S1)  ; 23
        (  -36.85  -102.60   -71.00     0.88 S1)  ; 24
        (  -37.43  -106.76   -71.17     0.88 S1)  ; 25
        (  -38.89  -110.93   -71.28     0.88 S1)  ; 26
        (  -40.06  -114.13   -71.28     0.88 S1)  ; 27
        (  -39.77  -114.45   -71.28     0.88 S1)  ; 28
        (  -39.48  -115.73   -71.28     0.88 S1)  ; 29
        (  -40.64  -117.33   -71.28     0.88 S1)  ; 30
        (  -42.10  -119.25   -71.52     0.88 S1)  ; 31
        (  -41.81  -123.09   -71.70     0.88 S1)  ; 32
        (  -41.23  -126.30   -74.60     0.29 S1)  ; 33
        (  -42.69  -128.22   -75.05     0.29 S1)  ; 34
        (  -44.14  -130.14   -75.30     0.29 S1)  ; 35
        (  -44.44  -132.70   -77.32     0.29 S1)  ; 36
        (  -45.90  -133.66   -78.95     0.29 S1)  ; 37
        (  -46.77  -134.62   -79.55     0.29 S1)  ; 38
        (  -47.06  -136.86   -80.75     0.29 S1)  ; 39
        (  -49.11  -138.14   -82.17     0.29 S1)  ; 40
        (  -50.86  -140.07   -83.23     0.29 S1)  ; 41
        (  -53.19  -142.31   -83.63     0.29 S1)  ; 42
        (  -55.82  -144.23   -82.57     0.29 S1)  ; 43
        (  -56.98  -147.11   -81.50     0.29 S1)  ; 44
        (  -58.44  -150.31   -81.03     0.29 S1)  ; 45
        (  -60.49  -154.16   -81.43     0.29 S1)  ; 46
        (  -61.36  -158.00   -81.43     0.29 S1)  ; 47
        (  -63.99  -161.20   -82.07     0.29 S1)  ; 48
        (  -66.03  -164.08   -83.63     0.29 S1)  ; 49
        (  -67.20  -168.24   -83.95     0.29 S1)  ; 50
        (  -66.91  -172.47   -83.95     0.29 S1)  ; 51
        (  -67.20  -177.59   -85.30     0.29 S1)  ; 52
        (  -66.91  -181.76   -82.68     0.29 S1)  ; 53
        (  -68.95  -183.68   -81.17     0.29 S1)  ; 54
        (  -70.12  -185.92   -79.80     0.29 S1)  ; 55
        (  -68.95  -190.08   -77.13     0.29 S1)  ; 56
         Normal
      )  ;  End of split
    )  ;  End of split
  |
    (   35.73    -2.06   -84.03     0.88 S1)  ; 1, R-2
    (   33.98    -5.27   -83.27     0.88 S1)  ; 2
    (   33.40    -7.83   -84.92     0.88 S1)  ; 3
    (
      (   35.15   -10.39   -84.92     0.58 S1)  ; 1, R-2-1
      (   38.07   -12.63   -84.97     0.58 S1)  ; 2
      (   39.53   -15.51   -85.68     0.58 S1)  ; 3
      (   42.45   -17.75   -85.82     0.58 S1)  ; 4
      (   45.07   -20.96   -83.75     0.58 S1)  ; 5
      (   46.82   -23.84   -80.88     0.58 S1)  ; 6
      (   47.99   -28.96   -80.73     0.58 S1)  ; 7
      (   48.28   -33.76   -80.15     0.58 S1)  ; 8
      (   48.87   -40.17   -79.22     0.58 S1)  ; 9
      (   48.28   -43.05   -78.75     0.58 S1)  ; 10
      (   48.57   -44.33   -78.28     0.58 S1)  ; 11
      (   49.74   -47.21   -77.93     0.58 S1)  ; 12
      (   49.74   -49.78   -75.30     0.58 S1)  ; 13
      (   49.16   -53.94   -74.85     0.58 S1)  ; 14
      (   48.28   -58.49   -76.88     0.29 S1)  ; 15
      (   47.70   -60.73   -79.05     0.29 S1)  ; 16
      (   47.99   -62.33   -80.73     0.29 S1)  ; 17
      (   47.99   -65.53   -80.90     0.29 S1)  ; 18
      (   46.53   -67.45   -81.10     0.29 S1)  ; 19
      (   45.36   -70.33   -81.27     0.29 S1)  ; 20
      (   47.12   -72.57   -81.50     0.29 S1)  ; 21
      (   47.99   -75.46   -82.57     0.29 S1)  ; 22
      (   49.74   -79.62   -84.12     0.29 S1)  ; 23
      (   50.62   -81.54   -84.22     0.29 S1)  ; 24
      (   50.62   -83.46   -84.52     0.29 S1)  ; 25
      (   51.49   -84.10   -84.55     0.29 S1)  ; 26
      (   52.66   -85.06   -84.80     0.29 S1)  ; 27
      (   53.24   -87.94   -84.95     0.29 S1)  ; 28
      (   54.12   -90.83   -82.90     0.29 S1)  ; 29
      (   55.29   -93.39   -83.80     0.29 S1)  ; 30
      (   56.75   -96.27   -83.75     0.29 S1)  ; 31
      (   58.20   -98.83   -84.43     0.29 S1)  ; 32
      (   59.96  -101.07   -87.45     0.29 S1)  ; 33
      (   62.29  -103.38   -87.45     0.29 S1)  ; 34
      (   63.75  -105.62   -89.10     0.29 S1)  ; 35
      (   65.79  -106.26   -89.45     0.29 S1)  ; 36
      (   66.96  -107.54   -89.88     0.29 S1)  ; 37
      (   68.13  -109.14   -90.57     0.29 S1)  ; 38
      (   69.88  -112.34   -90.45     0.29 S1)  ; 39
      (   70.46  -114.91   -92.20     0.29 S1)  ; 40
      (   71.04  -118.11   -89.88     0.29 S1)  ; 41
      (   70.75  -120.67   -94.05     0.29 S1)  ; 42
      (   72.50  -124.19   -95.22     0.29 S1)  ; 43
      (   73.67  -124.83   -96.60     0.29 S1)  ; 44
      (   75.42  -127.39   -96.65     0.29 S1)  ; 45
      (   76.88  -129.64   -96.65     0.29 S1)  ; 46
      (   78.92  -132.52   -92.35     0.29 S1)  ; 47
      (   80.09  -135.72   -91.43     0.29 S1)  ; 48
      (   82.42  -139.56   -91.25     0.29 S1)  ; 49
      (   85.05  -142.44   -90.63     0.29 S1)  ; 50
      (   85.34  -145.01   -93.45     0.29 S1)  ; 51
      (   87.68  -147.63   -94.75     0.29 S1)  ; 52
      (   89.72  -151.15   -95.45     0.29 S1)  ; 53
      (   90.89  -154.04   -96.53     0.29 S1)  ; 54
      (   90.01  -156.60   -98.23     0.29 S1)  ; 55
      (   89.43  -159.16   -99.27     0.29 S1)  ; 56
      (   90.30  -163.00  -101.65     0.29 S1)  ; 57
      (   91.76  -164.60  -101.65     0.29 S1)  ; 58
      (   93.51  -165.88  -103.53     0.29 S1)  ; 59
       High
    |
      (   29.31    -9.81   -89.20     0.88 S1)  ; 1, R-2-2
      (   26.69   -13.34   -90.30     0.88 S1)  ; 2
      (   24.65   -14.94   -90.40     0.88 S1)  ; 3
      (
        (   25.81   -17.50   -90.95     0.58 S1)  ; 1, R-2-2-1
        (   25.81   -19.10   -91.20     0.58 S1)  ; 2
        (   24.94   -21.98   -91.93     0.58 S1)  ; 3
        (   24.06   -25.18   -91.93     0.58 S1)  ; 4
        (   22.89   -29.35   -92.17     0.58 S1)  ; 5
        (   21.44   -32.23   -92.05     0.58 S1)  ; 6
        (   20.85   -36.71   -92.40     0.58 S1)  ; 7
        (   19.98   -40.87   -92.45     0.58 S1)  ; 8
        (   19.39   -42.79   -92.60     0.58 S1)  ; 9
        (   17.35   -45.36   -92.70     0.58 S1)  ; 10
        (   14.72   -49.84   -92.70     0.58 S1)  ; 11
        (   10.64   -54.32   -92.87     0.58 S1)  ; 12
        (    7.72   -57.52   -93.13     0.58 S1)  ; 13
        (    5.39   -61.37   -93.13     0.29 S1)  ; 14
        (    3.34   -63.93   -93.57     0.29 S1)  ; 15
        (    3.34   -65.53   -93.70     0.29 S1)  ; 16
        (    4.22   -67.45   -93.70     0.29 S1)  ; 17
        (    2.18   -71.61   -94.22     0.29 S1)  ; 18
        (    1.01   -74.18   -95.82     0.29 S1)  ; 19
        (   -0.45   -75.78   -98.42     0.29 S1)  ; 20
        (   -1.03   -78.34  -100.28     0.29 S1)  ; 21
        (   -1.62   -82.18  -100.28     0.29 S1)  ; 22
        (   -3.95   -85.70  -102.63     0.29 S1)  ; 23
        (   -5.41   -88.26  -103.20     0.29 S1)  ; 24
        (   -7.16   -93.77  -102.52     0.29 S1)  ; 25
        (   -7.45   -95.05  -103.50     0.29 S1)  ; 26
        (   -9.20   -98.58  -104.45     0.29 S1)  ; 27
        (  -12.12  -102.74  -108.80     0.29 S1)  ; 28
        (  -12.12  -105.94  -109.07     0.29 S1)  ; 29
        (  -11.54  -107.54  -111.77     0.29 S1)  ; 30
         High
      |
        (   21.73   -16.54   -87.13     0.58 S1)  ; 1, R-2-2-2
        (   20.56   -19.10   -84.38     0.58 S1)  ; 2
        (   18.52   -20.70   -83.72     0.58 S1)  ; 3
        (   15.89   -22.30   -86.25     0.58 S1)  ; 4
        (   13.26   -24.54   -88.77     0.58 S1)  ; 5
        (   10.64   -27.10   -89.70     0.58 S1)  ; 6
        (    9.76   -28.39   -90.33     0.58 S1)  ; 7
        (
          (    9.18   -30.95   -90.33     0.29 S1)  ; 1, R-2-2-2-1
          (    5.97   -33.51   -90.65     0.29 S1)  ; 2
          (    3.63   -35.75   -91.50     0.29 S1)  ; 3
          (    3.05   -37.03   -91.70     0.29 S1)  ; 4
          (    1.88   -40.23   -93.65     0.29 S1)  ; 5
          (    0.13   -42.47   -95.13     0.29 S1)  ; 6
          (   -2.20   -43.76   -96.62     0.29 S1)  ; 7
          (   -3.66   -46.64   -96.75     0.29 S1)  ; 8
          (   -5.12   -50.80   -97.02     0.29 S1)  ; 9
          (   -7.75   -53.36   -97.30     0.29 S1)  ; 10
          (  -11.83   -55.28   -98.07     0.29 S1)  ; 11
          (  -15.33   -55.92   -97.13     0.29 S1)  ; 12
          (  -18.54   -57.52  -100.35     0.29 S1)  ; 13
          (  -18.83   -59.45  -103.88     0.29 S1)  ; 14
          (  -21.46   -64.25  -104.07     0.29 S1)  ; 15
          (  -23.50   -67.45  -104.97     0.29 S1)  ; 16
          (  -26.42   -70.33  -104.67     0.29 S1)  ; 17
           High
        |
          (    6.84   -29.03   -92.45     0.58 S1)  ; 1, R-2-2-2-2
          (    4.51   -28.71   -96.43     0.29 S1)  ; 2
          (    1.30   -29.67   -98.27     0.29 S1)  ; 3
          (   -2.49   -29.35  -102.07     0.29 S1)  ; 4
          (   -6.29   -28.39  -102.80     0.29 S1)  ; 5
          (   -8.91   -28.71  -103.63     0.29 S1)  ; 6
          (  -14.46   -27.42  -103.88     0.29 S1)  ; 7
          (  -17.08   -26.46  -107.55     0.29 S1)  ; 8
          (  -20.59   -24.22  -112.02     0.29 S1)  ; 9
          (  -22.92   -24.86  -113.75     0.29 S1)  ; 10
          (  -27.30   -25.50  -115.07     0.29 S1)  ; 11
           Incomplete
        )  ;  End of split
      )  ;  End of split
    )  ;  End of split
  )  ;  End of split
)  ;  End of tree

( (Color RGB (0, 255, 64))
  (Dendrite)
  (   37.78    17.15   -65.78     0.29 S1)  ; Root
  (   36.32    16.19   -65.78     1.17 S1)  ; 1, R
  (   34.28    16.83   -68.82     1.17 S1)  ; 2
  (   32.52    17.47   -74.10     0.88 S1)  ; 3
  (   29.61    17.47   -75.50     0.88 S1)  ; 4
  (   28.15    16.19   -84.20     0.88 S1)  ; 5
  (   26.40    15.55   -87.30     0.88 S1)  ; 6
  (   22.89    17.79   -91.67     0.88 S1)  ; 7
  (   19.68    19.07   -95.40     0.88 S1)  ; 8
  (   17.64    18.11   -94.85     0.88 S1)  ; 9
   Incomplete
)  ;  End of tree

( (Color RGB (255, 128, 128))
  (Dendrite)
  (   34.57    19.39   -56.08     0.88 S1)  ; Root
  (   32.23    19.71   -56.08     1.17 S1)  ; 1, R
  (   30.19    20.67   -57.82     1.17 S1)  ; 2
  (   27.56    20.67   -60.22     1.17 S1)  ; 3
  (   25.81    21.31   -63.90     1.17 S1)  ; 4
  (   24.94    21.95   -66.57     1.17 S1)  ; 5
  (
    (   23.48    23.55   -66.32     0.58 S1)  ; 1, R-1
    (   20.27    24.19   -67.72     0.58 S1)  ; 2
    (   17.93    24.83   -69.45     0.29 S1)  ; 3
    (   15.89    26.11   -71.43     0.29 S1)  ; 4
    (   12.97    26.44   -73.40     0.29 S1)  ; 5
    (   10.05    28.68   -75.07     0.29 S1)  ; 6
    (    8.30    29.32   -77.03     0.29 S1)  ; 7
    (    5.09    30.28   -78.93     0.29 S1)  ; 8
    (    1.30    31.24   -80.92     0.29 S1)  ; 9
    (   -2.49    31.88   -84.45     0.29 S1)  ; 10
    (   -5.12    32.52   -85.82     0.29 S1)  ; 11
    (   -8.33    33.16   -87.20     0.29 S1)  ; 12
    (  -10.66    33.80   -88.85     0.29 S1)  ; 13
    (  -12.71    36.04   -91.45     0.29 S1)  ; 14
    (  -15.04    36.68   -95.28     0.29 S1)  ; 15
    (  -17.38    39.56   -95.73     0.29 S1)  ; 16
    (  -19.13    42.13   -98.05     0.29 S1)  ; 17
    (  -22.34    45.33  -100.92     0.29 S1)  ; 18
     High
  |
    (   21.73    20.99   -71.00     1.17 S1)  ; 1, R-2
    (   18.23    20.67   -72.88     0.88 S1)  ; 2
    (   16.77    20.03   -75.97     0.88 S1)  ; 3
    (   14.43    18.75   -80.97     0.88 S1)  ; 4
    (   12.10    16.19   -83.07     0.88 S1)  ; 5
    (   10.35    13.31   -83.95     0.88 S1)  ; 6
    (
      (    8.89    10.42   -79.45     0.29 S1)  ; 1, R-2-1
      (    7.43     7.54   -82.80     0.29 S1)  ; 2
      (    3.05     4.02   -82.68     0.29 S1)  ; 3
      (   -0.16     0.82   -81.25     0.29 S1)  ; 4
      (   -3.66    -1.10   -82.57     0.29 S1)  ; 5
      (   -8.91    -2.70   -84.52     0.29 S1)  ; 6
      (  -12.41    -5.27   -85.10     0.29 S1)  ; 7
      (  -17.67    -6.87   -85.42     0.29 S1)  ; 8
      (  -20.00    -9.43   -85.52     0.29 S1)  ; 9
      (  -22.92   -12.63   -85.55     0.29 S1)  ; 10
      (  -25.55   -16.47   -85.88     0.29 S1)  ; 11
      (  -26.13   -18.71   -86.00     0.29 S1)  ; 12
      (  -24.96   -21.28   -86.00     0.29 S1)  ; 13
      (  -25.84   -25.76   -86.20     0.29 S1)  ; 14
      (  -29.05   -28.07   -85.68     0.29 S1)  ; 15
      (  -29.05   -30.95   -81.45     0.29 S1)  ; 16
      (  -29.05   -34.47   -80.65     0.29 S1)  ; 17
      (  -29.63   -37.03   -80.37     0.29 S1)  ; 18
      (  -33.43   -41.19   -80.10     0.29 S1)  ; 19
      (  -36.05   -43.12   -78.38     0.29 S1)  ; 20
      (  -40.72   -46.00   -82.92     0.29 S1)  ; 21
      (  -43.93   -49.20   -81.65     0.29 S1)  ; 22
      (  -46.27   -51.76   -77.97     0.29 S1)  ; 23
      (  -49.77   -53.36   -77.45     0.29 S1)  ; 24
      (  -52.60   -54.64   -79.30     0.29 S1)  ; 25
      (  -53.77   -56.24   -76.60     0.29 S1)  ; 26
      (  -55.81   -57.52   -70.90     0.29 S1)  ; 27
      (  -58.43   -59.13   -69.30     0.29 S1)  ; 28
      (  -59.31   -62.01   -68.65     0.29 S1)  ; 29
      (  -60.48   -63.93   -67.88     0.29 S1)  ; 30
      (  -60.77   -65.85   -67.03     0.29 S1)  ; 31
      (  -61.64   -68.73   -65.80     0.29 S1)  ; 32
       Normal
    |
      (    8.68    13.95   -83.95     0.88 S1)  ; 1, R-2-2
      (    7.52    12.35   -91.17     0.88 S1)  ; 2
      (    6.64    10.42   -93.80     0.88 S1)  ; 3
      (    4.89     9.78   -94.97     0.88 S1)  ; 4
      (    3.14     9.78   -96.62     0.88 S1)  ; 5
       Incomplete
    )  ;  End of split
  )  ;  End of split
)  ;  End of tree

( (Color Orange)
  (Apical)
  (   43.94    27.29   -50.25    10.80 S1)  ; Root
  (   43.94    27.29   -50.25    10.80 S1)  ; 1, R
  (   43.42    31.55   -50.13     8.23 S1)  ; 2
  (   42.14    35.52   -50.22     6.69 S1)  ; 3
  (   41.11    39.22   -51.38     5.40 S1)  ; 4
  (   40.08    42.91   -52.40     4.37 S1)  ; 5
  (   40.08    46.89   -53.18     4.37 S1)  ; 6
  (   39.82    48.88   -53.58     4.11 S1)  ; 7
  (   38.02    51.43   -50.85     3.86 S1)  ; 8
  (   36.48    54.84   -51.52     3.60 S1)  ; 9
  (   35.71    58.82   -53.13     3.60 S1)  ; 10
  (   35.45    63.36   -55.92     3.60 S1)  ; 11
  (   32.88    68.19   -58.25     3.86 S1)  ; 12
  (
    (   32.88    71.03   -55.05     3.86 S1)  ; 1, R-1
    (   32.36    73.87   -51.90     3.34 S1)  ; 2
    (   32.62    76.72   -50.20     2.57 S1)  ; 3
    (   30.82    80.41   -46.90     3.09 S1)  ; 4
    (   29.54    86.09   -46.57     3.09 S1)  ; 5
    (   28.76    91.77   -46.38     3.09 S1)  ; 6
    (   28.25    97.17   -45.70     3.09 S1)  ; 7
    (   27.30   102.85   -46.93     3.09 S1)  ; 8
    (   26.27   108.82   -47.28     3.09 S1)  ; 9
    (   25.50   114.50   -46.05     3.09 S1)  ; 10
    (   25.50   117.96   -43.50     3.09 S1)  ; 11
    (   26.27   122.51   -42.40     3.09 S1)  ; 12
    (   26.78   125.92   -42.17     3.09 S1)  ; 13
    (   26.54   126.47   -42.17     3.09 S1)  ; 14

    (Cross
      (Color Green)
      (Name "Marker 3")
      (   33.32    78.97   -55.74     0.07 S1)  ; 1
      (   30.82    87.13   -50.50     0.07 S1)  ; 2
      (   31.56    88.75   -49.20     0.07 S1)  ; 3
      (   29.58    90.00   -49.16     0.07 S1)  ; 4
      (   29.14   102.50   -48.74     0.07 S1)  ; 5
      (   26.79   104.26   -48.74     0.07 S1)  ; 6
      (   25.76   100.88   -48.45     0.07 S1)  ; 7
      (   26.05   100.07   -48.45     0.07 S1)  ; 8
      (   28.84   100.51   -47.95     0.07 S1)  ; 9
      (   27.45    97.64   -48.66     0.07 S1)  ; 10
      (   24.58   100.44   -49.86     0.07 S1)  ; 11
      (   24.29   103.01   -49.86     0.07 S1)  ; 12
      (   23.77   103.97   -51.06     0.07 S1)  ; 13
      (   23.77   107.79   -51.80     0.07 S1)  ; 14
      (   23.04   112.42   -50.44     0.07 S1)  ; 15
      (   22.75   115.95   -49.39     0.07 S1)  ; 16
      (   27.08   111.98   -47.92     0.07 S1)  ; 17
      (   22.89   118.82   -47.57     0.07 S1)  ; 18
      (   27.79   121.94   -46.59     0.07 S1)  ; 19
      (   28.23   123.92   -45.39     0.07 S1)  ; 20
      (   26.54   120.47   -45.39     0.07 S1)  ; 21
      (   23.82   120.47   -45.39     0.07 S1)  ; 22
      (   23.97   121.72   -45.39     0.07 S1)  ; 23
      (   24.56   123.63   -44.15     0.07 S1)  ; 24
      (   26.10   124.80   -44.15     0.07 S1)  ; 25
      (   26.91   125.10   -44.15     0.07 S1)  ; 26
    )  ;  End of markers
    (
      (   25.67   129.60   -42.22     3.09 S1)  ; 1, R-1-1
      (   25.67   134.14   -43.13     3.09 S1)  ; 2
      (   26.19   137.83   -44.58     3.09 S1)  ; 3
      (   26.70   142.66   -45.45     3.09 S1)  ; 4
      (   25.41   145.79   -46.75     3.09 S1)  ; 5
      (   25.16   149.48   -48.40     3.09 S1)  ; 6
      (   26.70   153.46   -49.40     3.09 S1)  ; 7
      (
        (   27.21   157.49   -48.45     3.09 S1)  ; 1, R-1-1-1
        (   24.90   161.19   -48.02     3.09 S1)  ; 2
        (   25.16   164.88   -47.13     3.09 S1)  ; 3
        (   26.70   168.86   -46.40     3.09 S1)  ; 4
        (   27.73   173.69   -45.52     3.09 S1)  ; 5
        (   27.47   179.94   -45.25     3.09 S1)  ; 6
        (   26.19   186.19   -45.13     3.09 S1)  ; 7
        (   25.93   192.43   -44.95     3.09 S1)  ; 8
        (   25.36   192.82   -44.95     3.09 S1)  ; 9

        (Cross
          (Color Green)
          (Name "Marker 3")
          (   28.87   156.66   -48.51     0.07 S1)  ; 1
          (   28.14   160.04   -48.62     0.07 S1)  ; 2
          (   28.06   158.27   -47.65     0.07 S1)  ; 3
          (   25.64   154.97   -48.33     0.07 S1)  ; 4
          (   25.13   159.96   -48.35     0.07 S1)  ; 5
          (   24.17   161.36   -48.35     0.07 S1)  ; 6
          (   28.21   155.11   -45.40     0.07 S1)  ; 7
          (   24.32   160.11   -48.54     0.07 S1)  ; 8
          (   27.18   164.74   -48.94     0.07 S1)  ; 9
          (   28.50   166.88   -48.94     0.07 S1)  ; 10
          (   28.80   165.85   -49.75     0.07 S1)  ; 11
          (   24.46   169.74   -50.10     0.07 S1)  ; 12
          (   22.92   165.63   -51.05     0.07 S1)  ; 13
          (   27.26   163.05   -51.05     0.07 S1)  ; 14
          (   27.48   165.55   -51.05     0.07 S1)  ; 15
          (   23.58   162.54   -52.35     0.07 S1)  ; 16
          (   26.59   162.24   -52.02     0.07 S1)  ; 17
          (   29.24   167.83   -46.40     0.07 S1)  ; 18
          (   23.66   172.76   -46.35     0.07 S1)  ; 19
          (   30.85   174.67   -46.35     0.07 S1)  ; 20
          (   29.75   175.48   -46.34     0.07 S1)  ; 21
          (   30.41   176.95   -45.79     0.07 S1)  ; 22
          (   29.53   179.16   -45.79     0.07 S1)  ; 23
          (   29.83   180.85   -45.79     0.07 S1)  ; 24
          (   29.16   183.86   -45.79     0.07 S1)  ; 25
          (   24.02   181.29   -46.04     0.07 S1)  ; 26
          (   23.58   184.08   -46.04     0.07 S1)  ; 27
          (   28.80   185.92   -45.91     0.07 S1)  ; 28
          (   27.92   186.88   -45.61     0.07 S1)  ; 29
          (   27.99   187.76   -46.64     0.07 S1)  ; 30
          (   28.94   187.10   -46.64     0.07 S1)  ; 31
          (   23.44   186.51   -47.66     0.07 S1)  ; 32
          (   27.40   173.64   -43.85     0.07 S1)  ; 33
          (   28.72   172.91   -43.85     0.07 S1)  ; 34
          (   24.91   174.16   -43.85     0.07 S1)  ; 35
          (   29.83   176.36   -43.85     0.07 S1)  ; 36
          (   29.39   177.24   -43.85     0.07 S1)  ; 37
          (   28.50   182.46   -43.85     0.07 S1)  ; 38
          (   28.94   181.80   -43.85     0.07 S1)  ; 39
          (   27.92   185.18   -43.85     0.07 S1)  ; 40
          (   28.50   177.54   -43.25     0.07 S1)  ; 41
          (   26.08   176.88   -43.25     0.07 S1)  ; 42
          (   26.89   178.49   -43.25     0.07 S1)  ; 43
          (   28.14   179.52   -43.25     0.07 S1)  ; 44
          (   28.94   175.48   -43.25     0.07 S1)  ; 45
          (   27.18   176.14   -43.25     0.07 S1)  ; 46
          (   26.59   182.10   -43.25     0.07 S1)  ; 47
          (   28.94   180.70   -43.25     0.07 S1)  ; 48
          (   22.78   188.05   -45.06     0.07 S1)  ; 49
          (   27.33   192.10   -45.06     0.07 S1)  ; 50
          (   23.14   189.38   -45.68     0.07 S1)  ; 51
          (   26.59   185.18   -45.68     0.07 S1)  ; 52
          (   27.33   187.68   -45.68     0.07 S1)  ; 53
          (   25.42   185.63   -46.26     0.07 S1)  ; 54
          (   24.68   191.95   -45.66     0.07 S1)  ; 55
          (   23.29   191.95   -46.61     0.07 S1)  ; 56
          (   28.80   190.85   -48.30     0.07 S1)  ; 57
          (   24.32   189.01   -48.30     0.07 S1)  ; 58
          (   26.74   180.04   -47.46     0.07 S1)  ; 59
          (   24.83   179.82   -47.02     0.07 S1)  ; 60
          (   25.86   175.18   -45.88     0.07 S1)  ; 61
          (   27.26   166.44   -45.07     0.07 S1)  ; 62
          (   28.72   169.23   -45.07     0.07 S1)  ; 63
          (   27.40   169.01   -44.40     0.07 S1)  ; 64
          (   25.35   172.10   -45.48     0.07 S1)  ; 65
        )  ;  End of markers
        (
          (   25.41   196.70   -44.32     3.09 S1)  ; 1, R-1-1-1-1
          (   24.64   200.11   -44.07     3.09 S1)  ; 2
          (
            (   22.27   200.40   -44.30     1.46 S1)  ; 1, R-1-1-1-1-1
            (   19.63   200.40   -44.30     0.88 S1)  ; 2
            (   17.00   200.08   -45.22     0.88 S1)  ; 3
            (   15.54   200.40   -46.60     0.88 S1)  ; 4
            (
              (   13.66   202.46   -46.93     0.88 S1)  ; 1, R-1-1-1-1-1-1
              (   10.74   204.05   -49.20     0.88 S1)  ; 2
              (    8.11   205.32   -49.72     0.88 S1)  ; 3
              (    5.77   206.91   -50.10     0.88 S1)  ; 4
              (    4.01   207.86   -51.60     0.88 S1)  ; 5
              (
                (    0.50   208.50   -50.63     0.88 S1)  ; 1, R-1-1-1-1-1-1-1
                (   -2.43   208.18   -52.92     0.88 S1)  ; 2
                (   -5.94   207.86   -57.37     0.88 S1)  ; 3
                (  -10.03   208.18   -59.02     0.88 S1)  ; 4
                (  -14.13   208.18   -60.00     0.88 S1)  ; 5
                (  -16.17   208.18   -62.70     0.88 S1)  ; 6
                (  -18.22   207.86   -65.18     0.88 S1)  ; 7
                (  -19.35   208.14   -65.18     0.88 S1)  ; 8
                (
                  (  -20.23   208.77   -58.72     0.59 S1)  ; 1, R-1-1-1-1-1-1-1-1
                  (  -21.10   208.77   -54.20     0.59 S1)  ; 2
                  (  -21.98   207.82   -49.10     0.59 S1)  ; 3
                  (  -23.74   207.50   -48.18     0.59 S1)  ; 4
                  (  -24.61   207.18   -47.15     0.59 S1)  ; 5
                  (  -25.78   207.82   -43.38     0.59 S1)  ; 6
                  (  -26.95   209.09   -41.70     0.59 S1)  ; 7
                  (  -28.12   208.77   -41.08     0.59 S1)  ; 8
                  (  -30.17   210.05   -40.35     0.59 S1)  ; 9
                  (  -30.76   211.00   -38.65     0.59 S1)  ; 10
                  (  -32.22   212.91   -38.45     0.59 S1)  ; 11
                  (  -34.85   212.91   -37.95     0.29 S1)  ; 12
                  (  -36.90   213.86   -37.67     0.29 S1)  ; 13
                  (  -38.36   213.55   -37.50     0.29 S1)  ; 14
                   Normal
                |
                  (  -21.73   208.18   -67.55     0.59 S1)  ; 1, R-1-1-1-1-1-1-1-2
                  (  -24.66   209.77   -69.42     0.59 S1)  ; 2
                  (  -27.87   211.05   -70.32     0.59 S1)  ; 3
                  (  -30.51   211.68   -72.50     0.59 S1)  ; 4
                  (  -34.60   212.00   -72.63     0.59 S1)  ; 5
                  (  -38.40   212.64   -72.50     0.59 S1)  ; 6
                  (  -41.62   213.59   -72.65     0.59 S1)  ; 7
                  (  -44.25   215.82   -73.53     0.59 S1)  ; 8
                  (  -46.89   218.05   -73.63     0.59 S1)  ; 9
                  (  -49.23   220.27   -74.22     0.59 S1)  ; 10
                  (  -52.44   221.86   -75.22     0.59 S1)  ; 11
                  (  -55.08   223.46   -76.17     0.59 S1)  ; 12
                  (  -58.88   225.68   -76.47     0.59 S1)  ; 13
                  (  -62.97   226.96   -76.60     0.59 S1)  ; 14
                  (  -65.61   227.91   -76.97     0.59 S1)  ; 15
                  (  -68.53   228.86   -78.17     0.59 S1)  ; 16
                  (  -70.87   228.55   -78.40     0.59 S1)  ; 17
                  (  -72.92   228.23   -73.25     0.59 S1)  ; 18
                  (  -77.52   227.97   -70.92     0.59 S1)  ; 19
                  (  -81.62   228.61   -69.82     0.59 S1)  ; 20
                  (  -86.01   228.93   -68.13     0.59 S1)  ; 21
                  (  -88.93   229.25   -67.68     0.59 S1)  ; 22
                  (  -91.56   229.88   -67.30     0.59 S1)  ; 23
                  (  -95.95   230.52   -67.03     0.59 S1)  ; 24
                  (  -98.00   230.20   -66.88     0.59 S1)  ; 25
                  ( -101.22   231.15   -66.70     0.59 S1)  ; 26
                  ( -103.85   232.75   -66.70     0.59 S1)  ; 27
                  ( -107.36   232.75   -66.40     0.59 S1)  ; 28
                  ( -109.99   232.11   -66.17     0.59 S1)  ; 29
                  ( -113.50   232.75   -66.13     0.59 S1)  ; 30
                  ( -116.43   231.79   -65.78     0.59 S1)  ; 31
                  ( -121.40   232.43   -65.78     0.59 S1)  ; 32
                  ( -124.32   233.00   -71.55     0.59 S1)  ; 33
                  ( -128.41   232.36   -70.78     0.59 S1)  ; 34
                  ( -132.22   232.68   -70.57     0.59 S1)  ; 35
                  ( -135.43   231.41   -70.22     0.59 S1)  ; 36
                  ( -137.48   229.50   -66.20     0.59 S1)  ; 37
                  ( -141.58   227.91   -64.50     0.59 S1)  ; 38
                  ( -146.26   227.91   -63.90     0.59 S1)  ; 39
                  ( -150.06   227.91   -63.13     0.59 S1)  ; 40
                  ( -153.28   229.18   -62.70     0.59 S1)  ; 41
                  ( -154.45   229.82   -64.92     0.59 S1)  ; 42
                   Normal
                )  ;  End of split
              |
                (    1.96   209.46   -43.35     0.88 S1)  ; 1, R-1-1-1-1-1-1-2
                (    0.50   210.73   -41.30     0.88 S1)  ; 2
                (   -2.13   212.32   -38.13     0.88 S1)  ; 3
                (   -3.30   213.91   -35.10     0.88 S1)  ; 4
                (   -2.43   216.46   -33.30     0.88 S1)  ; 5
                (   -1.55   218.68   -32.75     0.88 S1)  ; 6
                (   -1.84   221.86   -31.22     0.88 S1)  ; 7
                (   -2.72   224.09   -30.23     0.88 S1)  ; 8
                (   -1.55   226.32   -28.05     0.88 S1)  ; 9
                (   -0.67   228.86   -27.85     0.88 S1)  ; 10
                (   -1.55   231.73   -27.55     0.88 S1)  ; 11
                (   -0.96   233.96   -23.30     0.88 S1)  ; 12
                (    1.67   235.23   -20.67     0.88 S1)  ; 13
                (    2.84   237.46   -19.30     0.88 S1)  ; 14
                (    4.89   238.09   -18.05     0.59 S1)  ; 15
                (    5.47   239.05   -15.88     0.59 S1)  ; 16
                (    6.35   240.64   -13.87     0.59 S1)  ; 17
                (    7.23   241.59   -12.38     0.59 S1)  ; 18
                (    8.98   241.91   -12.22     0.59 S1)  ; 19
                (   10.15   241.59   -12.02     0.59 S1)  ; 20
                (   10.74   242.86   -11.65     0.59 S1)  ; 21
                (   10.45   244.46   -11.65     0.59 S1)  ; 22
                (   11.32   246.68   -11.27     0.59 S1)  ; 23
                (   12.20   248.59   -11.02     0.59 S1)  ; 24
                (   11.91   251.46    -9.95     0.59 S1)  ; 25
                (   11.91   254.32    -9.52     0.59 S1)  ; 26
                (   13.08   256.55    -8.88     0.59 S1)  ; 27
                (   14.25   257.18    -8.68     0.59 S1)  ; 28
                 Normal
              )  ;  End of split
            |
              (   12.03   200.08   -46.20     0.88 S1)  ; 1, R-1-1-1-1-1-2
              (
                (    9.57   201.82   -43.22     0.88 S1)  ; 1, R-1-1-1-1-1-2-1
                (    6.94   203.09   -42.40     0.88 S1)  ; 2
                (    4.60   204.05   -41.88     0.88 S1)  ; 3
                (    3.13   203.09   -40.65     0.88 S1)  ; 4
                (    1.38   202.14   -35.22     0.88 S1)  ; 5
                (   -0.96   202.14   -34.08     0.88 S1)  ; 6
                (   -3.30   202.46   -32.25     0.88 S1)  ; 7
                (   -5.35   201.82   -31.25     0.88 S1)  ; 8
                (   -7.11   202.14   -30.45     0.88 S1)  ; 9
                (   -8.86   202.14   -29.52     0.88 S1)  ; 10
                (  -11.20   203.09   -28.75     0.59 S1)  ; 11
                (  -14.42   204.05   -28.52     0.59 S1)  ; 12
                (  -15.88   205.00   -25.70     0.59 S1)  ; 13
                (  -16.17   205.32   -24.95     0.59 S1)  ; 14
                (  -17.05   204.68   -24.08     0.59 S1)  ; 15
                (  -17.64   204.36   -22.47     0.59 S1)  ; 16
                (  -19.10   204.36   -21.95     0.59 S1)  ; 17
                (  -21.15   205.00   -21.95     0.59 S1)  ; 18
                (  -22.90   205.96   -21.52     0.59 S1)  ; 19
                (  -24.66   206.59   -20.10     0.59 S1)  ; 20
                (  -27.00   207.23   -17.70     0.59 S1)  ; 21
                (  -27.87   207.23   -17.40     0.59 S1)  ; 22
                (  -29.34   206.59   -15.85     0.59 S1)  ; 23
                (  -31.09   206.27   -15.45     0.59 S1)  ; 24
                (  -33.14   206.27   -15.25     0.59 S1)  ; 25
                (  -35.19   205.96   -15.15     0.59 S1)  ; 26
                (  -35.77   205.32   -14.97     0.59 S1)  ; 27
                (  -37.23   206.27   -14.72     0.59 S1)  ; 28
                (  -38.40   205.96   -13.52     0.59 S1)  ; 29
                (  -39.28   206.27   -13.52     0.59 S1)  ; 30
                (  -41.33   205.64   -10.90     0.59 S1)  ; 31
                (  -43.67   205.96   -10.80     0.59 S1)  ; 32
                (  -46.01   205.64   -10.52     0.59 S1)  ; 33
                (  -47.18   205.00    -9.55     0.59 S1)  ; 34
                (  -48.93   205.00    -9.45     0.59 S1)  ; 35
                (  -50.98   204.36    -8.38     0.59 S1)  ; 36
                (  -52.44   203.73    -8.38     0.59 S1)  ; 37
                (  -55.08   204.05    -7.63     0.59 S1)  ; 38
                (  -55.95   205.00    -6.82     0.59 S1)  ; 39
                (  -56.25   205.64    -5.40     0.59 S1)  ; 40
                (  -57.71   204.68    -3.47     0.59 S1)  ; 41
                (  -58.88   203.09    -3.47     0.59 S1)  ; 42
                (  -60.63   201.82    -3.13     0.59 S1)  ; 43
                (  -63.56   201.82    -2.90     0.59 S1)  ; 44
                (  -64.14   199.59    -1.20     0.59 S1)  ; 45
                (  -65.31   199.59    -0.93     0.59 S1)  ; 46
                (  -67.07   200.55     1.17     0.59 S1)  ; 47
                (  -67.95   199.59     1.58     0.59 S1)  ; 48
                (  -68.53   197.68     2.22     0.59 S1)  ; 49
                (  -70.58   197.36     4.17     0.59 S1)  ; 50
                (  -71.16   197.05     5.15     0.59 S1)  ; 51
                (  -73.50   197.36     6.70     0.59 S1)  ; 52
                (  -74.38   197.05     7.30     0.59 S1)  ; 53
                 Normal
              |
                (    8.23   199.13   -48.30     0.88 S1)  ; 1, R-1-1-1-1-1-2-2
                (    4.72   198.17   -49.20     0.88 S1)  ; 2
                (    2.96   196.58   -50.85     0.88 S1)  ; 3
                (    2.08   194.04   -51.47     0.88 S1)  ; 4
                (   -0.26   192.13   -51.72     0.88 S1)  ; 5
                (   -2.30   191.17   -49.07     0.88 S1)  ; 6
                (   -4.35   189.90   -46.55     0.88 S1)  ; 7
                (   -6.40   188.31   -46.47     0.88 S1)  ; 8
                (   -6.98   186.08   -46.00     0.88 S1)  ; 9
                (   -8.74   184.17   -50.68     0.88 S1)  ; 10
                (  -10.20   183.22   -53.65     0.88 S1)  ; 11
                (  -12.25   182.26   -55.40     0.88 S1)  ; 12
                (  -14.30   180.35   -55.88     0.88 S1)  ; 13
                (  -15.47   177.81   -55.90     0.88 S1)  ; 14
                (  -16.64   175.90   -56.03     0.88 S1)  ; 15
                (  -18.10   173.99   -56.32     0.88 S1)  ; 16
                (  -19.85   172.72   -57.77     0.88 S1)  ; 17
                (  -21.32   171.13   -56.45     0.88 S1)  ; 18
                (  -23.36   169.85   -56.72     0.88 S1)  ; 19
                (  -26.00   168.90   -54.87     0.88 S1)  ; 20
                (  -26.87   166.99   -54.10     0.88 S1)  ; 21
                (  -26.87   165.08   -57.60     0.88 S1)  ; 22
                (  -28.04   162.54   -60.40     0.88 S1)  ; 23
                (  -29.21   159.04   -61.60     0.59 S1)  ; 24
                (  -30.68   157.13   -62.95     0.59 S1)  ; 25
                (  -31.85   156.49   -64.13     0.59 S1)  ; 26
                (  -33.89   155.54   -64.50     0.59 S1)  ; 27
                (  -36.82   154.58   -66.25     0.59 S1)  ; 28
                (  -37.99   153.63   -67.77     0.59 S1)  ; 29
                (  -38.57   152.04   -68.35     0.59 S1)  ; 30
                (  -39.74   150.13   -68.60     0.59 S1)  ; 31
                (  -41.50   147.90   -69.05     0.59 S1)  ; 32
                (  -41.50   145.04   -70.30     0.59 S1)  ; 33
                (  -43.55   142.81   -70.47     0.59 S1)  ; 34
                (  -44.72   139.63   -70.85     0.59 S1)  ; 35
                (  -46.47   137.40   -72.25     0.59 S1)  ; 36
                (  -49.10   134.54   -72.85     0.59 S1)  ; 37
                (  -51.86   133.98   -74.78     0.59 S1)  ; 38
                (  -53.61   131.44   -75.00     0.59 S1)  ; 39
                (  -55.37   129.85   -75.92     0.59 S1)  ; 40
                (  -57.71   127.94   -78.72     0.59 S1)  ; 41
                (  -59.46   126.66   -79.65     0.59 S1)  ; 42
                (  -59.46   124.12   -80.70     0.59 S1)  ; 43
                (  -61.22   123.48   -81.10     0.59 S1)  ; 44
                (  -62.68   121.89   -82.50     0.59 S1)  ; 45
                (  -63.27   119.66   -82.68     0.59 S1)  ; 46
                (  -65.02   119.03   -84.05     0.59 S1)  ; 47
                (  -66.19   117.75   -85.22     0.59 S1)  ; 48
                (  -67.65   116.80   -87.52     0.59 S1)  ; 49
                (  -70.58   115.84   -89.72     0.59 S1)  ; 50
                (  -72.33   115.53   -89.75     0.59 S1)  ; 51
                (  -74.09   114.57   -90.28     0.59 S1)  ; 52
                (  -76.43   114.57   -91.13     0.59 S1)  ; 53
                 Normal
              )  ;  End of split
            )  ;  End of split
          |
            (   26.44   202.66   -48.27     2.57 S1)  ; 1, R-1-1-1-1-2
            (   26.19   206.07   -48.60     2.57 S1)  ; 2
            (   25.16   208.91   -48.72     2.57 S1)  ; 3
            (   24.90   211.81   -45.60     2.57 S1)  ; 4
            (   25.41   215.79   -44.55     2.57 S1)  ; 5
            (   26.19   220.33   -44.07     2.57 S1)  ; 6
            (   26.44   225.16   -42.75     2.57 S1)  ; 7
            (   26.96   228.85   -42.72     2.57 S1)  ; 8
            (   27.73   231.69   -43.53     2.57 S1)  ; 9
            (   29.01   234.54   -47.25     2.57 S1)  ; 10
            (   28.76   237.94   -48.55     2.57 S1)  ; 11
            (   28.76   242.49   -48.85     2.57 S1)  ; 12
            (   29.01   247.32   -49.87     2.57 S1)  ; 13
            (   29.01   253.00   -50.42     2.57 S1)  ; 14
            (   29.53   257.32   -50.60     2.83 S1)  ; 15

            (Cross
              (Color Green)
              (Name "Marker 3")
              (   28.65   202.28   -48.67     0.07 S1)  ; 1
              (   29.39   203.82   -48.67     0.07 S1)  ; 2
              (   28.65   204.93   -48.67     0.07 S1)  ; 3
              (   25.27   202.87   -47.30     0.07 S1)  ; 4
              (   23.66   202.57   -47.30     0.07 S1)  ; 5
              (   24.24   205.96   -47.30     0.07 S1)  ; 6
              (   28.28   203.38   -46.74     0.07 S1)  ; 7
              (   28.50   207.35   -48.92     0.07 S1)  ; 8
              (   27.92   208.53   -48.92     0.07 S1)  ; 9
              (   27.62   209.41   -48.92     0.07 S1)  ; 10
              (   28.28   210.22   -48.92     0.07 S1)  ; 11
              (   28.87   208.90   -49.74     0.07 S1)  ; 12
              (   28.94   207.57   -49.74     0.07 S1)  ; 13
              (   26.59   212.87   -49.74     0.07 S1)  ; 14
              (   24.83   206.69   -47.30     0.07 S1)  ; 15
              (   24.91   207.57   -47.30     0.07 S1)  ; 16
              (   26.74   206.62   -47.30     0.07 S1)  ; 17
              (   27.40   209.78   -47.30     0.07 S1)  ; 18
              (   27.40   210.74   -47.30     0.07 S1)  ; 19
              (   28.36   212.43   -47.30     0.07 S1)  ; 20
              (   23.07   210.66   -46.05     0.07 S1)  ; 21
              (   22.48   212.87   -46.05     0.07 S1)  ; 22
              (   23.07   213.38   -46.05     0.07 S1)  ; 23
              (   23.66   211.91   -46.05     0.07 S1)  ; 24
              (   24.68   209.71   -46.05     0.07 S1)  ; 25
              (   23.66   208.31   -45.72     0.07 S1)  ; 26
              (   26.45   209.85   -45.72     0.07 S1)  ; 27
              (   26.96   211.40   -48.54     0.07 S1)  ; 28
              (   23.66   217.13   -46.89     0.07 S1)  ; 29
              (   22.85   215.00   -45.81     0.07 S1)  ; 30
              (   23.14   216.18   -45.81     0.07 S1)  ; 31
              (   26.37   213.82   -44.56     0.07 S1)  ; 32
              (   28.80   216.76   -44.56     0.07 S1)  ; 33
              (   24.76   216.84   -44.56     0.07 S1)  ; 34
              (   24.46   217.35   -44.56     0.07 S1)  ; 35
              (   28.06   215.96   -46.14     0.07 S1)  ; 36
              (   27.04   212.50   -47.17     0.07 S1)  ; 37
              (   27.33   218.01   -44.56     0.07 S1)  ; 38
              (   23.66   219.26   -43.39     0.07 S1)  ; 39
              (   25.35   219.26   -43.66     0.07 S1)  ; 40
              (   29.02   218.75   -44.75     0.07 S1)  ; 41
              (   28.65   217.87   -48.33     0.07 S1)  ; 42
              (   24.02   220.22   -46.40     0.07 S1)  ; 43
              (   29.02   222.57   -44.36     0.07 S1)  ; 44
              (   28.50   223.31   -44.36     0.07 S1)  ; 45
              (   29.16   225.00   -44.36     0.07 S1)  ; 46
              (   29.39   225.88   -44.36     0.07 S1)  ; 47
              (   23.73   224.56   -44.36     0.07 S1)  ; 48
              (   23.29   225.59   -44.36     0.07 S1)  ; 49
              (   23.29   220.37   -44.35     0.07 S1)  ; 50
              (   28.72   221.47   -43.20     0.07 S1)  ; 51
              (   24.54   227.28   -43.20     0.07 S1)  ; 52
              (   29.39   226.76   -43.20     0.07 S1)  ; 53
              (   29.24   228.75   -42.85     0.07 S1)  ; 54
              (   29.68   230.51   -42.85     0.07 S1)  ; 55
              (   25.49   230.59   -42.85     0.07 S1)  ; 56
              (   25.64   231.54   -42.85     0.07 S1)  ; 57
              (   25.27   232.79   -42.85     0.07 S1)  ; 58
              (   24.83   229.63   -42.85     0.07 S1)  ; 59
              (   25.49   228.31   -42.85     0.07 S1)  ; 60
              (   26.74   232.50   -41.59     0.07 S1)  ; 61
              (   27.55   221.47   -41.59     0.07 S1)  ; 62
              (   27.55   222.21   -41.59     0.07 S1)  ; 63
              (   27.92   225.15   -41.59     0.07 S1)  ; 64
              (   27.99   227.06   -41.59     0.07 S1)  ; 65
              (   27.48   229.04   -41.59     0.07 S1)  ; 66
              (   28.36   229.63   -41.59     0.07 S1)  ; 67
              (   27.92   229.85   -41.59     0.07 S1)  ; 68
              (   29.39   231.40   -41.59     0.07 S1)  ; 69
              (   24.02   222.94   -41.59     0.07 S1)  ; 70
              (   24.46   226.62   -40.91     0.07 S1)  ; 71
              (   26.08   226.25   -40.91     0.07 S1)  ; 72
              (   25.71   225.07   -40.91     0.07 S1)  ; 73
              (   24.98   220.74   -40.13     0.07 S1)  ; 74
              (   25.27   223.60   -40.13     0.07 S1)  ; 75
              (   26.30   221.84   -40.76     0.07 S1)  ; 76
              (   26.23   222.79   -40.76     0.07 S1)  ; 77
              (   31.96   233.31   -45.61     0.07 S1)  ; 78
              (   32.69   234.04   -45.61     0.07 S1)  ; 79
              (   25.79   233.97   -46.76     0.07 S1)  ; 80
              (   30.12   231.10   -45.30     0.07 S1)  ; 81
              (   27.84   235.51   -45.30     0.07 S1)  ; 82
              (   27.04   236.54   -45.30     0.07 S1)  ; 83
              (   25.93   237.79   -45.30     0.07 S1)  ; 84
              (   26.59   239.12   -45.38     0.07 S1)  ; 85
              (   32.47   238.53   -46.03     0.07 S1)  ; 86
              (   32.47   239.63   -46.03     0.07 S1)  ; 87
              (   30.19   236.18   -44.85     0.07 S1)  ; 88
              (   30.41   238.16   -44.85     0.07 S1)  ; 89
              (   30.93   236.91   -44.85     0.07 S1)  ; 90
              (   30.63   240.51   -43.85     0.07 S1)  ; 91
              (   30.93   241.84   -43.85     0.07 S1)  ; 92
              (   25.49   241.47   -43.85     0.07 S1)  ; 93
              (   29.24   241.10   -45.14     0.07 S1)  ; 94
              (   31.00   239.04   -45.94     0.07 S1)  ; 95
              (   31.29   237.87   -45.94     0.07 S1)  ; 96
              (   30.71   234.85   -45.94     0.07 S1)  ; 97
              (   24.76   240.51   -46.85     0.07 S1)  ; 98
              (   26.15   241.76   -46.88     0.07 S1)  ; 99
              (   30.41   254.52   -48.01     0.07 S1)  ; 100
              (   29.83   256.28   -48.01     0.07 S1)  ; 101
              (   28.80   256.28   -48.01     0.07 S1)  ; 102
              (   27.40   255.25   -48.01     0.07 S1)  ; 103
              (   25.49   255.77   -49.20     0.07 S1)  ; 104
              (   26.81   256.21   -49.20     0.07 S1)  ; 105
              (   27.33   253.71   -49.20     0.07 S1)  ; 106
              (   31.44   250.62   -49.20     0.07 S1)  ; 107
              (   30.49   252.61   -49.20     0.07 S1)  ; 108
              (   31.15   249.08   -49.20     0.07 S1)  ; 109
              (   30.78   248.49   -49.20     0.07 S1)  ; 110
              (   31.22   247.90   -49.20     0.07 S1)  ; 111
              (   31.22   251.65   -49.87     0.07 S1)  ; 112
              (   26.45   252.68   -49.87     0.07 S1)  ; 113
              (   26.52   254.59   -49.87     0.07 S1)  ; 114
              (   30.93   242.53   -49.89     0.07 S1)  ; 115
              (   30.71   245.03   -49.89     0.07 S1)  ; 116
              (   30.78   246.28   -49.89     0.07 S1)  ; 117
              (   30.19   243.12   -49.89     0.07 S1)  ; 118
              (   26.37   243.56   -49.85     0.07 S1)  ; 119
              (   26.45   246.94   -49.20     0.07 S1)  ; 120
              (   25.71   249.00   -49.20     0.07 S1)  ; 121
              (   26.81   250.77   -49.20     0.07 S1)  ; 122
              (   27.48   251.36   -49.20     0.07 S1)  ; 123
              (   27.26   249.30   -47.92     0.07 S1)  ; 124
              (   29.97   248.49   -47.92     0.07 S1)  ; 125
              (   29.75   246.21   -47.92     0.07 S1)  ; 126
              (   29.97   244.81   -47.92     0.07 S1)  ; 127
              (   28.14   248.19   -47.02     0.07 S1)  ; 128
              (   28.28   245.84   -47.02     0.07 S1)  ; 129
              (   28.72   244.59   -47.02     0.07 S1)  ; 130
              (   29.97   243.86   -47.02     0.07 S1)  ; 131
              (   29.31   242.53   -47.02     0.07 S1)  ; 132
              (   26.81   246.21   -45.31     0.07 S1)  ; 133
              (   27.70   244.66   -45.31     0.07 S1)  ; 134
              (   31.88   250.11   -46.55     0.07 S1)  ; 135
              (   31.81   240.18   -47.85     0.07 S1)  ; 136
              (   30.41   246.80   -47.66     0.07 S1)  ; 137
              (   26.74   247.68   -48.13     0.07 S1)  ; 138
              (   29.46   249.59   -47.86     0.07 S1)  ; 139
            )  ;  End of markers
            (
              (   33.45   256.86   -50.55     1.46 S1)  ; 1, R-1-1-1-1-2-1
              (   36.96   257.17   -47.50     1.46 S1)  ; 2
              (   39.01   257.17   -46.47     1.17 S1)  ; 3
              (   41.35   258.13   -45.83     1.17 S1)  ; 4
              (   43.11   259.72   -45.22     1.17 S1)  ; 5
              (
                (   44.45   259.52   -44.85     0.88 S1)  ; 1, R-1-1-1-1-2-1-1
                (   45.62   259.84   -42.13     0.88 S1)  ; 2
                (   48.55   259.84   -40.57     0.88 S1)  ; 3
                (   50.01   258.88   -39.67     0.88 S1)  ; 4
                (   52.06   259.84   -39.28     0.88 S1)  ; 5
                (   53.81   260.79   -37.85     0.88 S1)  ; 6
                (
                  (   55.86   259.26   -35.63     0.88 S1)  ; 1, R-1-1-1-1-2-1-1-1
                  (   56.74   258.31   -32.55     0.88 S1)  ; 2
                  (   58.78   257.99   -31.10     0.59 S1)  ; 3
                  (   59.37   257.04   -31.02     0.59 S1)  ; 4
                  (   60.54   255.45   -29.72     0.59 S1)  ; 5
                  (   63.17   255.45   -29.38     0.59 S1)  ; 6
                  (   65.22   254.49   -28.20     0.59 S1)  ; 7
                  (   67.56   253.54   -27.38     0.59 S1)  ; 8
                  (   71.07   251.95   -27.25     0.59 S1)  ; 9
                  (   71.65   250.67   -27.08     0.59 S1)  ; 10
                  (   72.53   248.76   -26.90     0.59 S1)  ; 11
                  (   74.58   247.49   -26.77     0.59 S1)  ; 12
                  (   77.21   246.85   -30.83     0.59 S1)  ; 13
                  (   79.26   244.95   -31.67     0.59 S1)  ; 14
                  (   81.89   242.08   -31.92     0.59 S1)  ; 15
                  (   85.11   239.22   -27.57     0.59 S1)  ; 16
                  (   87.16   237.63   -27.27     0.59 S1)  ; 17
                  (   89.50   237.63   -29.00     0.59 S1)  ; 18
                  (   91.84   237.31   -28.42     0.59 S1)  ; 19
                  (   92.72   236.04   -27.55     0.59 S1)  ; 20
                  (   94.47   234.45   -25.03     0.59 S1)  ; 21
                  (   95.64   232.85   -23.90     0.59 S1)  ; 22
                  (   96.81   231.90   -23.65     0.59 S1)  ; 23
                  (   96.52   230.31   -23.37     0.59 S1)  ; 24
                  (   96.23   227.45   -23.10     0.59 S1)  ; 25
                  (   97.40   225.54   -22.83     0.59 S1)  ; 26
                  (   99.74   223.95   -24.92     0.59 S1)  ; 27
                  (  100.91   222.04   -23.25     0.59 S1)  ; 28
                  (  102.08   219.81   -22.95     0.59 S1)  ; 29
                  (  104.12   217.58   -21.85     0.59 S1)  ; 30
                  (  106.76   216.31   -21.30     0.59 S1)  ; 31
                  (  108.45   214.75   -21.75     0.59 S1)  ; 32
                  (  111.09   213.80   -20.95     0.59 S1)  ; 33
                  (  112.55   211.89   -18.77     0.59 S1)  ; 34
                  (  114.01   210.30   -17.50     0.59 S1)  ; 35
                  (  114.60   209.03   -16.85     0.59 S1)  ; 36
                  (  114.30   206.80   -16.57     0.59 S1)  ; 37
                  (  113.72   204.25   -16.35     0.59 S1)  ; 38
                  (  115.18   203.62   -15.20     0.59 S1)  ; 39
                  (  116.94   202.66   -13.18     0.59 S1)  ; 40
                  (  117.23   200.75   -11.95     0.29 S1)  ; 41
                  (  118.11   199.80   -11.42     0.29 S1)  ; 42
                  (  119.86   197.57    -9.90     0.29 S1)  ; 43
                  (  119.28   194.71    -8.95     0.29 S1)  ; 44
                  (  120.74   192.48    -5.30     0.29 S1)  ; 45
                  (  121.62   191.85    -4.40     0.29 S1)  ; 46
                  (  123.37   191.21    -4.17     0.29 S1)  ; 47
                  (  122.49   190.57    -2.78     0.29 S1)  ; 48
                  (  121.32   188.66    -2.10     0.29 S1)  ; 49
                  (  121.91   186.75    -1.55     0.29 S1)  ; 50
                  (  123.37   184.85    -1.13     0.29 S1)  ; 51
                  (  123.96   183.57     0.93     0.29 S1)  ; 52
                  (  123.37   181.35     1.82     0.29 S1)  ; 53
                  (  123.96   178.48     2.25     0.29 S1)  ; 54
                  (  126.05   177.54     1.65     0.29 S1)  ; 55
                  (  125.76   175.31     2.67     0.29 S1)  ; 56
                  (  126.34   172.76     3.20     0.29 S1)  ; 57
                  (  127.51   171.17     4.45     0.29 S1)  ; 58
                  (  128.39   169.90     5.68     0.29 S1)  ; 59
                  (  128.10   168.31     8.50     0.29 S1)  ; 60
                  (  128.10   165.45    10.95     0.29 S1)  ; 61
                  (  128.10   163.54    11.68     0.29 S1)  ; 62
                  (  130.44   161.31    12.05     0.29 S1)  ; 63
                  (  130.44   159.08    12.35     0.29 S1)  ; 64
                  (  131.61   156.22    12.70     0.29 S1)  ; 65
                  (  133.95   154.95    12.90     0.29 S1)  ; 66
                   Normal
                |
                  (   54.69   261.75   -36.55     0.88 S1)  ; 1, R-1-1-1-1-2-1-1-2
                  (   56.74   262.70   -35.47     0.88 S1)  ; 2
                  (   57.61   263.34   -32.77     0.88 S1)  ; 3
                  (   59.66   263.65   -30.40     0.59 S1)  ; 4
                  (   61.12   264.61   -29.88     0.59 S1)  ; 5
                  (   62.59   263.97   -28.52     0.59 S1)  ; 6
                  (   64.34   264.61   -27.15     0.59 S1)  ; 7
                  (   64.93   264.93   -26.15     0.59 S1)  ; 8
                  (   65.80   265.88   -26.05     0.59 S1)  ; 9
                  (   66.97   267.79   -25.92     0.59 S1)  ; 10
                  (   68.73   268.43   -25.07     0.59 S1)  ; 11
                  (   69.61   268.11   -23.45     0.59 S1)  ; 12
                  (   70.78   268.43   -21.77     0.59 S1)  ; 13
                  (   72.24   269.38   -21.67     0.59 S1)  ; 14
                  (   73.99   269.38   -21.30     0.59 S1)  ; 15
                  (   75.46   269.06   -19.60     0.59 S1)  ; 16
                  (   76.04   269.38   -16.67     0.59 S1)  ; 17
                  (   77.21   270.34   -15.40     0.59 S1)  ; 18
                  (   79.26   271.29   -13.92     0.59 S1)  ; 19
                  (   81.31   272.56   -13.23     0.59 S1)  ; 20
                  (   82.19   273.84   -12.75     0.59 S1)  ; 21
                  (   84.23   275.43   -12.30     0.59 S1)  ; 22
                  (   85.99   275.11   -11.68     0.59 S1)  ; 23
                  (   85.70   276.06   -10.30     0.59 S1)  ; 24
                  (   85.70   277.34    -9.00     0.59 S1)  ; 25
                  (   87.16   278.29    -8.80     0.59 S1)  ; 26
                  (   88.91   279.56    -8.30     0.59 S1)  ; 27
                  (   90.96   279.56    -7.87     0.59 S1)  ; 28
                  (   93.59   279.25    -6.85     0.59 S1)  ; 29
                  (   96.52   279.56    -6.35     0.29 S1)  ; 30
                  (   96.81   280.84    -5.92     0.29 S1)  ; 31
                  (   97.98   282.43    -3.90     0.29 S1)  ; 32
                  (   99.44   283.70    -1.55     0.29 S1)  ; 33
                  (  100.61   282.75    -1.35     0.29 S1)  ; 34
                  (  101.20   284.02    -1.02     0.29 S1)  ; 35
                  (  101.20   285.93     0.90     0.29 S1)  ; 36
                  (  102.66   286.88     2.03     0.29 S1)  ; 37
                  (  105.29   287.84     3.95     0.29 S1)  ; 38
                  (  105.29   289.49     4.25     0.29 S1)  ; 39
                  (  107.63   291.72     6.42     0.29 S1)  ; 40
                  (  108.22   293.31     7.80     0.29 S1)  ; 41
                  (  108.51   295.54     9.17     0.29 S1)  ; 42
                  (  109.97   297.45    10.17     0.29 S1)  ; 43
                  (  110.85   299.04    11.02     0.29 S1)  ; 44
                  (  111.44   301.26    11.80     0.29 S1)  ; 45
                  (  111.14   304.45    12.13     0.29 S1)  ; 46
                  (  111.44   306.36    12.20     0.29 S1)  ; 47
                  (  113.19   307.95    12.35     0.29 S1)  ; 48
                  (  112.90   309.54    12.65     0.29 S1)  ; 49
                   Normal
                )  ;  End of split
              |
                (   45.45   261.31   -42.82     1.17 S1)  ; 1, R-1-1-1-1-2-1-2
                (   47.49   262.26   -41.85     1.17 S1)  ; 2
                (   49.83   262.90   -45.65     1.17 S1)  ; 3
                (   53.34   264.49   -45.27     1.17 S1)  ; 4
                (   55.10   266.72   -45.13     1.17 S1)  ; 5
                (   57.44   268.31   -44.45     1.17 S1)  ; 6
                (   59.49   269.26   -48.27     1.17 S1)  ; 7
                (   61.83   270.54   -49.25     1.17 S1)  ; 8
                (   63.29   270.54   -48.65     1.17 S1)  ; 9
                (   65.63   270.86   -44.50     0.88 S1)  ; 10
                (   67.68   270.54   -49.10     0.88 S1)  ; 11
                (   70.31   271.81   -51.67     0.88 S1)  ; 12
                (   72.94   271.81   -53.88     0.88 S1)  ; 13
                (   76.16   272.13   -55.40     0.88 S1)  ; 14
                (   78.21   271.81   -56.57     0.88 S1)  ; 15
                (   79.96   271.49   -57.22     0.88 S1)  ; 16
                (   82.01   272.45   -57.92     0.88 S1)  ; 17
                (   84.64   272.13   -59.02     0.88 S1)  ; 18
                (   89.03   272.13   -59.20     0.88 S1)  ; 19
                (   91.37   271.81   -62.88     0.88 S1)  ; 20
                (   93.71   270.86   -64.38     0.88 S1)  ; 21
                (   96.05   271.81   -66.68     0.88 S1)  ; 22
                (   98.68   273.40   -69.67     0.88 S1)  ; 23
                (  100.14   273.72   -66.85     0.59 S1)  ; 24
                (  102.48   273.40   -67.63     0.59 S1)  ; 25
                (  105.41   273.08   -66.72     0.59 S1)  ; 26
                (  110.09   273.08   -66.00     0.59 S1)  ; 27
                (  112.72   274.04   -60.60     0.59 S1)  ; 28
                (  113.89   275.95   -59.78     0.59 S1)  ; 29
                (  115.94   275.95   -59.17     0.59 S1)  ; 30
                (  118.28   275.63   -56.65     0.59 S1)  ; 31
                (  121.20   275.63   -56.15     0.59 S1)  ; 32
                (  122.37   276.90   -54.83     0.29 S1)  ; 33
                (  124.30   278.24   -53.58     0.29 S1)  ; 34
                (  125.77   277.92   -52.45     0.29 S1)  ; 35
                (  127.81   276.96   -51.80     0.29 S1)  ; 36
                (  128.69   276.96   -50.50     0.29 S1)  ; 37
                (  129.86   277.60   -49.13     0.29 S1)  ; 38
                (  131.03   277.60   -48.90     0.29 S1)  ; 39
                (  133.67   277.28   -48.78     0.29 S1)  ; 40
                (  136.01   276.65   -48.27     0.29 S1)  ; 41
                (  138.35   277.60   -47.05     0.29 S1)  ; 42
                (  140.10   276.65   -46.88     0.29 S1)  ; 43
                (  142.44   278.24   -46.63     0.29 S1)  ; 44
                (  144.78   279.19   -46.30     0.29 S1)  ; 45
                (  145.66   280.46   -46.22     0.29 S1)  ; 46
                (  148.00   280.78   -46.08     0.29 S1)  ; 47
                (  149.46   280.46   -44.72     0.29 S1)  ; 48
                (  152.68   280.78   -44.35     0.29 S1)  ; 49
                (  155.60   281.42   -43.80     0.29 S1)  ; 50
                (  156.77   280.46   -43.45     0.29 S1)  ; 51
                (  158.24   281.10   -43.13     0.29 S1)  ; 52
                (  159.41   281.74   -49.17     0.29 S1)  ; 53
                (  162.62   280.78   -49.83     0.29 S1)  ; 54
                (  164.96   279.83   -50.50     0.29 S1)  ; 55
                 Normal
              )  ;  End of split
            |
              (   29.01   262.72   -51.65     2.57 S1)  ; 1, R-1-1-1-1-2-2
              (   28.50   268.40   -52.13     2.57 S1)  ; 2
              (   29.01   273.23   -52.55     2.57 S1)  ; 3
              (   29.79   278.62   -52.75     2.57 S1)  ; 4
              (   30.81   282.32   -53.13     2.31 S1)  ; 5
              (   30.04   286.01   -54.10     2.31 S1)  ; 6
              (   30.04   291.12   -54.43     2.57 S1)  ; 7
              (   31.33   293.97   -55.00     2.57 S1)  ; 8
              (   31.07   297.09   -52.17     2.83 S1)  ; 9
              (   30.81   299.99   -49.27     3.09 S1)  ; 10

              (Cross
                (Color Green)
                (Name "Marker 3")
                (   31.88   259.51   -50.16     0.07 S1)  ; 1
                (   30.63   259.07   -50.16     0.07 S1)  ; 2
                (   26.67   260.47   -50.16     0.07 S1)  ; 3
                (   27.92   260.76   -50.16     0.07 S1)  ; 4
                (   28.06   259.22   -50.16     0.07 S1)  ; 5
                (   32.47   261.20   -51.90     0.07 S1)  ; 6
                (   32.98   262.30   -51.90     0.07 S1)  ; 7
                (   32.25   264.88   -51.90     0.07 S1)  ; 8
                (   27.84   261.94   -51.90     0.07 S1)  ; 9
                (   33.13   259.58   -51.24     0.07 S1)  ; 10
                (   29.61   260.39   -50.22     0.07 S1)  ; 11
                (   29.61   261.72   -50.22     0.07 S1)  ; 12
                (   31.07   262.97   -50.22     0.07 S1)  ; 13
                (   30.34   263.70   -50.22     0.07 S1)  ; 14
                (   29.90   264.66   -50.22     0.07 S1)  ; 15
                (   31.22   266.05   -50.22     0.07 S1)  ; 16
                (   30.27   266.35   -50.22     0.07 S1)  ; 17
                (   33.35   267.38   -50.22     0.07 S1)  ; 18
                (   30.19   269.14   -50.22     0.07 S1)  ; 19
                (   30.56   269.58   -50.22     0.07 S1)  ; 20
                (   26.96   269.44   -50.63     0.07 S1)  ; 21
                (   27.04   268.41   -50.63     0.07 S1)  ; 22
                (   27.33   263.99   -50.68     0.07 S1)  ; 23
                (   27.33   265.24   -50.68     0.07 S1)  ; 24
                (   26.96   270.39   -49.32     0.07 S1)  ; 25
                (   27.77   271.49   -49.21     0.07 S1)  ; 26
                (   27.62   272.89   -49.21     0.07 S1)  ; 27
                (   29.97   272.08   -49.21     0.07 S1)  ; 28
                (   31.15   271.13   -49.21     0.07 S1)  ; 29
                (   29.97   274.21   -49.21     0.07 S1)  ; 30
                (   31.29   269.66   -49.05     0.07 S1)  ; 31
                (   29.46   270.76   -49.05     0.07 S1)  ; 32
                (   30.41   267.74   -49.05     0.07 S1)  ; 33
                (   32.03   267.38   -49.39     0.07 S1)  ; 34
                (   31.22   267.23   -50.16     0.07 S1)  ; 35
                (   30.63   275.83   -50.54     0.07 S1)  ; 36
                (   31.52   277.23   -50.54     0.07 S1)  ; 37
                (   31.59   278.19   -50.54     0.07 S1)  ; 38
                (   27.62   280.32   -50.54     0.07 S1)  ; 39
                (   27.55   278.19   -50.54     0.07 S1)  ; 40
                (   27.70   275.83   -50.54     0.07 S1)  ; 41
                (   31.15   273.48   -51.25     0.07 S1)  ; 42
                (   31.81   272.16   -51.25     0.07 S1)  ; 43
                (   32.47   277.23   -51.25     0.07 S1)  ; 44
                (   32.40   278.99   -51.25     0.07 S1)  ; 45
                (   32.40   279.51   -51.25     0.07 S1)  ; 46
                (   28.50   279.88   -51.25     0.07 S1)  ; 47
                (   28.28   278.55   -51.25     0.07 S1)  ; 48
                (   33.65   274.80   -52.31     0.07 S1)  ; 49
                (   26.74   276.20   -52.31     0.07 S1)  ; 50
                (   32.40   276.42   -52.31     0.07 S1)  ; 51
                (   33.20   277.67   -52.31     0.07 S1)  ; 52
                (   26.59   278.92   -53.29     0.07 S1)  ; 53
                (   32.76   278.26   -53.29     0.07 S1)  ; 54
                (   31.44   275.54   -51.24     0.07 S1)  ; 55
                (   27.99   274.36   -50.10     0.07 S1)  ; 56
                (   28.43   275.24   -50.10     0.07 S1)  ; 57
                (   30.05   277.38   -49.99     0.07 S1)  ; 58
                (   30.85   278.26   -49.99     0.07 S1)  ; 59
                (   29.39   280.83   -49.99     0.07 S1)  ; 60
                (   31.74   280.83   -49.99     0.07 S1)  ; 61
                (   27.99   277.08   -49.90     0.07 S1)  ; 62
                (   30.41   275.10   -49.90     0.07 S1)  ; 63
                (   30.34   264.88   -49.13     0.07 S1)  ; 64
                (   28.36   266.42   -49.13     0.07 S1)  ; 65
                (   30.93   272.08   -49.13     0.07 S1)  ; 66
                (   27.77   266.94   -46.88     0.07 S1)  ; 67
                (   30.05   283.77   -49.79     0.07 S1)  ; 68
                (   30.34   286.42   -49.79     0.07 S1)  ; 69
                (   29.16   286.93   -49.79     0.07 S1)  ; 70
                (   27.04   287.16   -49.79     0.07 S1)  ; 71
                (   32.18   282.30   -51.21     0.07 S1)  ; 72
                (   32.32   284.80   -51.21     0.07 S1)  ; 73
                (   31.66   285.24   -51.21     0.07 S1)  ; 74
                (   31.66   285.98   -51.21     0.07 S1)  ; 75
                (   31.96   288.04   -51.21     0.07 S1)  ; 76
                (   31.29   288.26   -51.21     0.07 S1)  ; 77
                (   27.92   286.13   -51.21     0.07 S1)  ; 78
                (   28.28   285.02   -51.21     0.07 S1)  ; 79
                (   28.50   283.63   -51.21     0.07 S1)  ; 80
                (   33.50   283.70   -51.21     0.07 S1)  ; 81
                (   29.46   285.76   -51.97     0.07 S1)  ; 82
                (   28.87   298.77   -53.64     0.07 S1)  ; 83
                (   33.94   298.63   -53.64     0.07 S1)  ; 84
                (   34.31   297.74   -53.64     0.07 S1)  ; 85
                (   34.67   296.49   -53.64     0.07 S1)  ; 86
                (   33.79   295.17   -53.64     0.07 S1)  ; 87
                (   32.62   289.43   -53.70     0.07 S1)  ; 88
                (   32.47   290.91   -53.70     0.07 S1)  ; 89
                (   33.35   291.79   -53.70     0.07 S1)  ; 90
                (   33.35   292.67   -53.70     0.07 S1)  ; 91
                (   33.35   293.77   -53.70     0.07 S1)  ; 92
                (   32.84   288.04   -52.75     0.07 S1)  ; 93
                (   33.06   283.55   -52.75     0.07 S1)  ; 94
                (   27.84   284.07   -52.75     0.07 S1)  ; 95
                (   27.33   288.11   -52.75     0.07 S1)  ; 96
                (   30.34   298.48   -51.89     0.07 S1)  ; 97
                (   33.50   297.30   -51.89     0.07 S1)  ; 98
                (   32.10   295.39   -51.89     0.07 S1)  ; 99
                (   30.78   297.15   -51.89     0.07 S1)  ; 100
                (   28.87   292.74   -50.95     0.07 S1)  ; 101
                (   32.84   294.95   -50.95     0.07 S1)  ; 102
                (   31.44   292.01   -51.22     0.07 S1)  ; 103
                (   31.44   291.49   -51.42     0.07 S1)  ; 104
                (   29.46   289.80   -51.42     0.07 S1)  ; 105
                (   27.70   289.43   -52.44     0.07 S1)  ; 106
                (   28.06   291.57   -52.75     0.07 S1)  ; 107
                (   27.99   292.38   -52.75     0.07 S1)  ; 108
                (   27.99   293.11   -52.75     0.07 S1)  ; 109
                (   28.72   294.29   -52.75     0.07 S1)  ; 110
                (   28.58   295.90   -52.75     0.07 S1)  ; 111
                (   29.16   296.86   -52.75     0.07 S1)  ; 112
                (   28.06   298.04   -52.75     0.07 S1)  ; 113
                (   32.84   296.71   -53.21     0.07 S1)  ; 114
                (   31.00   295.46   -53.21     0.07 S1)  ; 115
                (   30.56   294.80   -53.21     0.07 S1)  ; 116
                (   32.18   293.26   -53.21     0.07 S1)  ; 117
                (   31.88   290.10   -53.80     0.07 S1)  ; 118
                (   27.99   288.92   -53.80     0.07 S1)  ; 119
                (   32.62   281.13   -51.99     0.07 S1)  ; 120
                (   28.36   281.86   -53.09     0.07 S1)  ; 121
              )  ;  End of markers
              (
                (   28.37   299.77   -52.15     0.88 S1)  ; 1, R-1-1-1-1-2-2-1
                (   25.74   299.45   -57.02     0.88 S1)  ; 2
                (   23.40   299.45   -58.95     0.88 S1)  ; 3
                (   19.59   299.77   -60.27     0.88 S1)  ; 4
                (   16.67   298.82   -61.67     0.88 S1)  ; 5
                (   14.04   297.55   -67.77     0.88 S1)  ; 6
                (
                  (   11.40   297.86   -69.40     0.88 S1)  ; 1, R-1-1-1-1-2-2-1-1
                  (    9.94   297.86   -71.28     0.88 S1)  ; 2
                  (    7.02   295.64   -71.75     0.88 S1)  ; 3
                  (    4.68   293.73   -72.13     0.88 S1)  ; 4
                  (    2.34   291.82   -72.85     0.88 S1)  ; 5
                  (    0.87   290.86   -75.52     0.88 S1)  ; 6
                  (   -0.59   290.55   -77.38     0.88 S1)  ; 7
                  (   -2.34   291.18   -80.57     0.88 S1)  ; 8
                  (   -3.51   290.55   -83.63     0.88 S1)  ; 9
                  (   -4.69   290.86   -85.63     0.88 S1)  ; 10
                  (   -7.03   291.82   -87.60     0.88 S1)  ; 11
                  (
                    (   -7.90   294.05   -87.60     0.88 S1)  ; 1, R-1-1-1-1-2-2-1-1-1
                    (  -10.24   294.36   -90.47     0.88 S1)  ; 2
                    (  -11.41   295.95   -96.00     0.88 S1)  ; 3
                    (  -14.05   297.23   -98.95     0.88 S1)  ; 4
                    (  -15.80   298.50  -103.70     0.88 S1)  ; 5
                    (  -16.09   300.41  -106.67     0.88 S1)  ; 6
                     High
                  |
                    (   -4.98   291.18   -92.00     0.88 S1)  ; 1, R-1-1-1-1-2-2-1-1-2
                    (   -2.64   289.91   -96.50     0.88 S1)  ; 2
                    (   -0.00   288.00   -99.17     0.88 S1)  ; 3
                    (    0.87   289.59  -102.50     0.88 S1)  ; 4
                    (    2.92   288.32  -105.73     0.88 S1)  ; 5
                    (    2.04   287.36  -108.30     0.88 S1)  ; 6
                     High
                  )  ;  End of split
                |
                  (   14.91   295.64   -67.77     0.88 S1)  ; 1, R-1-1-1-1-2-2-1-2
                  (   12.87   294.05   -72.93     0.88 S1)  ; 2
                  (   13.74   291.82   -78.28     0.88 S1)  ; 3
                  (   11.99   291.18   -76.32     0.88 S1)  ; 4
                  (   10.53   291.50   -88.72     0.88 S1)  ; 5
                  (   11.70   293.09   -94.05     0.88 S1)  ; 6
                  (    9.65   291.18   -95.25     0.88 S1)  ; 7
                   Incomplete
                )  ;  End of split
              |
                (   31.07   304.25   -48.50     3.09 S1)  ; 1, R-1-1-1-1-2-2-2
                (   30.04   308.23   -47.85     3.09 S1)  ; 2
                (   30.04   311.35   -51.30     3.09 S1)  ; 3
                (   30.30   313.34   -51.77     3.09 S1)  ; 4
                (
                  (   30.10   315.40   -52.10     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1
                  (
                    (   28.08   316.32   -43.42     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1-1
                    (   29.54   317.91   -41.67     0.59 S1)  ; 2
                    (   32.17   319.50   -40.90     0.59 S1)  ; 3
                    (   32.46   320.77   -39.02     0.59 S1)  ; 4
                    (   31.00   320.77   -37.95     0.59 S1)  ; 5
                    (
                      (   31.29   318.55   -35.38     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1-1-1
                      (   31.88   316.64   -32.47     0.59 S1)  ; 2
                      (   32.17   314.73   -30.33     0.59 S1)  ; 3
                      (   31.59   313.14   -29.38     0.59 S1)  ; 4
                      (   32.17   311.23   -25.33     0.59 S1)  ; 5
                      (   34.22   310.27   -23.75     0.59 S1)  ; 6
                      (   35.97   308.36   -22.17     0.59 S1)  ; 7
                      (   37.73   306.14   -20.77     0.59 S1)  ; 8
                      (   39.19   303.59   -18.97     0.59 S1)  ; 9
                      (   40.65   302.95   -15.75     0.59 S1)  ; 10
                      (   40.65   302.00   -14.20     0.59 S1)  ; 11
                      (   39.78   301.36   -13.55     0.59 S1)  ; 12
                      (   38.61   301.05   -13.05     0.59 S1)  ; 13
                      (   40.07   299.77   -10.73     0.59 S1)  ; 14
                      (   40.36   298.18    -9.70     0.59 S1)  ; 15
                      (   40.65   296.91    -7.47     0.59 S1)  ; 16
                      (   38.90   295.64    -6.82     0.59 S1)  ; 17
                      (   39.78   295.00    -4.68     0.59 S1)  ; 18
                      (   39.48   293.09    -1.60     0.59 S1)  ; 19
                      (   40.07   291.18    -1.07     0.59 S1)  ; 20
                      (   40.65   291.82     0.30     0.59 S1)  ; 21
                      (   42.12   291.18     2.47     0.59 S1)  ; 22
                      (   40.95   289.59     2.92     0.59 S1)  ; 23
                      (   40.65   287.68     4.43     0.59 S1)  ; 24
                      (   41.53   286.41     6.07     0.59 S1)  ; 25
                      (   42.12   285.77     7.20     0.59 S1)  ; 26
                      (   43.29   287.05     8.52     0.59 S1)  ; 27
                      (   42.99   289.27    10.10     0.59 S1)  ; 28
                      (   41.53   291.18    10.28     0.59 S1)  ; 29
                      (   39.48   292.14    10.40     0.59 S1)  ; 30
                      (   37.44   292.77    10.90     0.59 S1)  ; 31
                       Normal
                    |
                      (   29.83   322.36   -35.30     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1-1-2
                      (   28.66   323.00   -35.30     0.59 S1)  ; 2
                      (   26.91   324.59   -32.83     0.59 S1)  ; 3
                      (   26.03   326.82   -32.15     0.59 S1)  ; 4
                      (   25.74   328.41   -31.02     0.59 S1)  ; 5
                      (   23.98   328.73   -29.05     0.59 S1)  ; 6
                      (   24.57   329.68   -28.00     0.59 S1)  ; 7
                      (   25.15   329.68   -24.70     0.59 S1)  ; 8
                      (   24.57   331.27   -17.02     0.59 S1)  ; 9
                      (   23.98   334.14   -15.82     0.59 S1)  ; 10
                      (   23.40   334.77   -14.45     0.59 S1)  ; 11
                      (   22.81   335.73   -12.72     0.59 S1)  ; 12
                      (   22.81   337.00   -11.32     0.59 S1)  ; 13
                      (   21.06   337.32    -9.82     0.59 S1)  ; 14
                      (   19.30   337.95    -8.55     0.59 S1)  ; 15
                      (   19.59   340.18    -6.15     0.59 S1)  ; 16
                      (   20.47   342.09    -4.72     0.59 S1)  ; 17
                      (   21.93   343.68    -3.92     0.59 S1)  ; 18
                      (   20.47   344.64    -0.40     0.59 S1)  ; 19
                      (   21.35   345.59     1.53     0.59 S1)  ; 20
                      (   21.93   347.82     0.77     0.59 S1)  ; 21
                      (   20.76   348.77     2.95     0.59 S1)  ; 22
                      (   21.06   350.05     3.60     0.59 S1)  ; 23
                      (   21.64   351.32     5.22     0.59 S1)  ; 24
                      (   20.18   353.23     7.35     0.59 S1)  ; 25
                      (   18.13   354.18     8.02     0.59 S1)  ; 26
                      (   16.67   355.46     9.05     0.59 S1)  ; 27
                      (   17.84   355.77     9.70     0.59 S1)  ; 28
                      (   19.01   356.41    10.33     0.59 S1)  ; 29
                      (
                        (   20.76   355.14     7.45     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1-1-2-1
                        (   21.64   353.55     7.22     0.59 S1)  ; 2
                        (   22.81   352.27     6.22     0.59 S1)  ; 3
                        (   24.57   351.00     5.68     0.59 S1)  ; 4
                        (   25.15   349.41     5.37     0.59 S1)  ; 5
                         Normal
                      |
                        (   18.72   358.32    12.55     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1-1-2-2
                        (   20.18   359.27    13.23     0.59 S1)  ; 2
                        (   21.93   360.55    13.67     0.59 S1)  ; 3
                         Low
                      )  ;  End of split
                    )  ;  End of split
                  |
                    (   32.73   315.08   -57.37     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-1-2
                    (   33.90   315.72   -61.52     0.59 S1)  ; 2
                    (   35.36   317.94   -62.08     0.59 S1)  ; 3
                    (   36.53   320.17   -63.50     0.59 S1)  ; 4
                    (   38.29   322.40   -66.92     0.59 S1)  ; 5
                    (   38.87   324.94   -68.53     0.59 S1)  ; 6
                    (   38.87   327.17   -70.38     0.59 S1)  ; 7
                    (   38.29   328.45   -71.70     0.59 S1)  ; 8
                    (   40.63   330.35   -72.10     0.59 S1)  ; 9
                    (   42.09   331.95   -73.05     0.59 S1)  ; 10
                    (   42.38   334.17   -75.78     0.59 S1)  ; 11
                    (   43.26   335.45   -78.38     0.59 S1)  ; 12
                    (   43.85   337.04   -81.05     0.59 S1)  ; 13
                    (   45.31   338.31   -83.93     0.59 S1)  ; 14
                    (   47.36   340.22   -85.68     0.59 S1)  ; 15
                    (   49.70   343.72   -83.05     0.59 S1)  ; 16
                    (   52.04   346.90   -89.82     0.59 S1)  ; 17
                    (   53.79   348.81   -92.02     0.59 S1)  ; 18
                    (   56.72   352.63   -91.40     0.59 S1)  ; 19
                    (   58.18   355.49   -94.22     0.59 S1)  ; 20
                    (   60.23   358.35   -96.20     0.59 S1)  ; 21
                    (   61.40   361.85   -99.85     0.59 S1)  ; 22
                    (   64.03   366.31   -99.85     0.59 S1)  ; 23
                    (   65.20   369.81  -100.28     0.59 S1)  ; 24
                    (   67.54   372.67  -100.92     0.59 S1)  ; 25
                    (   69.90   376.52  -101.15     0.59 S1)  ; 26
                    (   73.12   380.34  -103.05     0.59 S1)  ; 27
                    (   78.09   382.56  -104.07     0.59 S1)  ; 28
                    (   83.65   384.47  -104.27     0.59 S1)  ; 29
                    (   85.99   385.11  -102.35     0.59 S1)  ; 30
                    (   88.04   386.70  -105.63     0.59 S1)  ; 31
                     High
                  )  ;  End of split
                |
                  (   29.01   318.74   -52.72     3.09 S1)  ; 1, R-1-1-1-1-2-2-2-2
                  (   28.24   324.42   -53.67     3.09 S1)  ; 2
                  (   27.21   329.53   -54.02     3.09 S1)  ; 3
                  (   24.39   334.08   -54.13     2.83 S1)  ; 4
                  (   22.59   336.92   -54.60     2.57 S1)  ; 5
                  (   21.56   338.91   -51.25     2.31 S1)  ; 6
                  (   21.04   341.46   -48.35     2.31 S1)  ; 7
                  (   24.13   343.45   -46.88     2.57 S1)  ; 8
                  (   25.93   345.50   -47.88     2.57 S1)  ; 9
                  (   25.93   348.62   -51.40     2.57 S1)  ; 10
                  (   26.19   352.88   -54.15     2.57 S1)  ; 11
                  (   26.44   357.71   -55.40     2.57 S1)  ; 12
                  (   26.70   362.54   -55.88     2.57 S1)  ; 13
                  (   26.70   365.95   -56.47     2.57 S1)  ; 14
                  (   26.70   368.79   -58.72     2.57 S1)  ; 15

                  (Cross
                    (Color RGB (0, 128, 192))
                    (Name "Marker 3")
                    (   24.54   365.04   -55.77     0.59 S1)  ; 1
                    (   24.54   363.13   -55.77     0.59 S1)  ; 2
                    (   28.93   363.76   -55.77     0.59 S1)  ; 3
                    (   24.25   361.22   -54.83     0.59 S1)  ; 4
                    (   24.54   360.58   -54.83     0.59 S1)  ; 5
                    (   28.64   360.26   -53.05     0.59 S1)  ; 6
                    (   28.34   356.76   -53.05     0.59 S1)  ; 7
                    (   24.25   357.08   -53.05     0.59 S1)  ; 8
                    (   28.64   354.85   -51.63     0.59 S1)  ; 9
                    (   28.34   351.99   -51.63     0.59 S1)  ; 10
                    (   24.54   354.22   -51.63     0.59 S1)  ; 11
                    (   24.25   352.95   -51.63     0.59 S1)  ; 12
                    (   28.34   362.17   -51.63     0.59 S1)  ; 13
                    (   23.96   350.40   -46.80     0.59 S1)  ; 14
                    (   27.76   349.45   -46.80     0.59 S1)  ; 15
                    (   28.05   344.99   -46.40     0.59 S1)  ; 16
                    (   23.08   346.90   -49.58     0.59 S1)  ; 17
                    (   27.76   346.58   -49.58     0.59 S1)  ; 18
                    (   21.91   344.35   -49.58     0.59 S1)  ; 19
                    (   26.59   343.40   -49.58     0.59 S1)  ; 20
                    (   25.71   342.13   -49.58     0.59 S1)  ; 21
                    (   18.69   342.45   -44.60     0.59 S1)  ; 22
                    (   18.98   341.17   -44.60     0.59 S1)  ; 23
                    (   19.86   339.90   -44.60     0.59 S1)  ; 24
                    (   19.57   338.63   -48.65     0.59 S1)  ; 25
                    (   19.86   336.72   -54.00     0.59 S1)  ; 26
                    (   21.32   336.08   -54.00     0.59 S1)  ; 27
                    (   26.00   335.13   -54.00     0.59 S1)  ; 28
                    (   28.34   333.22   -54.72     0.59 S1)  ; 29
                    (   22.49   332.26   -48.35     0.59 S1)  ; 30
                    (   23.66   330.99   -48.35     0.59 S1)  ; 31
                    (   25.13   327.17   -47.47     0.59 S1)  ; 32
                    (   25.71   326.22   -47.47     0.59 S1)  ; 33
                    (   26.00   325.58   -47.47     0.59 S1)  ; 34
                    (   25.71   323.99   -47.47     0.59 S1)  ; 35
                    (   26.59   321.44   -47.47     0.59 S1)  ; 36
                    (   26.88   319.85   -47.47     0.59 S1)  ; 37
                    (   26.88   318.26   -47.47     0.59 S1)  ; 38
                    (   28.93   330.35   -49.27     0.59 S1)  ; 39
                    (   29.51   328.13   -49.25     0.59 S1)  ; 40
                    (   29.81   328.45   -48.80     0.59 S1)  ; 41
                    (   30.10   325.26   -55.22     0.59 S1)  ; 42
                    (   30.68   323.35   -55.22     0.59 S1)  ; 43
                    (   28.05   315.72   -48.58     0.59 S1)  ; 44
                    (   31.56   317.31   -47.63     0.59 S1)  ; 45
                    (   26.00   322.08   -51.60     0.59 S1)  ; 46
                    (   31.27   322.40   -51.60     0.59 S1)  ; 47
                    (   30.98   321.13   -51.60     0.59 S1)  ; 48
                    (   31.56   317.94   -47.97     0.59 S1)  ; 49
                    (   24.83   329.40   -53.40     0.59 S1)  ; 50
                    (   22.20   338.95   -46.88     0.59 S1)  ; 51
                    (   22.79   340.85   -46.88     0.59 S1)  ; 52
                    (   24.54   365.04   -55.77     0.59 S1)  ; 53
                    (   24.54   363.13   -55.77     0.59 S1)  ; 54
                    (   28.93   363.76   -55.77     0.59 S1)  ; 55
                    (   24.25   361.22   -54.83     0.59 S1)  ; 56
                    (   24.54   360.58   -54.83     0.59 S1)  ; 57
                    (   28.64   360.26   -53.05     0.59 S1)  ; 58
                    (   28.34   356.76   -53.05     0.59 S1)  ; 59
                    (   24.25   357.08   -53.05     0.59 S1)  ; 60
                    (   28.64   354.85   -51.63     0.59 S1)  ; 61
                    (   28.34   351.99   -51.63     0.59 S1)  ; 62
                    (   24.54   354.22   -51.63     0.59 S1)  ; 63
                    (   24.25   352.95   -51.63     0.59 S1)  ; 64
                    (   28.34   362.17   -51.63     0.59 S1)  ; 65
                    (   23.96   350.40   -46.80     0.59 S1)  ; 66
                    (   27.76   349.45   -46.80     0.59 S1)  ; 67
                    (   28.05   344.99   -46.40     0.59 S1)  ; 68
                    (   23.08   346.90   -49.58     0.59 S1)  ; 69
                    (   27.76   346.58   -49.58     0.59 S1)  ; 70
                    (   21.91   344.35   -49.58     0.59 S1)  ; 71
                    (   26.59   343.40   -49.58     0.59 S1)  ; 72
                    (   25.71   342.13   -49.58     0.59 S1)  ; 73
                    (   18.69   342.45   -44.60     0.59 S1)  ; 74
                    (   18.98   341.17   -44.60     0.59 S1)  ; 75
                    (   19.86   339.90   -44.60     0.59 S1)  ; 76
                    (   19.57   338.63   -48.65     0.59 S1)  ; 77
                    (   19.86   336.72   -54.00     0.59 S1)  ; 78
                    (   21.32   336.08   -54.00     0.59 S1)  ; 79
                    (   26.00   335.13   -54.00     0.59 S1)  ; 80
                    (   28.34   333.22   -54.72     0.59 S1)  ; 81
                    (   22.49   332.26   -48.35     0.59 S1)  ; 82
                    (   23.66   330.99   -48.35     0.59 S1)  ; 83
                    (   25.13   327.17   -47.47     0.59 S1)  ; 84
                    (   25.71   326.22   -47.47     0.59 S1)  ; 85
                    (   26.00   325.58   -47.47     0.59 S1)  ; 86
                    (   25.71   323.99   -47.47     0.59 S1)  ; 87
                    (   26.59   321.44   -47.47     0.59 S1)  ; 88
                    (   26.88   319.85   -47.47     0.59 S1)  ; 89
                    (   26.88   318.26   -47.47     0.59 S1)  ; 90
                    (   28.93   330.35   -49.27     0.59 S1)  ; 91
                    (   29.51   328.13   -49.25     0.59 S1)  ; 92
                    (   29.81   328.45   -48.80     0.59 S1)  ; 93
                    (   30.10   325.26   -55.22     0.59 S1)  ; 94
                    (   30.68   323.35   -55.22     0.59 S1)  ; 95
                    (   28.05   315.72   -48.58     0.59 S1)  ; 96
                    (   31.56   317.31   -47.63     0.59 S1)  ; 97
                    (   26.00   322.08   -51.60     0.59 S1)  ; 98
                    (   31.27   322.40   -51.60     0.59 S1)  ; 99
                    (   30.98   321.13   -51.60     0.59 S1)  ; 100
                    (   31.56   317.94   -47.97     0.59 S1)  ; 101
                    (   24.83   329.40   -53.40     0.59 S1)  ; 102
                    (   22.20   338.95   -46.88     0.59 S1)  ; 103
                    (   22.79   340.85   -46.88     0.59 S1)  ; 104
                  )  ;  End of markers
                  (
                    (   25.74   368.20   -58.78     0.59 S1)  ; 1, R-1-1-1-1-2-2-2-2-1
                    (   24.57   368.20   -59.00     0.59 S1)  ; 2
                    (   23.69   369.47   -59.92     0.59 S1)  ; 3
                    (   22.81   370.74   -60.60     0.59 S1)  ; 4
                    (   21.35   372.33   -60.85     0.59 S1)  ; 5
                    (   20.77   373.29   -62.17     0.88 S1)  ; 6
                    (   20.18   374.24   -62.70     0.88 S1)  ; 7
                    (   19.01   375.51   -64.20     0.88 S1)  ; 8
                    (   17.26   377.11   -64.90     0.88 S1)  ; 9
                    (   16.38   378.38   -68.07     0.88 S1)  ; 10
                    (   16.09   379.01   -68.53     0.88 S1)  ; 11
                    (   14.33   381.24   -69.67     0.88 S1)  ; 12
                    (   14.33   382.51   -73.47     0.88 S1)  ; 13
                    (   14.62   383.47   -75.47     0.88 S1)  ; 14
                    (   14.04   385.06   -77.85     0.88 S1)  ; 15
                    (   11.99   385.38   -85.70     0.88 S1)  ; 16
                    (   11.70   387.29   -89.50     0.88 S1)  ; 17
                    (   10.82   389.83   -92.65     0.88 S1)  ; 18
                    (    9.36   391.42   -90.42     0.88 S1)  ; 19
                    (    5.56   392.70   -97.57     0.59 S1)  ; 20
                    (    4.97   394.29  -100.82     0.59 S1)  ; 21
                    (    3.80   396.20  -103.00     0.59 S1)  ; 22
                    (    2.92   398.42  -106.43     0.59 S1)  ; 23
                    (    0.88   400.33  -110.05     0.59 S1)  ; 24
                    (   -0.29   402.56  -112.92     0.59 S1)  ; 25
                    (   -2.34   402.88  -113.50     0.59 S1)  ; 26
                    (   -3.80   405.11  -115.28     0.59 S1)  ; 27
                    (   -5.56   407.97  -121.50     0.59 S1)  ; 28
                    (   -7.90   409.88  -126.13     0.59 S1)  ; 29
                    (   -8.78   412.74  -128.38     0.59 S1)  ; 30
                    (  -11.41   414.65  -128.98     0.59 S1)  ; 31
                    (  -13.75   417.20  -129.05     0.59 S1)  ; 32

                    (Cross
                      (Color Orange)
                      (Name "Marker 3")
                      (   19.30   373.61   -64.20     0.88 S1)  ; 1
                      (   19.01   372.65   -64.20     0.88 S1)  ; 2
                      (   21.64   374.56   -59.97     0.88 S1)  ; 3
                      (   22.81   372.65   -57.45     0.88 S1)  ; 4
                      (   14.33   378.70   -68.53     0.88 S1)  ; 5
                      (   14.92   378.70   -68.53     0.88 S1)  ; 6
                      (   14.62   379.97   -69.92     0.88 S1)  ; 7
                      (   16.09   381.24   -69.92     0.88 S1)  ; 8
                      (   17.55   378.70   -65.63     0.88 S1)  ; 9
                      (   16.09   376.79   -63.60     0.88 S1)  ; 10
                      (   18.43   377.74   -60.27     0.88 S1)  ; 11
                      (   15.50   385.38   -81.05     0.88 S1)  ; 12
                      (   15.79   384.42   -73.38     0.88 S1)  ; 13
                      (    9.36   389.51   -83.15     0.88 S1)  ; 14
                      (   12.87   387.61   -80.80     0.88 S1)  ; 15
                      (   10.82   386.33   -80.13     0.88 S1)  ; 16
                      (   24.28   370.42   -57.40     0.88 S1)  ; 17
                      (   24.28   370.42   -57.40     0.88 S1)  ; 18
                      (   19.30   373.61   -64.20     0.88 S1)  ; 19
                      (   19.01   372.65   -64.20     0.88 S1)  ; 20
                      (   21.64   374.56   -59.97     0.88 S1)  ; 21
                      (   22.81   372.65   -57.45     0.88 S1)  ; 22
                      (   14.33   378.70   -68.53     0.88 S1)  ; 23
                      (   14.92   378.70   -68.53     0.88 S1)  ; 24
                      (   14.62   379.97   -69.92     0.88 S1)  ; 25
                      (   16.09   381.24   -69.92     0.88 S1)  ; 26
                      (   17.55   378.70   -65.63     0.88 S1)  ; 27
                      (   16.09   376.79   -63.60     0.88 S1)  ; 28
                      (   18.43   377.74   -60.27     0.88 S1)  ; 29
                      (   15.50   385.38   -81.05     0.88 S1)  ; 30
                      (   15.79   384.42   -73.38     0.88 S1)  ; 31
                      (    9.36   389.51   -83.15     0.88 S1)  ; 32
                      (   12.87   387.61   -80.80     0.88 S1)  ; 33
                      (   10.82   386.33   -80.13     0.88 S1)  ; 34
                    )  ;  End of markers
                     High
                  |
                    (   25.41   370.50   -58.67     2.06 S1)  ; 1, R-1-1-1-1-2-2-2-2-2
                    (   25.93   372.48   -59.07     2.06 S1)  ; 2
                    (   27.73   375.04   -59.75     2.06 S1)  ; 3
                    (   27.47   377.09   -56.15     2.57 S1)  ; 4
                    (   26.44   381.35   -54.92     2.57 S1)  ; 5
                    (   25.93   385.89   -54.32     2.57 S1)  ; 6
                    (   24.90   391.57   -54.02     2.57 S1)  ; 7
                    (   24.39   396.12   -53.80     2.57 S1)  ; 8
                    (   24.90   400.67   -53.67     2.57 S1)  ; 9
                    (   24.90   405.21   -53.53     2.57 S1)  ; 10
                    (   25.16   409.47   -53.67     2.57 S1)  ; 11
                    (   25.67   412.88   -54.40     2.57 S1)  ; 12
                    (   26.19   416.57   -56.82     2.57 S1)  ; 13
                    (   25.41   421.69   -58.17     2.57 S1)  ; 14
                    (   25.16   425.95   -59.27     2.57 S1)  ; 15
                    (   26.70   429.93   -59.50     2.57 S1)  ; 16
                    (   26.44   433.90   -60.45     2.57 S1)  ; 17
                    (   25.93   437.65   -56.42     2.57 S1)  ; 18
                    (   26.70   441.63   -55.40     2.57 S1)  ; 19
                    (   27.47   446.18   -55.07     2.57 S1)  ; 20
                    (   26.70   450.72   -54.90     2.57 S1)  ; 21
                    (   26.44   454.41   -54.67     2.57 S1)  ; 22
                    (   28.24   458.67   -54.43     2.57 S1)  ; 23
                    (   26.96   462.65   -53.92     2.57 S1)  ; 24
                    (   25.93   465.21   -56.03     2.57 S1)  ; 25
                    (   25.41   468.90   -57.00     2.57 S1)  ; 26
                    (   24.64   474.01   -58.90     2.57 S1)  ; 27
                    (   24.39   478.56   -59.72     2.57 S1)  ; 28
                    (   23.36   483.73   -60.10     2.57 S1)  ; 29
                    (   23.36   487.99   -60.72     2.57 S1)  ; 30
                    (   24.64   490.55   -60.22     2.06 S1)  ; 31
                    (   25.16   492.82   -57.10     2.06 S1)  ; 32
                    (   23.36   495.09   -55.77     2.06 S1)  ; 33
                    (   23.87   497.93   -55.20     2.83 S1)  ; 34
                    (   24.39   502.76   -58.53     2.83 S1)  ; 35
                    (   23.87   508.16   -59.42     2.83 S1)  ; 36
                    (   23.87   514.13   -59.70     2.83 S1)  ; 37
                    (   23.87   518.39   -59.87     2.83 S1)  ; 38
                    (   21.81   522.08   -59.90     2.83 S1)  ; 39
                    (   21.56   526.68   -57.20     2.83 S1)  ; 40
                    (   21.56   531.51   -55.70     2.83 S1)  ; 41
                    (   21.30   536.06   -54.85     2.83 S1)  ; 42
                    (   20.53   539.75   -55.90     2.83 S1)  ; 43
                    (   20.27   544.30   -59.85     2.83 S1)  ; 44
                    (   19.76   549.69   -60.07     2.83 S1)  ; 45
                    (   20.01   554.52   -60.22     2.83 S1)  ; 46
                    (   20.27   561.06   -61.15     2.83 S1)  ; 47
                    (   19.50   564.52   -61.90     2.83 S1)  ; 48
                    (   17.96   567.36   -62.30     2.83 S1)  ; 49
                    (   17.19   571.06   -60.03     2.83 S1)  ; 50
                    (   17.96   574.18   -58.38     2.83 S1)  ; 51
                    (   17.70   579.29   -58.38     2.83 S1)  ; 52
                    (   18.21   583.84   -58.20     2.83 S1)  ; 53
                    (   19.50   587.53   -58.13     2.83 S1)  ; 54
                    (   18.99   591.51   -57.88     2.83 S1)  ; 55
                    (   18.73   594.35   -57.02     2.83 S1)  ; 56
                    (
                      (   17.70   596.91   -58.25     1.80 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1
                      (   16.16   602.02   -52.63     1.80 S1)  ; 2
                      (   15.64   605.71   -51.82     1.80 S1)  ; 3
                      (   14.87   609.69   -51.30     1.80 S1)  ; 4
                      (   13.07   611.68   -51.15     1.80 S1)  ; 5
                      (   12.30   614.86   -51.15     1.80 S1)  ; 6
                      (   11.53   617.99   -49.47     1.80 S1)  ; 7
                      (   11.01   621.40   -48.88     1.80 S1)  ; 8
                      (   10.76   625.66   -47.88     1.80 S1)  ; 9
                      (   10.76   629.63   -47.15     1.80 S1)  ; 10
                      (   10.76   633.04   -46.42     1.80 S1)  ; 11
                      (   11.01   637.59   -44.40     1.80 S1)  ; 12
                      (   10.50   641.85   -44.25     1.80 S1)  ; 13
                      (    9.99   645.54   -43.88     1.80 S1)  ; 14
                      (    9.99   651.22   -43.60     1.80 S1)  ; 15
                      (    8.96   656.39   -43.30     1.80 S1)  ; 16
                      (    7.67   661.79   -43.02     1.80 S1)  ; 17
                      (    7.16   666.62   -42.92     1.80 S1)  ; 18
                      (    6.13   671.45   -42.85     1.80 S1)  ; 19
                      (    5.61   676.00   -44.32     1.80 S1)  ; 20
                      (    6.13   680.54   -44.02     1.80 S1)  ; 21
                      (    6.90   683.95   -43.88     1.80 S1)  ; 22
                      (    5.61   687.64   -43.75     1.80 S1)  ; 23
                      (    3.30   689.63   -43.65     1.80 S1)  ; 24
                      (    2.79   693.04   -43.22     1.80 S1)  ; 25
                      (    4.33   697.30   -42.77     1.80 S1)  ; 26
                      (    5.10   701.05   -42.22     1.80 S1)  ; 27
                      (    3.81   704.74   -41.65     1.80 S1)  ; 28
                      (    1.76   707.30   -40.57     1.80 S1)  ; 29
                      (   -0.04   710.71   -39.32     1.80 S1)  ; 30
                      (   -1.59   714.69   -39.45     1.29 S1)  ; 31
                      (   -3.64   718.38   -37.50     1.29 S1)  ; 32
                      (   -3.13   722.07   -36.33     1.29 S1)  ; 33
                      (   -2.36   725.77   -35.53     1.29 S1)  ; 34
                      (   -3.64   728.89   -35.25     1.29 S1)  ; 35
                      (   -4.41   733.44   -34.60     1.29 S1)  ; 36
                      (   -6.47   738.27   -32.95     1.29 S1)  ; 37
                      (   -6.99   742.30   -31.48     1.29 S1)  ; 38
                      (   -6.73   745.99   -31.27     1.29 S1)  ; 39
                      (   -6.47   749.12   -30.80     1.29 S1)  ; 40
                      (   -7.24   753.66   -30.40     1.29 S1)  ; 41
                      (   -7.24   758.21   -32.55     1.29 S1)  ; 42
                      (   -9.04   762.19   -34.47     1.29 S1)  ; 43
                      (  -10.07   766.16   -34.10     1.29 S1)  ; 44
                      (   -9.81   769.57   -33.72     1.29 S1)  ; 45
                      (   -9.81   774.40   -33.40     1.29 S1)  ; 46
                      (  -10.07   777.53   -32.92     1.29 S1)  ; 47
                      (   -9.81   781.50   -28.95     1.29 S1)  ; 48
                      (  -11.10   786.90   -28.63     1.29 S1)  ; 49
                      (  -11.61   789.80   -28.23     1.29 S1)  ; 50
                      (  -12.38   792.64   -26.48     1.29 S1)  ; 51
                      (  -11.10   795.20   -25.35     1.29 S1)  ; 52
                      (  -10.58   799.17   -25.35     1.29 S1)  ; 53
                      (  -11.87   803.15   -25.15     1.29 S1)  ; 54
                      (  -11.87   806.84   -25.03     1.29 S1)  ; 55
                      (  -11.36   811.67   -24.90     1.29 S1)  ; 56
                      (  -13.41   816.22   -24.65     1.29 S1)  ; 57
                      (  -14.70   822.18   -23.70     1.29 S1)  ; 58
                      (  -15.98   827.01   -23.67     1.29 S1)  ; 59
                      (  -15.73   830.99   -23.23     1.29 S1)  ; 60
                      (  -15.65   835.02   -22.80     1.29 S1)  ; 61
                      (  -16.94   839.85   -21.75     1.29 S1)  ; 62
                      (  -18.48   844.11   -22.10     1.29 S1)  ; 63
                      (  -19.76   847.24   -23.13     1.54 S1)  ; 64
                      (  -20.02   849.80   -20.20     1.54 S1)  ; 65
                      (
                        (  -21.82   850.93   -20.30     1.03 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1
                        (  -23.11   853.49   -20.00     1.03 S1)  ; 2
                        (  -24.91   855.76   -19.70     1.03 S1)  ; 3
                        (  -27.22   859.17   -19.50     1.03 S1)  ; 4
                        (  -29.54   863.15   -19.33     1.03 S1)  ; 5
                        (  -31.08   866.56   -22.73     1.03 S1)  ; 6
                        (  -33.65   869.68   -22.25     1.03 S1)  ; 7
                        (  -35.71   873.94   -21.92     1.03 S1)  ; 8
                        (  -36.51   877.06   -17.85     1.03 S1)  ; 9
                        (  -39.09   880.19   -19.15     1.03 S1)  ; 10
                        (  -40.11   882.74   -15.52     1.03 S1)  ; 11
                        (  -40.89   883.88   -13.92     1.03 S1)  ; 12
                        (  -42.43   884.73   -13.32     1.03 S1)  ; 13
                        (  -43.71   886.44   -12.38     1.03 S1)  ; 14
                        (  -43.46   889.28   -12.38     1.03 S1)  ; 15
                        (  -44.49   892.97   -12.07     1.03 S1)  ; 16
                        (  -44.49   896.66   -11.53     1.03 S1)  ; 17
                        (  -45.00   898.37   -10.73     1.03 S1)  ; 18
                        (  -47.06   899.50   -10.15     1.03 S1)  ; 19
                        (  -49.37   901.49    -9.50     1.03 S1)  ; 20
                        (  -49.63   903.76    -8.52     1.03 S1)  ; 21
                        (  -49.63   906.32    -6.70     1.03 S1)  ; 22
                        (  -50.14   908.59    -6.10     1.03 S1)  ; 23
                        (  -50.91   910.58    -4.52     1.03 S1)  ; 24
                        (  -52.20   912.57    -3.95     1.03 S1)  ; 25
                        (  -53.74   914.62    -5.20     1.03 S1)  ; 26
                        (  -54.77   916.61    -5.05     1.03 S1)  ; 27

                        (Cross
                          (Color Green)
                          (Name "Marker 3")
                          (  -21.91   848.60   -19.95     0.07 S1)  ; 1
                          (  -21.61   849.33   -19.95     0.07 S1)  ; 2
                          (  -24.04   850.22   -19.95     0.07 S1)  ; 3
                          (  -21.54   852.64   -20.33     0.07 S1)  ; 4
                          (  -21.76   854.70   -19.64     0.07 S1)  ; 5
                          (  -21.69   855.36   -19.64     0.07 S1)  ; 6
                          (  -25.21   854.48   -20.46     0.07 S1)  ; 7
                          (  -23.67   856.69   -19.30     0.07 S1)  ; 8
                          (  -22.57   855.51   -19.30     0.07 S1)  ; 9
                          (  -23.74   852.20   -19.30     0.07 S1)  ; 10
                          (  -24.11   854.19   -18.11     0.07 S1)  ; 11
                          (  -20.51   851.83   -18.90     0.07 S1)  ; 12
                          (  -20.88   856.17   -20.15     0.07 S1)  ; 13
                          (  -25.29   857.57   -20.15     0.07 S1)  ; 14
                          (  -25.07   856.98   -20.15     0.07 S1)  ; 15
                          (  -27.93   856.76   -21.49     0.07 S1)  ; 16
                          (  -27.93   858.45   -21.49     0.07 S1)  ; 17
                          (  -29.03   859.26   -21.49     0.07 S1)  ; 18
                          (  -30.87   861.39   -20.70     0.07 S1)  ; 19
                          (  -30.06   860.58   -19.91     0.07 S1)  ; 20
                          (  -29.03   860.66   -19.91     0.07 S1)  ; 21
                          (  -27.49   861.10   -19.91     0.07 S1)  ; 22
                          (  -27.05   857.79   -19.91     0.07 S1)  ; 23
                          (  -28.15   864.19   -19.91     0.07 S1)  ; 24
                          (  -28.15   862.94   -19.91     0.07 S1)  ; 25
                          (  -31.75   863.16   -19.91     0.07 S1)  ; 26
                          (  -28.52   863.67   -21.61     0.07 S1)  ; 27
                          (  -27.93   862.13   -22.21     0.07 S1)  ; 28
                          (  -30.58   863.23   -22.21     0.07 S1)  ; 29
                          (  -26.83   859.63   -22.05     0.07 S1)  ; 30
                          (  -32.63   864.99   -18.95     0.07 S1)  ; 31
                          (  -29.55   865.88   -19.92     0.07 S1)  ; 32
                          (  -30.06   867.49   -20.44     0.07 S1)  ; 33
                          (  -31.38   868.23   -20.44     0.07 S1)  ; 34
                          (  -34.32   867.13   -20.44     0.07 S1)  ; 35
                          (  -34.54   868.60   -20.44     0.07 S1)  ; 36
                          (  -34.61   869.85   -20.44     0.07 S1)  ; 37
                          (  -32.04   870.29   -20.44     0.07 S1)  ; 38
                          (  -32.63   869.48   -20.44     0.07 S1)  ; 39
                          (  -33.07   867.27   -21.05     0.07 S1)  ; 40
                          (  -32.41   872.20   -18.72     0.07 S1)  ; 41
                          (  -33.66   874.33   -18.72     0.07 S1)  ; 42
                          (  -32.93   870.95   -19.33     0.07 S1)  ; 43
                          (  -36.01   873.45   -19.10     0.07 S1)  ; 44
                          (  -36.01   871.24   -20.26     0.07 S1)  ; 45
                          (  -38.43   876.68   -20.26     0.07 S1)  ; 46
                          (  -34.54   876.17   -18.29     0.07 S1)  ; 47
                          (  -37.04   873.30   -17.77     0.07 S1)  ; 48
                          (  -36.89   880.21   -17.77     0.07 S1)  ; 49
                          (  -40.34   878.89   -18.25     0.07 S1)  ; 50
                          (  -38.87   878.01   -16.70     0.07 S1)  ; 51
                          (  -38.14   879.11   -15.79     0.07 S1)  ; 52
                          (  -37.99   879.92   -15.79     0.07 S1)  ; 53
                          (  -40.56   880.58   -15.15     0.07 S1)  ; 54
                          (  -39.32   882.20   -15.84     0.07 S1)  ; 55
                          (  -41.15   881.83   -15.84     0.07 S1)  ; 56
                          (  -41.81   882.05   -14.70     0.07 S1)  ; 57
                          (  -38.95   883.67   -14.70     0.07 S1)  ; 58
                          (  -42.77   885.65   -14.20     0.07 S1)  ; 59
                          (  -43.06   883.38   -15.01     0.07 S1)  ; 60
                          (  -45.04   885.29   -13.04     0.07 S1)  ; 61
                          (  -45.12   888.82   -14.10     0.07 S1)  ; 62
                          (  -43.80   885.80   -14.09     0.07 S1)  ; 63
                          (  -45.12   889.70   -12.67     0.07 S1)  ; 64
                          (  -46.88   893.30   -12.14     0.07 S1)  ; 65
                          (  -45.85   892.27   -12.14     0.07 S1)  ; 66
                          (  -45.85   891.32   -12.14     0.07 S1)  ; 67
                          (  -43.06   894.85   -12.52     0.07 S1)  ; 68
                          (  -42.91   893.45   -12.52     0.07 S1)  ; 69
                          (  -44.75   894.70   -12.52     0.07 S1)  ; 70
                          (  -45.90   899.40   -11.46     0.07 S1)  ; 71
                          (  -46.63   900.28   -11.46     0.07 S1)  ; 72
                          (  -47.81   898.08   -10.31     0.07 S1)  ; 73
                          (  -49.13   899.91    -9.71     0.07 S1)  ; 74
                          (  -50.82   900.28    -9.71     0.07 S1)  ; 75
                          (  -51.19   900.94    -9.71     0.07 S1)  ; 76
                          (  -48.25   901.90    -9.46     0.07 S1)  ; 77
                          (  -48.32   904.62    -9.46     0.07 S1)  ; 78
                          (  -51.33   904.84    -9.46     0.07 S1)  ; 79
                          (  -51.26   903.89    -9.46     0.07 S1)  ; 80
                          (  -49.20   906.75    -8.82     0.07 S1)  ; 81
                          (  -44.06   898.30   -12.61     0.07 S1)  ; 82
                          (  -45.16   898.81   -12.44     0.07 S1)  ; 83
                          (  -50.89   906.68    -8.06     0.07 S1)  ; 84
                          (  -52.07   908.52    -8.06     0.07 S1)  ; 85
                          (  -51.55   906.90    -7.40     0.07 S1)  ; 86
                          (  -52.80   909.33    -7.40     0.07 S1)  ; 87
                          (  -52.88   910.50    -7.40     0.07 S1)  ; 88
                          (  -50.97   911.09    -6.00     0.07 S1)  ; 89
                          (  -50.23   910.28    -6.00     0.07 S1)  ; 90
                          (  -52.80   911.90    -4.47     0.07 S1)  ; 91
                          (  -53.61   911.02    -5.19     0.07 S1)  ; 92
                          (  -54.20   911.68    -5.19     0.07 S1)  ; 93
                          (  -52.88   913.59    -4.79     0.07 S1)  ; 94
                          (  -55.89   912.05    -4.79     0.07 S1)  ; 95
                          (  -54.12   913.00    -3.32     0.07 S1)  ; 96
                          (  -56.25   915.28    -3.32     0.07 S1)  ; 97
                          (  -54.71   915.50    -3.32     0.07 S1)  ; 98
                        )  ;  End of markers
                        (
                          (  -53.74   918.31    -3.25     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1-1
                          (  -54.26   920.30    -1.67     0.51 S1)  ; 2
                          (  -56.06   920.87     0.10     0.51 S1)  ; 3
                          (  -55.29   922.57     3.65     0.51 S1)  ; 4
                          (  -53.74   925.13     4.15     0.51 S1)  ; 5
                          (  -54.26   927.40     5.15     0.51 S1)  ; 6
                          (  -55.80   929.10     5.55     0.51 S1)  ; 7
                          (  -58.11   929.67     6.10     0.51 S1)  ; 8
                          (  -59.14   930.53     6.38     0.51 S1)  ; 9
                          (  -58.37   933.08     6.75     0.51 S1)  ; 10
                          (  -58.37   936.21     7.07     0.51 S1)  ; 11
                          (  -59.91   939.05     7.60     0.51 S1)  ; 12
                          (  -60.69   942.74     7.13     0.51 S1)  ; 13
                          (  -60.94   945.87     5.80     0.51 S1)  ; 14
                          (  -61.71   947.29     4.97     0.51 S1)  ; 15
                          (  -62.23   950.41     2.88     0.51 S1)  ; 16
                          (  -60.94   952.97     1.00     0.51 S1)  ; 17
                           Normal
                        |
                          (  -55.80   922.29    -4.97     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1-2
                          (  -56.31   926.83    -5.70     0.77 S1)  ; 2
                          (  -58.37   928.54    -5.45     0.77 S1)  ; 3
                          (  -59.66   931.66    -5.40     0.77 S1)  ; 4
                          (  -58.37   934.50    -5.13     0.77 S1)  ; 5
                          (  -56.83   938.76    -4.97     0.77 S1)  ; 6
                          (  -57.34   942.46    -5.27     0.77 S1)  ; 7
                          (  -57.86   945.87    -5.77     0.77 S1)  ; 8
                          (  -57.09   948.71    -5.65     0.77 S1)  ; 9
                          (  -57.60   952.40    -5.20     0.77 S1)  ; 10
                          (  -56.83   954.67    -4.22     0.77 S1)  ; 11
                          (  -57.60   958.08    -2.70     0.77 S1)  ; 12
                          (  -58.63   963.19    -2.33     0.77 S1)  ; 13
                          (  -59.66   965.81    -1.97     0.77 S1)  ; 14
                          (  -57.60   968.08    -1.22     0.77 S1)  ; 15
                          (  -58.37   968.93    -1.02     0.77 S1)  ; 16
                          (  -60.17   970.07    -0.80     0.77 S1)  ; 17
                          (  -60.43   972.63    -0.55     0.77 S1)  ; 18
                          (  -60.94   975.75    -0.20     0.77 S1)  ; 19
                          (  -62.23   977.46     1.00     0.77 S1)  ; 20
                          (  -60.69   979.73     1.22     0.77 S1)  ; 21
                          (  -61.97   982.00     2.53     0.77 S1)  ; 22
                          (  -64.03   984.56     2.63     0.77 S1)  ; 23
                          (  -65.31   987.68     2.83     0.77 S1)  ; 24
                          (  -67.11   989.67     3.72     0.77 S1)  ; 25
                          (  -67.89   992.80     4.20     0.77 S1)  ; 26
                          (  -68.40   995.07     4.47     0.77 S1)  ; 27
                          (  -70.20   996.49     5.30     0.77 S1)  ; 28
                          (  -70.20   999.61     5.50     0.77 S1)  ; 29
                          (  -72.00  1002.45     6.05     0.77 S1)  ; 30
                          (  -75.08  1005.86     6.20     0.77 S1)  ; 31
                          (  -75.96  1008.48     7.05     0.77 S1)  ; 32
                          (  -78.27  1010.18     7.30     0.77 S1)  ; 33
                          (  -80.84  1011.89     7.65     0.77 S1)  ; 34
                          (  -80.33  1014.16     7.72     0.77 S1)  ; 35
                          (  -81.62  1017.00     7.95     0.77 S1)  ; 36
                          (  -81.36  1020.12     7.38     0.77 S1)  ; 37
                          (  -83.42  1022.11     6.55     0.77 S1)  ; 38
                          (  -86.24  1024.10     5.48     0.77 S1)  ; 39
                          (  -87.02  1026.09     4.20     0.77 S1)  ; 40
                          (  -85.99  1028.08     2.15     0.77 S1)  ; 41
                          (  -86.50  1031.20     0.65     0.77 S1)  ; 42
                          (  -87.79  1032.34     0.40     0.77 S1)  ; 43
                          (  -89.33  1034.04     0.17     0.77 S1)  ; 44
                          (  -89.33  1037.45     0.17     0.77 S1)  ; 45
                          (  -89.59  1040.29     1.15     0.77 S1)  ; 46
                          (  -91.39  1041.71     1.73     0.77 S1)  ; 47
                          (  -92.16  1043.42     1.65     0.77 S1)  ; 48
                          (  -91.64  1045.98     0.28     0.77 S1)  ; 49
                          (  -91.64  1048.53    -1.45     0.77 S1)  ; 50
                          (  -91.64  1051.66    -2.50     0.77 S1)  ; 51
                          (  -93.11  1054.27    -3.90     0.77 S1)  ; 52
                          (  -93.62  1056.83    -4.43     0.77 S1)  ; 53
                          (  -93.11  1059.95    -3.88     0.77 S1)  ; 54
                          (  -94.91  1061.09    -2.55     0.77 S1)  ; 55
                          (  -96.20  1062.51    -0.47     0.77 S1)  ; 56
                          (  -95.17  1064.50     0.00     0.77 S1)  ; 57
                          (  -96.97  1067.91     0.65     0.77 S1)  ; 58
                          (  -97.22  1070.18     0.95     0.77 S1)  ; 59
                          (  -98.00  1072.17     1.22     0.77 S1)  ; 60
                          (  -99.28  1073.02     1.97     0.77 S1)  ; 61
                          (  -98.51  1074.72     3.65     0.77 S1)  ; 62
                          (  -98.51  1076.14     4.45     0.77 S1)  ; 63
                          ( -100.31  1076.71     4.72     0.77 S1)  ; 64
                          ( -101.08  1079.55     5.95     0.77 S1)  ; 65
                          ( -103.40  1082.68     6.35     0.77 S1)  ; 66
                          ( -106.22  1085.80     5.35     0.77 S1)  ; 67
                          ( -107.25  1087.79     6.00     0.77 S1)  ; 68
                          (
                            ( -110.60  1088.99     4.10     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1-2-1
                            ( -111.37  1090.69     6.05     0.77 S1)  ; 2
                            (
                              ( -113.94  1092.96     6.38     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1-2-1-1
                              ( -117.28  1094.10     3.70     0.51 S1)  ; 2
                              ( -119.60  1095.80     2.25     0.51 S1)  ; 3
                              ( -121.65  1096.09     1.85     0.51 S1)  ; 4
                              ( -124.22  1097.79     1.22     0.51 S1)  ; 5
                              ( -127.31  1099.78     0.60     0.51 S1)  ; 6
                              ( -130.91  1100.63     0.22     0.51 S1)  ; 7
                              ( -134.25  1101.48     2.83     0.51 S1)  ; 8
                              ( -136.57  1101.77     3.50     0.51 S1)  ; 9
                              ( -138.88  1102.62     5.15     0.51 S1)  ; 10
                              ( -141.97  1103.47     6.42     0.51 S1)  ; 11
                              ( -147.37  1105.18     6.88     0.51 S1)  ; 12
                              ( -148.91  1106.03     8.07     0.51 S1)  ; 13
                               Normal
                            |
                              ( -110.85  1093.25     5.75     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1-2-1-2
                              ( -112.40  1095.52     8.00     0.51 S1)  ; 2
                              ( -113.94  1098.64     8.35     0.51 S1)  ; 3
                              ( -115.22  1100.35     8.97     0.51 S1)  ; 4
                              ( -116.51  1102.91     6.32     0.26 S1)  ; 5
                              ( -117.80  1105.75     5.37     0.26 S1)  ; 6
                              ( -116.77  1107.45     3.42     0.26 S1)  ; 7
                              ( -114.45  1108.59     3.32     0.26 S1)  ; 8
                               Normal
                            )  ;  End of split
                          |
                            ( -108.02  1090.41     0.12     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-1-2-2
                            ( -109.31  1092.96    -1.82     0.26 S1)  ; 2
                            ( -111.11  1094.95    -3.75     0.26 S1)  ; 3
                            ( -113.42  1095.23    -5.35     0.26 S1)  ; 4
                            ( -116.25  1096.37    -6.88     0.26 S1)  ; 5
                            ( -116.25  1097.79    -8.38     0.26 S1)  ; 6
                            ( -118.31  1098.93    -8.63     0.26 S1)  ; 7
                            ( -119.85  1099.50    -9.35     0.26 S1)  ; 8
                            ( -122.17  1100.06   -10.02     0.26 S1)  ; 9
                            ( -125.00  1102.34   -11.73     0.26 S1)  ; 10
                            ( -127.31  1104.04   -13.57     0.26 S1)  ; 11
                            ( -130.40  1105.75   -14.07     0.26 S1)  ; 12
                            ( -132.71  1107.73   -14.82     0.26 S1)  ; 13
                            ( -133.22  1108.59   -15.68     0.26 S1)  ; 14
                            ( -134.51  1108.59   -15.82     0.26 S1)  ; 15
                            ( -136.31  1110.01   -16.25     0.26 S1)  ; 16
                            ( -137.85  1112.28   -17.55     0.26 S1)  ; 17
                            ( -140.68  1114.27   -17.72     0.26 S1)  ; 18
                            ( -141.45  1116.26   -19.27     0.26 S1)  ; 19
                            ( -143.51  1119.10   -20.97     0.26 S1)  ; 20
                            ( -145.57  1121.94   -21.20     0.26 S1)  ; 21
                            ( -147.11  1124.49   -23.07     0.26 S1)  ; 22
                            ( -148.39  1126.20   -24.58     0.26 S1)  ; 23
                            ( -150.19  1129.04   -25.95     0.26 S1)  ; 24
                            ( -151.99  1130.46   -28.13     0.26 S1)  ; 25
                            ( -153.79  1133.02   -28.82     0.26 S1)  ; 26
                            ( -156.62  1135.57   -30.67     0.26 S1)  ; 27
                             Normal
                          )  ;  End of split
                        )  ;  End of split
                      |
                        (  -18.18   852.63   -20.65     1.03 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-2
                        (  -17.41   856.32   -19.75     1.03 S1)  ; 2
                        (  -18.18   860.02   -19.13     1.03 S1)  ; 3
                        (  -17.92   863.14   -18.15     1.03 S1)  ; 4
                        (  -18.18   866.27   -17.50     1.03 S1)  ; 5
                        (  -18.18   869.11   -16.38     1.03 S1)  ; 6
                        (  -16.89   871.95   -15.30     1.03 S1)  ; 7
                        (  -16.38   875.07   -13.82     1.03 S1)  ; 8
                        (  -16.64   877.91    -9.60     1.03 S1)  ; 9
                        (  -17.92   879.90    -8.23     0.77 S1)  ; 10
                        (  -18.69   881.89    -7.87     0.77 S1)  ; 11
                        (  -17.67   884.16   -10.25     0.77 S1)  ; 12
                        (  -17.41   886.44   -11.65     0.77 S1)  ; 13
                        (  -17.67   888.42    -7.05     0.77 S1)  ; 14
                        (  -18.44   889.84    -5.80     0.77 S1)  ; 15
                        (  -18.18   892.12    -4.03     0.77 S1)  ; 16
                        (  -17.92   894.39    -2.90     0.77 S1)  ; 17
                        (  -18.69   895.81    -1.15     0.77 S1)  ; 18
                        (  -19.47   898.65    -1.82     0.77 S1)  ; 19
                        (  -20.24   904.39    -1.00     0.77 S1)  ; 20
                        (  -20.24   907.80    -0.77     0.77 S1)  ; 21
                        (  -20.75   910.07    -0.70     0.77 S1)  ; 22
                        (  -20.24   913.20    -0.67     0.77 S1)  ; 23
                        (
                          (  -22.29   914.05     0.97     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-2-1
                          (  -23.32   915.75     1.73     0.51 S1)  ; 2
                          (  -23.58   918.31     3.42     0.51 S1)  ; 3
                          (  -25.89   919.73     3.97     0.51 S1)  ; 4
                          (  -27.18   920.58     4.30     0.51 S1)  ; 5
                          (  -26.15   922.00     4.90     0.26 S1)  ; 6
                          (  -24.09   922.86     5.77     0.26 S1)  ; 7
                          (  -23.84   924.56     7.13     0.26 S1)  ; 8
                          (  -23.84   925.70     8.25     0.26 S1)  ; 9
                          (
                            (  -21.27   926.55     9.72     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-2-1-1
                            (  -20.24   927.40    10.10     0.26 S1)  ; 2
                            (  -19.98   929.10    10.30     0.26 S1)  ; 3
                             Normal
                          |
                            (  -25.38   926.83     8.68     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-2-1-2
                            (  -25.89   928.82    10.65     0.26 S1)  ; 2
                            (  -26.67   930.53    11.75     0.26 S1)  ; 3
                            (  -27.69   932.23    12.80     0.26 S1)  ; 4
                            (  -30.01   931.66    13.07     0.26 S1)  ; 5
                             Low
                          )  ;  End of split
                        |
                          (  -18.18   914.62     1.50     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-1-2-2
                          (  -17.92   917.46     2.00     0.77 S1)  ; 2
                          (  -17.92   919.73    -0.80     0.77 S1)  ; 3
                          (  -18.44   921.15    -2.15     0.77 S1)  ; 4
                          (  -18.95   922.57    -5.03     0.77 S1)  ; 5
                          (  -17.41   923.71    -6.47     0.77 S1)  ; 6
                          (  -15.87   923.99    -7.00     0.77 S1)  ; 7
                          (  -15.35   925.98    -7.10     0.77 S1)  ; 8
                          (  -15.87   927.40    -7.20     0.77 S1)  ; 9
                          (  -13.81   929.10    -7.40     0.77 S1)  ; 10
                          (  -13.29   931.95    -7.80     0.77 S1)  ; 11
                          (  -12.01   935.07    -8.27     0.77 S1)  ; 12
                          (  -10.21   936.49    -8.40     0.77 S1)  ; 13
                          (  -10.21   939.62    -8.95     0.77 S1)  ; 14
                          (  -10.72   942.46    -9.10     0.77 S1)  ; 15
                          (   -8.41   944.16    -9.35     0.77 S1)  ; 16
                          (   -7.12   946.49    -9.67     0.77 S1)  ; 17
                          (   -6.35   949.33    -9.72     0.77 S1)  ; 18
                          (   -6.10   951.32    -8.52     0.77 S1)  ; 19
                          (   -6.87   953.31    -5.85     0.77 S1)  ; 20
                          (   -6.87   954.73    -2.73     0.77 S1)  ; 21
                          (   -7.12   957.29     0.15     0.77 S1)  ; 22
                          (   -5.84   960.41     0.43     0.77 S1)  ; 23
                          (   -4.55   963.54    -2.27     0.77 S1)  ; 24
                          (   -4.04   966.38    -1.70     0.77 S1)  ; 25
                          (   -4.04   968.36    -1.85     0.77 S1)  ; 26
                          (   -3.52   970.92     0.30     0.77 S1)  ; 27
                          (   -1.98   972.91     0.65     0.77 S1)  ; 28
                          (   -1.72   973.76     0.82     0.77 S1)  ; 29
                          (   -2.24   975.75     0.85     0.77 S1)  ; 30
                          (   -2.24   977.17     1.05     0.77 S1)  ; 31
                          (   -1.21   979.44     1.90     0.77 S1)  ; 32
                          (   -0.18   981.72     2.60     0.77 S1)  ; 33
                          (    0.08   983.76     1.13     0.51 S1)  ; 34
                          (   -0.18   986.32     4.25     0.51 S1)  ; 35
                          (    1.10   989.16     6.25     0.51 S1)  ; 36
                          (    2.13   992.00     6.42     0.51 S1)  ; 37
                          (    3.68   994.56     7.77     0.51 S1)  ; 38
                          (    5.22   996.55     9.45     0.51 S1)  ; 39
                          (    5.22   999.10     9.80     0.51 S1)  ; 40
                          (    5.73  1000.81    10.60     0.51 S1)  ; 41
                          (    3.93  1001.09    11.90     0.51 S1)  ; 42
                          (    2.65   999.10    12.35     0.26 S1)  ; 43
                          (    2.39   996.26    12.55     0.26 S1)  ; 44
                          (    1.88   994.84    12.62     0.26 S1)  ; 45
                           Low
                        )  ;  End of split
                      )  ;  End of split
                    |
                      (   19.03   598.09   -57.42     1.80 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2
                      (   18.51   603.21   -57.92     1.80 S1)  ; 2
                      (   17.48   608.32   -58.05     1.80 S1)  ; 3
                      (   17.23   612.58   -58.42     1.80 S1)  ; 4
                      (   16.71   617.13   -58.47     1.80 S1)  ; 5
                      (   16.20   621.67   -58.55     1.80 S1)  ; 6
                      (   15.94   626.50   -59.05     1.80 S1)  ; 7
                      (   14.66   631.05   -59.15     1.80 S1)  ; 8
                      (   14.91   636.45   -59.50     1.80 S1)  ; 9
                      (   14.66   640.14   -59.50     1.80 S1)  ; 10
                      (   14.66   643.55   -59.58     1.80 S1)  ; 11
                      (   15.43   647.81   -59.75     1.80 S1)  ; 12
                      (   14.40   651.79   -59.97     1.80 S1)  ; 13
                      (   14.91   655.48   -60.55     1.80 S1)  ; 14
                      (
                        (   16.46   658.32   -55.35     1.54 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1
                        (   16.71   660.88   -53.38     1.54 S1)  ; 2
                        (   15.68   663.43   -52.63     1.54 S1)  ; 3
                        (   15.43   666.27   -52.33     1.54 S1)  ; 4
                        (   16.20   668.55   -52.05     1.54 S1)  ; 5
                        (   17.23   671.10   -52.05     1.54 S1)  ; 6
                        (   16.20   675.08   -51.85     1.54 S1)  ; 7
                        (   16.46   678.83   -51.72     1.54 S1)  ; 8
                        (   15.68   683.66   -51.45     1.54 S1)  ; 9
                        (   15.94   687.92   -51.22     1.54 S1)  ; 10
                        (   16.20   692.18   -51.12     1.29 S1)  ; 11
                        (   16.20   695.88   -51.03     1.29 S1)  ; 12
                        (   16.71   698.72   -50.97     1.29 S1)  ; 13
                        (   16.46   701.84   -50.52     1.29 S1)  ; 14
                        (   16.46   704.97   -50.30     1.29 S1)  ; 15
                        (   17.23   708.09   -49.43     1.29 S1)  ; 16
                        (   17.74   711.50   -49.10     1.29 S1)  ; 17
                        (   18.26   715.19   -48.85     1.29 S1)  ; 18
                        (   19.54   718.60   -48.62     1.29 S1)  ; 19
                        (   19.80   721.50   -48.50     1.29 S1)  ; 20
                        (   19.03   724.91   -47.95     1.29 S1)  ; 21
                        (   18.51   729.17   -47.85     1.29 S1)  ; 22
                        (   20.31   732.86   -47.70     1.29 S1)  ; 23
                        (   21.08   735.99   -47.53     1.29 S1)  ; 24
                        (   21.34   739.68   -47.33     1.29 S1)  ; 25
                        (   21.60   742.24   -46.80     1.29 S1)  ; 26
                        (   22.63   745.93   -46.05     1.29 S1)  ; 27
                        (   23.14   750.19   -45.92     1.29 S1)  ; 28
                        (   23.14   755.02   -45.88     1.29 S1)  ; 29
                        (   23.91   758.43   -45.63     1.29 S1)  ; 30
                        (   26.48   761.84   -45.35     1.29 S1)  ; 31
                        (   28.54   764.11   -45.13     1.29 S1)  ; 32
                        (   28.28   767.01   -44.80     1.29 S1)  ; 33
                        (   27.51   770.70   -43.27     1.29 S1)  ; 34
                        (   27.51   775.53   -43.07     1.29 S1)  ; 35
                        (   28.54   779.79   -42.80     1.29 S1)  ; 36
                        (   28.80   783.20   -42.55     1.29 S1)  ; 37
                        (   28.54   786.89   -42.45     1.29 S1)  ; 38
                        (   28.03   792.01   -42.35     1.29 S1)  ; 39
                        (   27.77   796.55   -41.90     1.29 S1)  ; 40
                        (   27.77   800.81   -41.35     1.29 S1)  ; 41
                        (   28.54   804.22   -40.95     1.29 S1)  ; 42
                        (   27.77   807.92   -40.88     1.29 S1)  ; 43
                        (   27.77   813.09   -40.48     1.29 S1)  ; 44
                        (   27.00   817.63   -40.05     1.29 S1)  ; 45
                        (   25.97   821.32   -39.78     1.29 S1)  ; 46
                        (   26.74   823.88   -38.47     1.29 S1)  ; 47
                        (   27.26   827.01   -37.70     1.29 S1)  ; 48
                        (   27.00   831.84   -36.60     1.29 S1)  ; 49
                        (   26.23   837.23   -36.33     1.29 S1)  ; 50
                        (   26.48   842.06   -36.22     1.29 S1)  ; 51
                        (   26.48   846.32   -35.97     1.29 S1)  ; 52
                        (   25.46   850.30   -35.80     1.29 S1)  ; 53
                        (   26.48   853.71   -35.65     1.29 S1)  ; 54
                        (   27.51   857.18   -35.75     1.29 S1)  ; 55
                        (   27.77   860.30   -35.22     1.29 S1)  ; 56

                        (Cross
                          (Color Green)
                          (Name "Marker 3")
                          (   17.16   656.13   -55.38     0.07 S1)  ; 1
                          (   18.78   660.03   -54.74     0.07 S1)  ; 2
                          (   18.26   661.50   -54.74     0.07 S1)  ; 3
                          (   16.13   658.27   -53.49     0.07 S1)  ; 4
                          (   15.76   659.44   -53.07     0.07 S1)  ; 5
                          (   15.25   656.94   -54.14     0.07 S1)  ; 6
                          (   16.94   657.53   -54.14     0.07 S1)  ; 7
                          (   17.60   658.49   -54.14     0.07 S1)  ; 8
                          (   17.89   662.16   -53.90     0.07 S1)  ; 9
                          (   14.88   660.91   -54.76     0.07 S1)  ; 10
                          (   16.28   663.49   -55.54     0.07 S1)  ; 11
                          (   13.71   662.90   -56.09     0.07 S1)  ; 12
                          (   17.53   662.16   -56.79     0.07 S1)  ; 13
                          (   17.60   660.54   -56.79     0.07 S1)  ; 14
                          (   17.45   654.15   -56.79     0.07 S1)  ; 15
                          (   15.91   658.12   -58.26     0.07 S1)  ; 16
                          (   17.89   659.00   -57.64     0.07 S1)  ; 17
                          (   15.62   661.72   -56.34     0.07 S1)  ; 18
                          (   14.81   663.04   -55.51     0.07 S1)  ; 19
                          (   15.03   664.81   -56.28     0.07 S1)  ; 20
                          (   16.28   664.81   -55.10     0.07 S1)  ; 21
                          (   13.86   664.29   -54.38     0.07 S1)  ; 22
                          (   18.34   666.06   -54.38     0.07 S1)  ; 23
                          (   12.39   667.09   -54.38     0.07 S1)  ; 24
                          (   17.53   668.12   -53.59     0.07 S1)  ; 25
                          (   17.97   669.07   -53.59     0.07 S1)  ; 26
                          (   17.97   670.10   -53.59     0.07 S1)  ; 27
                          (   14.74   669.15   -54.89     0.07 S1)  ; 28
                          (   14.37   669.51   -54.89     0.07 S1)  ; 29
                          (   14.81   672.01   -54.51     0.07 S1)  ; 30
                          (   14.81   673.04   -54.51     0.07 S1)  ; 31
                          (   18.04   671.87   -55.15     0.07 S1)  ; 32
                          (   17.82   672.60   -55.15     0.07 S1)  ; 33
                          (   18.92   672.68   -55.15     0.07 S1)  ; 34
                          (   18.70   670.84   -55.15     0.07 S1)  ; 35
                          (   15.32   667.09   -56.79     0.07 S1)  ; 36
                          (   17.53   669.37   -55.76     0.07 S1)  ; 37
                          (   16.57   672.09   -55.76     0.07 S1)  ; 38
                          (   14.96   676.21   -54.87     0.07 S1)  ; 39
                          (   18.26   678.26   -53.19     0.07 S1)  ; 40
                          (   17.45   675.54   -52.60     0.07 S1)  ; 41
                          (   16.94   674.51   -52.60     0.07 S1)  ; 42
                          (   17.45   673.85   -52.60     0.07 S1)  ; 43
                          (   17.31   667.38   -51.82     0.07 S1)  ; 44
                          (   16.57   672.82   -51.82     0.07 S1)  ; 45
                          (   15.25   678.85   -51.82     0.07 S1)  ; 46
                          (   14.59   680.25   -51.82     0.07 S1)  ; 47
                          (   15.69   677.53   -51.77     0.07 S1)  ; 48
                          (   17.23   682.46   -52.26     0.07 S1)  ; 49
                          (   15.69   683.26   -53.14     0.07 S1)  ; 50
                          (   15.03   685.69   -53.14     0.07 S1)  ; 51
                          (   14.66   683.78   -53.14     0.07 S1)  ; 52
                          (   13.64   685.03   -53.47     0.07 S1)  ; 53
                          (   13.27   686.57   -53.47     0.07 S1)  ; 54
                          (   12.46   684.88   -53.47     0.07 S1)  ; 55
                          (   14.08   683.34   -54.41     0.07 S1)  ; 56
                          (   13.56   681.72   -55.77     0.07 S1)  ; 57
                          (   16.28   684.22   -55.65     0.07 S1)  ; 58
                          (   17.23   686.06   -54.59     0.07 S1)  ; 59
                          (   14.37   686.94   -51.11     0.07 S1)  ; 60
                          (   15.47   687.97   -55.77     0.07 S1)  ; 61
                          (   14.66   690.10   -55.77     0.07 S1)  ; 62
                          (   18.41   690.84   -53.42     0.07 S1)  ; 63
                          (   14.66   690.98   -53.42     0.07 S1)  ; 64
                          (   17.53   690.62   -52.60     0.07 S1)  ; 65
                          (   17.60   692.16   -53.60     0.07 S1)  ; 66
                          (   17.53   693.48   -53.06     0.07 S1)  ; 67
                          (   17.53   695.47   -52.96     0.07 S1)  ; 68
                          (   15.32   692.45   -52.11     0.07 S1)  ; 69
                          (   14.66   693.78   -52.11     0.07 S1)  ; 70
                          (   16.50   695.62   -52.11     0.07 S1)  ; 71
                          (   14.81   698.04   -51.67     0.07 S1)  ; 72
                          (   14.15   695.76   -52.11     0.07 S1)  ; 73
                          (   17.89   701.06   -51.67     0.07 S1)  ; 74
                          (   17.45   700.03   -51.67     0.07 S1)  ; 75
                          (   19.00   699.37   -51.67     0.07 S1)  ; 76
                          (   17.31   698.48   -51.67     0.07 S1)  ; 77
                          (   17.09   697.82   -51.67     0.07 S1)  ; 78
                          (   14.66   700.62   -52.76     0.07 S1)  ; 79
                          (   17.23   701.79   -53.51     0.07 S1)  ; 80
                          (   14.74   702.23   -53.51     0.07 S1)  ; 81
                          (   17.82   697.45   -54.89     0.07 S1)  ; 82
                          (   14.96   696.72   -54.89     0.07 S1)  ; 83
                          (   15.91   697.75   -54.89     0.07 S1)  ; 84
                          (   17.09   691.35   -53.15     0.07 S1)  ; 85
                          (   14.88   699.51   -52.25     0.07 S1)  ; 86
                          (   15.32   688.78   -52.31     0.07 S1)  ; 87
                          (   15.47   689.81   -52.31     0.07 S1)  ; 88
                          (   15.18   691.20   -51.19     0.07 S1)  ; 89
                          (   16.87   704.96   -50.47     0.07 S1)  ; 90
                          (   17.97   707.32   -50.07     0.07 S1)  ; 91
                          (   18.41   709.01   -50.07     0.07 S1)  ; 92
                          (   18.70   710.85   -50.07     0.07 S1)  ; 93
                          (   16.65   709.01   -50.07     0.07 S1)  ; 94
                          (   16.06   711.80   -50.07     0.07 S1)  ; 95
                          (   19.51   710.99   -49.14     0.07 S1)  ; 96
                          (   15.32   705.26   -47.80     0.07 S1)  ; 97
                          (   16.43   707.61   -47.80     0.07 S1)  ; 98
                          (   17.97   709.52   -47.80     0.07 S1)  ; 99
                          (   16.94   711.73   -47.80     0.07 S1)  ; 100
                          (   17.31   715.33   -46.95     0.07 S1)  ; 101
                          (   18.78   711.44   -47.67     0.07 S1)  ; 102
                          (   17.38   712.98   -48.31     0.07 S1)  ; 103
                          (   19.07   716.14   -48.31     0.07 S1)  ; 104
                          (   21.42   717.83   -48.71     0.07 S1)  ; 105
                          (   18.63   718.13   -50.31     0.07 S1)  ; 106
                          (   20.32   721.73   -49.76     0.07 S1)  ; 107
                          (   19.00   722.76   -50.56     0.07 S1)  ; 108
                          (   18.34   725.55   -50.56     0.07 S1)  ; 109
                          (   17.82   726.36   -49.83     0.07 S1)  ; 110
                          (   23.70   732.32   -50.57     0.07 S1)  ; 111
                          (   21.86   730.33   -50.57     0.07 S1)  ; 112
                          (   20.32   727.98   -50.57     0.07 S1)  ; 113
                          (   19.22   735.55   -51.16     0.07 S1)  ; 114
                          (   19.07   733.57   -51.16     0.07 S1)  ; 115
                          (   18.70   732.46   -50.00     0.07 S1)  ; 116
                          (   19.88   733.35   -50.00     0.07 S1)  ; 117
                          (   20.02   734.89   -49.20     0.07 S1)  ; 118
                          (   20.61   736.51   -49.20     0.07 S1)  ; 119
                          (   22.52   738.05   -49.20     0.07 S1)  ; 120
                          (   21.35   732.10   -49.20     0.07 S1)  ; 121
                          (   18.78   730.55   -49.20     0.07 S1)  ; 122
                          (   21.27   728.49   -47.65     0.07 S1)  ; 123
                          (   17.01   725.99   -48.24     0.07 S1)  ; 124
                          (   18.34   722.10   -48.24     0.07 S1)  ; 125
                          (   17.09   727.32   -49.00     0.07 S1)  ; 126
                          (   22.82   741.07   -49.22     0.07 S1)  ; 127
                          (   19.58   742.10   -49.22     0.07 S1)  ; 128
                          (   19.14   740.11   -48.33     0.07 S1)  ; 129
                          (   20.32   737.76   -48.33     0.07 S1)  ; 130
                          (   19.07   737.32   -47.91     0.07 S1)  ; 131
                          (   18.85   738.35   -47.91     0.07 S1)  ; 132
                          (   22.23   740.04   -47.91     0.07 S1)  ; 133
                          (   20.91   742.98   -47.91     0.07 S1)  ; 134
                          (   23.70   742.24   -48.14     0.07 S1)  ; 135
                          (   23.77   743.20   -48.14     0.07 S1)  ; 136
                          (   23.33   744.74   -47.74     0.07 S1)  ; 137
                          (   23.70   746.07   -47.74     0.07 S1)  ; 138
                          (   20.32   740.92   -46.46     0.07 S1)  ; 139
                          (   21.27   746.51   -47.19     0.07 S1)  ; 140
                          (   23.18   745.33   -49.39     0.07 S1)  ; 141
                          (   22.08   733.93   -50.30     0.07 S1)  ; 142
                          (   17.45   731.58   -51.42     0.07 S1)  ; 143
                          (   21.21   748.72   -46.54     0.07 S1)  ; 144
                          (   24.37   749.01   -45.84     0.07 S1)  ; 145
                          (   24.44   750.04   -45.84     0.07 S1)  ; 146
                          (   24.51   751.22   -45.84     0.07 S1)  ; 147
                          (   24.95   754.09   -45.24     0.07 S1)  ; 148
                          (   21.21   753.35   -45.24     0.07 S1)  ; 149
                          (   22.31   751.29   -45.24     0.07 S1)  ; 150
                          (   22.02   748.13   -43.79     0.07 S1)  ; 151
                          (   23.70   748.21   -43.79     0.07 S1)  ; 152
                          (   21.50   756.07   -44.94     0.07 S1)  ; 153
                          (   21.65   754.90   -46.29     0.07 S1)  ; 154
                          (   25.03   758.06   -45.50     0.07 S1)  ; 155
                          (   23.48   760.63   -46.29     0.07 S1)  ; 156
                          (   27.89   759.75   -46.67     0.07 S1)  ; 157
                          (   29.87   762.03   -47.37     0.07 S1)  ; 158
                          (   29.73   768.35   -43.22     0.07 S1)  ; 159
                          (   29.21   763.57   -43.01     0.07 S1)  ; 160
                          (   25.25   765.93   -43.01     0.07 S1)  ; 161
                          (   27.52   766.73   -43.01     0.07 S1)  ; 162
                          (   28.11   765.63   -43.01     0.07 S1)  ; 163
                          (   25.83   771.00   -43.01     0.07 S1)  ; 164
                          (   26.35   769.31   -43.84     0.07 S1)  ; 165
                          (   28.92   771.15   -43.84     0.07 S1)  ; 166
                          (   29.43   759.75   -45.36     0.07 S1)  ; 167
                          (   27.82   762.98   -42.75     0.07 S1)  ; 168
                          (   28.70   770.04   -44.95     0.07 S1)  ; 169
                          (   28.85   774.90   -43.22     0.07 S1)  ; 170
                          (   30.46   777.84   -43.22     0.07 S1)  ; 171
                          (   28.92   772.91   -44.60     0.07 S1)  ; 172
                          (   30.83   771.95   -42.26     0.07 S1)  ; 173
                          (   29.58   776.66   -42.26     0.07 S1)  ; 174
                          (   26.94   776.44   -41.03     0.07 S1)  ; 175
                          (   27.30   779.16   -41.03     0.07 S1)  ; 176
                          (   28.48   778.13   -41.03     0.07 S1)  ; 177
                          (   28.70   771.95   -41.11     0.07 S1)  ; 178
                          (   27.74   771.29   -41.11     0.07 S1)  ; 179
                          (   25.69   773.13   -41.59     0.07 S1)  ; 180
                          (   26.35   774.60   -41.65     0.07 S1)  ; 181
                          (   30.31   781.45   -45.48     0.07 S1)  ; 182
                          (   29.29   787.99   -43.34     0.07 S1)  ; 183
                          (   29.65   786.96   -44.36     0.07 S1)  ; 184
                          (   29.80   785.64   -44.51     0.07 S1)  ; 185
                          (   29.73   789.54   -44.51     0.07 S1)  ; 186
                          (   29.21   791.38   -44.51     0.07 S1)  ; 187
                          (   27.23   789.69   -44.00     0.07 S1)  ; 188
                          (   26.94   791.74   -44.00     0.07 S1)  ; 189
                          (   29.87   788.58   -42.50     0.07 S1)  ; 190
                          (   29.36   793.58   -42.50     0.07 S1)  ; 191
                          (   26.35   793.80   -41.50     0.07 S1)  ; 192
                          (   25.54   794.98   -41.50     0.07 S1)  ; 193
                          (   26.20   797.04   -41.50     0.07 S1)  ; 194
                          (   26.28   799.17   -41.50     0.07 S1)  ; 195
                          (   25.61   799.46   -41.50     0.07 S1)  ; 196
                          (   29.36   800.13   -41.50     0.07 S1)  ; 197
                          (   29.51   801.01   -41.50     0.07 S1)  ; 198
                          (   29.65   795.13   -40.56     0.07 S1)  ; 199
                          (   28.55   796.96   -40.56     0.07 S1)  ; 200
                          (   29.21   797.99   -40.56     0.07 S1)  ; 201
                          (   27.96   786.96   -41.17     0.07 S1)  ; 202
                          (   27.82   787.92   -41.17     0.07 S1)  ; 203
                          (   29.73   803.58   -40.03     0.07 S1)  ; 204
                          (   26.13   805.27   -40.03     0.07 S1)  ; 205
                          (   28.48   807.99   -39.61     0.07 S1)  ; 206
                          (   26.42   801.23   -40.85     0.07 S1)  ; 207
                          (   27.30   801.01   -42.82     0.07 S1)  ; 208
                          (   29.87   802.26   -41.80     0.07 S1)  ; 209
                          (   25.47   805.79   -41.03     0.07 S1)  ; 210
                          (   28.77   806.38   -41.19     0.07 S1)  ; 211
                          (   26.20   806.74   -38.35     0.07 S1)  ; 212
                          (   26.28   808.88   -38.35     0.07 S1)  ; 213
                          (   29.51   804.90   -38.35     0.07 S1)  ; 214
                          (   26.05   807.48   -39.60     0.07 S1)  ; 215
                          (   28.04   795.64   -41.35     0.07 S1)  ; 216
                          (   27.67   795.13   -41.35     0.07 S1)  ; 217
                          (   26.20   810.13   -36.13     0.07 S1)  ; 218
                          (   25.10   809.61   -39.80     0.07 S1)  ; 219
                          (   25.39   811.96   -39.80     0.07 S1)  ; 220
                          (   28.92   809.90   -39.80     0.07 S1)  ; 221
                          (   25.54   814.90   -40.21     0.07 S1)  ; 222
                          (   26.28   813.65   -41.55     0.07 S1)  ; 223
                          (   27.38   816.45   -38.92     0.07 S1)  ; 224
                          (   25.91   816.38   -38.92     0.07 S1)  ; 225
                          (   25.76   817.26   -38.92     0.07 S1)  ; 226
                          (   25.83   815.49   -38.92     0.07 S1)  ; 227
                          (   26.13   810.86   -38.76     0.07 S1)  ; 228
                          (   25.83   819.02   -38.97     0.07 S1)  ; 229
                          (   25.47   819.76   -38.97     0.07 S1)  ; 230
                          (   28.04   818.95   -38.97     0.07 S1)  ; 231
                          (   27.23   819.09   -38.97     0.07 S1)  ; 232
                          (   24.44   821.74   -38.13     0.07 S1)  ; 233
                          (   24.81   823.95   -37.21     0.07 S1)  ; 234
                          (   24.44   823.21   -37.92     0.07 S1)  ; 235
                          (   28.33   824.68   -40.06     0.07 S1)  ; 236
                          (   26.13   825.42   -38.54     0.07 S1)  ; 237
                          (   26.72   826.01   -38.54     0.07 S1)  ; 238
                          (   25.17   826.30   -37.25     0.07 S1)  ; 239
                          (   28.41   828.14   -36.84     0.07 S1)  ; 240
                          (   28.41   825.34   -36.84     0.07 S1)  ; 241
                          (   24.66   827.11   -36.84     0.07 S1)  ; 242
                          (   24.88   827.84   -36.06     0.07 S1)  ; 243
                          (   24.95   829.39   -36.06     0.07 S1)  ; 244
                          (   28.63   825.05   -35.47     0.07 S1)  ; 245
                          (   24.81   833.29   -36.26     0.07 S1)  ; 246
                          (   27.45   833.06   -37.32     0.07 S1)  ; 247
                          (   28.63   837.26   -37.85     0.07 S1)  ; 248
                          (   25.32   838.06   -37.38     0.07 S1)  ; 249
                          (   25.39   838.58   -37.38     0.07 S1)  ; 250
                          (   27.89   840.27   -36.69     0.07 S1)  ; 251
                          (   24.66   841.59   -36.69     0.07 S1)  ; 252
                          (   28.18   845.56   -36.69     0.07 S1)  ; 253
                          (   25.10   846.23   -35.76     0.07 S1)  ; 254
                          (   26.94   839.53   -35.90     0.07 S1)  ; 255
                          (   26.94   841.01   -35.90     0.07 S1)  ; 256
                          (   27.30   836.81   -35.90     0.07 S1)  ; 257
                          (   26.05   836.52   -35.90     0.07 S1)  ; 258
                          (   26.05   835.56   -35.90     0.07 S1)  ; 259
                          (   26.42   833.95   -35.90     0.07 S1)  ; 260
                          (   25.32   836.96   -34.39     0.07 S1)  ; 261
                          (   27.60   841.37   -34.39     0.07 S1)  ; 262
                          (   28.55   842.03   -34.39     0.07 S1)  ; 263
                          (   27.23   842.18   -33.69     0.07 S1)  ; 264
                          (   27.08   844.61   -34.60     0.07 S1)  ; 265
                          (   24.95   840.56   -36.56     0.07 S1)  ; 266
                          (   23.70   848.80   -36.38     0.07 S1)  ; 267
                          (   23.12   850.34   -36.61     0.07 S1)  ; 268
                          (   26.28   850.86   -37.32     0.07 S1)  ; 269
                          (   24.88   851.23   -37.32     0.07 S1)  ; 270
                          (   26.35   848.87   -37.32     0.07 S1)  ; 271
                          (   24.73   852.77   -37.66     0.07 S1)  ; 272
                          (   27.96   853.28   -36.26     0.07 S1)  ; 273
                          (   28.41   854.61   -36.26     0.07 S1)  ; 274
                          (   25.47   856.00   -36.26     0.07 S1)  ; 275
                          (   25.10   855.05   -35.67     0.07 S1)  ; 276
                          (   29.14   855.64   -35.67     0.07 S1)  ; 277
                          (   28.99   857.11   -35.67     0.07 S1)  ; 278
                          (   26.20   854.68   -35.02     0.07 S1)  ; 279
                          (   29.87   858.21   -35.54     0.07 S1)  ; 280
                          (   28.11   857.77   -34.25     0.07 S1)  ; 281
                          (   25.25   849.46   -37.06     0.07 S1)  ; 282
                        )  ;  End of markers
                        (
                          (   26.23   861.72   -34.90     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-1
                          (   24.17   863.71   -34.63     0.51 S1)  ; 2
                          (   23.40   865.98   -33.97     0.51 S1)  ; 3
                          (   23.40   868.25   -33.65     0.51 S1)  ; 4
                          (   22.11   870.53   -33.30     0.51 S1)  ; 5
                          (   20.57   872.23   -32.10     0.51 S1)  ; 6
                          (   19.28   873.65   -31.13     0.51 S1)  ; 7
                          (   19.28   875.64   -30.70     0.51 S1)  ; 8
                          (   19.03   877.06   -30.30     0.51 S1)  ; 9
                          (   19.80   878.77   -29.17     0.51 S1)  ; 10
                          (   19.28   879.62   -26.28     0.51 S1)  ; 11
                          (   19.03   881.04   -24.58     0.51 S1)  ; 12
                          (   19.03   883.60   -24.25     0.51 S1)  ; 13
                          (   19.03   885.30   -23.23     0.51 S1)  ; 14
                          (   19.03   887.29   -22.10     0.51 S1)  ; 15
                          (   18.26   888.99   -21.48     0.51 S1)  ; 16
                          (   18.77   890.98   -21.15     0.51 S1)  ; 17
                          (   18.00   893.25   -18.95     0.51 S1)  ; 18
                          (   18.26   895.53   -17.60     0.51 S1)  ; 19
                          (   16.71   897.57   -17.52     0.51 S1)  ; 20
                          (   15.68   899.84   -17.05     0.51 S1)  ; 21
                          (   15.68   902.97   -16.55     0.51 S1)  ; 22
                          (   16.71   904.67   -16.17     0.51 S1)  ; 23
                          (   16.97   906.38   -15.35     0.51 S1)  ; 24
                          (   17.48   907.23   -11.73     0.51 S1)  ; 25
                          (   15.43   908.08    -8.50     0.51 S1)  ; 26
                          (   14.66   909.79    -8.05     0.26 S1)  ; 27
                          (   15.43   911.49    -7.92     0.26 S1)  ; 28
                          (   15.17   912.91    -7.40     0.26 S1)  ; 29
                          (   14.40   912.63    -6.47     0.26 S1)  ; 30
                          (   14.40   914.90    -5.10     0.26 S1)  ; 31
                          (   13.63   916.04    -3.65     0.26 S1)  ; 32
                          (   12.34   916.61    -1.85     0.26 S1)  ; 33
                          (   11.83   918.31    -0.32     0.26 S1)  ; 34
                          (   12.86   920.58     1.00     0.26 S1)  ; 35
                          (   13.63   922.00     1.35     0.26 S1)  ; 36
                          (   13.37   923.42     1.63     0.26 S1)  ; 37
                          (   12.08   924.84     2.70     0.26 S1)  ; 38
                          (   14.14   925.98     2.88     0.26 S1)  ; 39
                          (   13.11   928.82     4.13     0.26 S1)  ; 40
                          (   12.08   929.67     5.53     0.26 S1)  ; 41
                          (   12.60   930.81     6.93     0.26 S1)  ; 42
                          (   11.31   931.09     7.17     0.26 S1)  ; 43
                          (   10.28   932.80     7.57     0.26 S1)  ; 44
                          (    9.77   934.50     8.27     0.26 S1)  ; 45
                          (    9.26   935.35     9.05     0.26 S1)  ; 46
                          (    9.00   937.06     7.80     0.26 S1)  ; 47
                          (    7.71   937.34     8.55     0.26 S1)  ; 48
                          (    6.43   936.49     9.30     0.26 S1)  ; 49
                          (    5.66   934.79     9.55     0.26 S1)  ; 50
                          (    7.46   934.50     9.67     0.26 S1)  ; 51
                           Normal
                        |
                          (   29.27   863.24   -35.22     1.03 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2
                          (   30.04   866.65   -33.83     1.03 S1)  ; 2
                          (   30.30   869.77   -32.60     1.03 S1)  ; 3
                          (   31.33   873.75   -32.50     1.03 S1)  ; 4
                          (   32.61   875.74   -32.28     1.03 S1)  ; 5
                          (   33.38   878.29   -32.13     1.03 S1)  ; 6
                          (   34.41   881.70   -31.98     1.03 S1)  ; 7
                          (   34.67   886.25   -31.55     1.03 S1)  ; 8
                          (   33.90   889.94   -31.32     1.03 S1)  ; 9
                          (   34.16   893.07   -31.15     1.03 S1)  ; 10
                          (   35.18   897.61   -30.90     1.03 S1)  ; 11
                          (   34.93   900.45   -30.67     1.03 S1)  ; 12
                          (   34.67   903.58   -30.50     1.03 S1)  ; 13
                          (   35.44   906.42   -30.13     1.03 S1)  ; 14
                          (   36.21   908.69   -29.58     1.03 S1)  ; 15
                          (   36.47   912.38   -29.20     1.03 S1)  ; 16
                          (   35.96   916.65   -28.75     1.03 S1)  ; 17
                          (   35.96   921.47   -28.45     1.03 S1)  ; 18
                          (   36.00   925.64   -28.72     1.03 S1)  ; 19
                          (   37.03   929.62   -27.27     1.03 S1)  ; 20
                          (   36.77   931.32   -25.87     1.03 S1)  ; 21
                          (   35.74   933.03   -25.47     1.03 S1)  ; 22
                          (   34.20   936.72   -25.17     1.03 S1)  ; 23
                          (   33.43   940.13   -25.07     1.03 S1)  ; 24
                          (   34.71   942.97   -24.58     1.03 S1)  ; 25
                          (   36.00   945.53   -23.15     1.03 S1)  ; 26
                          (   35.49   947.52   -22.10     1.03 S1)  ; 27
                          (   37.03   950.07   -21.80     1.03 S1)  ; 28
                          (   37.80   953.48   -21.48     1.03 S1)  ; 29
                          (   39.86   957.17   -21.18     1.03 S1)  ; 30
                          (   40.89   959.73   -20.95     1.03 S1)  ; 31
                          (   41.40   962.29   -20.38     1.03 S1)  ; 32
                          (   41.91   964.28   -19.67     1.03 S1)  ; 33
                          (   44.23   966.26   -18.77     1.03 S1)  ; 34
                          (   45.51   969.39   -18.52     1.03 S1)  ; 35
                          (   46.80   972.29   -18.15     1.03 S1)  ; 36
                          (   47.31   975.70   -18.02     1.03 S1)  ; 37
                          (   48.60   978.54   -17.20     1.03 S1)  ; 38
                          (   49.11   980.24   -16.45     0.77 S1)  ; 39
                          (   50.66   981.66   -16.07     0.77 S1)  ; 40
                          (   51.68   982.51   -13.87     0.77 S1)  ; 41
                          (   50.66   985.35   -12.88     0.77 S1)  ; 42
                          (   50.40   987.34   -12.57     0.77 S1)  ; 43
                          (   51.43   989.05   -10.73     0.77 S1)  ; 44
                          (   53.48   990.18    -9.63     0.77 S1)  ; 45
                          (   54.26   992.74    -8.68     0.77 S1)  ; 46
                          (   55.80   994.73    -8.40     0.77 S1)  ; 47
                          (   58.37   996.15    -8.23     0.77 S1)  ; 48
                          (   59.14   997.85    -6.32     0.77 S1)  ; 49
                          (   58.88   999.84    -3.72     0.77 S1)  ; 50
                          (   58.88  1001.55    -3.32     0.77 S1)  ; 51
                          (   60.68  1004.39    -2.30     0.77 S1)  ; 52
                          (   62.23  1005.81    -1.07     0.77 S1)  ; 53
                          (   62.23  1007.23     1.80     0.77 S1)  ; 54
                          (   64.28  1008.65     2.30     0.77 S1)  ; 55
                          (   65.83  1010.35     2.78     0.77 S1)  ; 56
                          (   67.63  1011.77     2.85     0.77 S1)  ; 57
                          (   69.43  1013.54     0.95     0.51 S1)  ; 58
                          (   68.40  1015.81     1.70     0.51 S1)  ; 59
                          (   69.17  1017.23     3.75     0.51 S1)  ; 60
                          (   70.71  1019.50     4.72     0.51 S1)  ; 61
                          (   71.74  1020.64     6.20     0.51 S1)  ; 62
                          (
                            (   74.31  1021.49     7.07     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2-1
                            (   75.34  1022.34     8.25     0.51 S1)  ; 2
                            (   75.60  1024.33     8.65     0.51 S1)  ; 3
                            (   76.63  1026.32     9.52     0.77 S1)  ; 4
                            (
                              (   77.66  1029.16    11.07     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2-1-1
                              (   78.43  1031.15    11.35     0.51 S1)  ; 2
                              (   79.97  1030.86    11.95     0.51 S1)  ; 3
                               Normal
                            |
                              (   79.97  1026.89     9.13     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2-1-2
                              (   82.03  1028.02     9.70     0.26 S1)  ; 2
                              (   84.08  1027.74    10.28     0.26 S1)  ; 3
                              (   86.14  1028.59    10.65     0.26 S1)  ; 4
                              (   86.66  1030.01    10.85     0.26 S1)  ; 5
                              (   86.91  1031.72    11.27     0.26 S1)  ; 6
                               Normal
                            )  ;  End of split
                          |
                            (   69.94  1021.49     7.70     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2-2
                            (   69.17  1022.63     9.32     0.51 S1)  ; 2
                            (   70.20  1025.47    10.35     0.51 S1)  ; 3
                            (   69.68  1027.46    12.22     0.51 S1)  ; 4
                            (   69.17  1029.44    13.18     0.51 S1)  ; 5
                            (   69.68  1031.43    14.60     0.51 S1)  ; 6
                            (
                              (   68.40  1033.99    14.85     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2-2-1
                              (   67.88  1035.41    15.38     0.26 S1)  ; 2
                              (   66.34  1035.69    15.63     0.26 S1)  ; 3
                              (   64.54  1036.83    15.77     0.26 S1)  ; 4
                              (   63.51  1037.97    16.17     0.26 S1)  ; 5
                              (   64.54  1039.10    16.42     0.26 S1)  ; 6
                               Low
                            |
                              (   71.74  1032.28    14.60     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-1-2-2-2
                              (   72.77  1033.99    15.00     0.26 S1)  ; 2
                              (   73.54  1035.69    15.17     0.26 S1)  ; 3
                              (   75.60  1036.26    15.63     0.26 S1)  ; 4
                               Low
                            )  ;  End of split
                          )  ;  End of split
                        )  ;  End of split
                      |
                        (   13.03   660.91   -60.97     1.03 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2
                        (   12.00   666.88   -61.32     1.03 S1)  ; 2
                        (    9.94   674.55   -61.47     1.03 S1)  ; 3
                        (    9.17   681.36   -61.65     1.03 S1)  ; 4
                        (    8.40   687.05   -62.30     1.03 S1)  ; 5
                        (    7.11   690.46   -63.02     1.03 S1)  ; 6
                        (    6.08   695.28   -63.38     1.03 S1)  ; 7
                        (    5.06   699.83   -64.97     1.03 S1)  ; 8
                        (    3.26   704.38   -65.20     1.03 S1)  ; 9
                        (    2.48   707.78   -65.40     1.03 S1)  ; 10
                        (    2.74   711.19   -65.82     1.03 S1)  ; 11
                        (    1.97   716.59   -63.05     1.03 S1)  ; 12
                        (    2.21   720.64   -63.13     1.03 S1)  ; 13
                        (    1.44   725.18   -61.65     1.03 S1)  ; 14
                        (    1.19   728.59   -60.65     1.03 S1)  ; 15
                        (    1.44   731.43   -60.27     1.03 S1)  ; 16
                        (    1.70   734.27   -60.17     1.03 S1)  ; 17
                        (    1.19   736.83   -60.15     1.03 S1)  ; 18
                        (    0.16   739.39   -60.00     1.03 S1)  ; 19
                        (    0.16   741.94   -59.87     1.03 S1)  ; 20
                        (    0.16   745.64   -59.65     1.03 S1)  ; 21
                        (   -0.61   749.33   -59.60     1.03 S1)  ; 22
                        (   -1.90   752.46   -59.40     1.03 S1)  ; 23
                        (   -0.87   755.86   -59.17     1.03 S1)  ; 24
                        (   -1.39   758.99   -59.05     1.03 S1)  ; 25
                        (   -1.90   762.40   -58.78     1.03 S1)  ; 26
                        (   -2.16   767.51   -58.75     1.03 S1)  ; 27
                        (   -1.90   771.55   -58.47     1.03 S1)  ; 28
                        (   -0.87   775.24   -58.50     1.03 S1)  ; 29
                        (   -1.39   779.78   -58.22     1.03 S1)  ; 30
                        (   -1.13   784.61   -57.97     1.03 S1)  ; 31
                        (   -2.16   787.74   -57.72     1.03 S1)  ; 32
                        (   -2.67   791.43   -57.47     1.03 S1)  ; 33
                        (   -1.13   795.41   -57.00     1.03 S1)  ; 34
                        (   -1.64   798.82   -57.85     1.03 S1)  ; 35
                        (   -3.19   803.36   -58.25     1.03 S1)  ; 36
                        (   -3.70   808.48   -58.62     1.03 S1)  ; 37
                        (   -3.43   813.03   -58.17     1.03 S1)  ; 38
                        (   -3.17   816.72   -57.67     1.03 S1)  ; 39
                        (   -3.94   820.98   -57.17     1.03 S1)  ; 40
                        (   -6.00   824.39   -57.10     1.03 S1)  ; 41
                        (   -6.26   828.09   -56.82     1.03 S1)  ; 42
                        (   -6.00   831.21   -56.35     1.03 S1)  ; 43
                        (   -7.54   834.62   -55.72     1.03 S1)  ; 44
                        (   -8.57   837.46   -54.65     1.03 S1)  ; 45
                        (   -7.80   840.59   -54.13     1.03 S1)  ; 46
                        (   -7.54   844.28   -53.72     1.03 S1)  ; 47
                        (   -7.69   846.98   -52.37     1.03 S1)  ; 48
                        (   -8.72   849.82   -50.92     1.03 S1)  ; 49
                        (  -10.01   854.09   -50.47     1.03 S1)  ; 50
                        (  -10.52   857.49   -50.25     1.03 S1)  ; 51
                        (  -10.01   860.62   -49.95     1.03 S1)  ; 52
                        (  -10.78   864.31   -49.52     1.03 S1)  ; 53
                        (  -12.07   867.15   -49.32     1.03 S1)  ; 54
                        (  -11.55   869.71   -49.00     1.03 S1)  ; 55
                        (  -11.29   873.97   -48.62     1.03 S1)  ; 56
                        (  -11.55   876.53   -48.25     1.03 S1)  ; 57
                        (  -12.16   878.43   -45.65     1.03 S1)  ; 58
                        (
                          (  -14.59   882.28   -52.65     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1
                          (  -16.13   885.98   -52.28     0.77 S1)  ; 2
                          (  -17.67   887.96   -52.00     0.77 S1)  ; 3
                          (  -19.99   890.24   -51.35     0.77 S1)  ; 4
                          (  -20.76   893.36   -47.77     0.77 S1)  ; 5
                          (  -22.30   895.92   -47.33     0.77 S1)  ; 6
                          (  -24.10   900.18   -46.42     0.77 S1)  ; 7
                          (  -25.90   905.01   -46.22     0.77 S1)  ; 8
                          (  -26.41   907.57   -45.80     0.77 S1)  ; 9
                          (  -27.44   908.70   -45.10     0.77 S1)  ; 10
                          (  -28.73   909.27   -44.90     0.77 S1)  ; 11
                          (  -29.49   913.24   -44.85     0.77 S1)  ; 12
                          (  -31.54   917.79   -44.52     0.77 S1)  ; 13
                          (  -32.31   920.06   -47.22     0.77 S1)  ; 14
                          (  -33.86   922.33   -48.60     0.77 S1)  ; 15
                          (  -35.40   925.46   -49.13     0.77 S1)  ; 16
                          (  -35.66   928.87   -49.40     0.77 S1)  ; 17
                          (  -36.43   930.57   -49.85     0.77 S1)  ; 18
                          (  -37.97   932.84   -50.10     0.77 S1)  ; 19
                          (  -39.00   936.25   -50.65     0.77 S1)  ; 20
                          (  -40.03   939.09   -51.75     0.77 S1)  ; 21
                          (  -40.29   942.22   -51.80     0.77 S1)  ; 22
                          (  -40.29   945.34   -49.75     0.77 S1)  ; 23
                          (  -41.31   947.90   -48.78     0.77 S1)  ; 24
                          (  -42.09   951.59   -48.27     0.77 S1)  ; 25
                          (  -42.34   954.43   -47.95     0.77 S1)  ; 26
                          (  -43.89   957.27   -47.40     0.77 S1)  ; 27
                          (  -44.40   959.83   -47.00     0.77 S1)  ; 28
                          (  -45.17   963.52   -46.88     0.77 S1)  ; 29
                          (  -46.71   967.50   -46.70     0.77 S1)  ; 30
                          (  -48.31   971.34   -47.35     0.77 S1)  ; 31
                          (  -49.60   973.62   -47.08     0.77 S1)  ; 32
                          (  -51.14   974.75   -46.08     0.77 S1)  ; 33
                          (  -52.43   976.17   -45.68     0.77 S1)  ; 34
                          (  -51.66   978.73   -45.15     0.77 S1)  ; 35
                          (  -50.89   981.86   -44.75     0.77 S1)  ; 36
                          (  -51.66   984.70   -44.55     0.77 S1)  ; 37
                          (  -52.94   986.69   -45.92     0.77 S1)  ; 38
                          (  -53.71   988.96   -47.05     0.77 S1)  ; 39
                          (  -54.23   990.95   -48.75     0.77 S1)  ; 40
                          (  -54.74   994.07   -49.70     0.77 S1)  ; 41
                          (  -55.77   997.20   -48.47     0.77 S1)  ; 42
                          (  -56.54  1000.89   -49.17     0.77 S1)  ; 43
                          (  -57.06  1004.30   -49.27     0.77 S1)  ; 44
                          (  -58.34  1007.99   -49.52     0.77 S1)  ; 45
                          (  -58.86  1011.12   -50.57     0.77 S1)  ; 46
                          (  -59.89  1013.39   -53.27     0.77 S1)  ; 47
                          (  -60.66  1015.09   -53.58     0.77 S1)  ; 48
                          (  -60.66  1017.37   -53.62     0.77 S1)  ; 49
                          (  -60.91  1019.35   -54.15     0.77 S1)  ; 50
                          (  -62.20  1021.91   -55.60     0.77 S1)  ; 51
                          (  -62.20  1024.75   -57.25     0.77 S1)  ; 52
                          (  -62.71  1026.17   -57.60     0.77 S1)  ; 53
                          (
                            (  -64.26  1028.16   -57.60     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1-1
                            (  -64.51  1031.00   -57.75     0.77 S1)  ; 2
                            (  -65.80  1033.56   -58.27     0.77 S1)  ; 3
                            (  -67.08  1035.83   -58.45     0.77 S1)  ; 4
                            (  -68.37  1039.52   -59.85     0.77 S1)  ; 5
                            (  -68.88  1042.65   -60.40     0.77 S1)  ; 6
                            (  -69.14  1046.06   -61.80     0.77 S1)  ; 7
                            (  -69.66  1048.61   -61.82     0.51 S1)  ; 8
                            (  -70.68  1049.75   -61.95     0.51 S1)  ; 9
                            (  -71.97  1052.59   -62.45     0.51 S1)  ; 10
                            (  -72.74  1055.43   -63.05     0.51 S1)  ; 11
                            (  -74.80  1058.56   -61.77     0.51 S1)  ; 12
                            (  -75.83  1061.68   -62.82     0.51 S1)  ; 13

                            (Cross
                              (Color Orange)
                              (Name "Marker 3")
                              (  -71.46  1054.58   -61.65     0.51 S1)  ; 1
                              (  -73.51  1059.41   -61.65     0.51 S1)  ; 2
                              (  -67.86  1036.11   -58.45     0.77 S1)  ; 3
                              (  -67.08  1034.13   -58.45     0.77 S1)  ; 4
                              (  -64.77  1034.13   -58.45     0.77 S1)  ; 5
                              (  -65.54  1037.54   -59.55     0.77 S1)  ; 6
                              (  -65.80  1031.29   -52.60     0.77 S1)  ; 7
                              (  -65.54  1028.73   -51.70     0.77 S1)  ; 8
                              (  -63.49  1027.59   -51.08     0.77 S1)  ; 9
                              (  -72.48  1050.60   -62.45     0.51 S1)  ; 10
                              (  -68.37  1048.33   -62.45     0.51 S1)  ; 11
                              (  -67.86  1047.19   -62.45     0.51 S1)  ; 12
                              (  -71.46  1054.58   -61.65     0.51 S1)  ; 13
                              (  -73.51  1059.41   -61.65     0.51 S1)  ; 14
                              (  -67.86  1036.11   -58.45     0.77 S1)  ; 15
                              (  -67.08  1034.13   -58.45     0.77 S1)  ; 16
                              (  -64.77  1034.13   -58.45     0.77 S1)  ; 17
                              (  -65.54  1037.54   -59.55     0.77 S1)  ; 18
                              (  -65.80  1031.29   -52.60     0.77 S1)  ; 19
                              (  -65.54  1028.73   -51.70     0.77 S1)  ; 20
                              (  -63.49  1027.59   -51.08     0.77 S1)  ; 21
                              (  -72.48  1050.60   -62.45     0.51 S1)  ; 22
                              (  -68.37  1048.33   -62.45     0.51 S1)  ; 23
                              (  -67.86  1047.19   -62.45     0.51 S1)  ; 24
                            )  ;  End of markers
                            (
                              (  -77.11  1065.15   -65.07     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1-1-1
                              (  -78.40  1067.70   -65.63     0.51 S1)  ; 2
                              (  -80.20  1070.83   -65.97     0.51 S1)  ; 3
                              (  -81.48  1073.10   -66.92     0.51 S1)  ; 4
                              (  -83.03  1076.23   -67.50     0.51 S1)  ; 5
                              (  -84.06  1078.78   -68.00     0.51 S1)  ; 6
                              (  -85.60  1081.34   -69.55     0.51 S1)  ; 7
                              (  -86.63  1083.33   -69.55     0.51 S1)  ; 8
                              (  -87.14  1087.02   -69.80     0.51 S1)  ; 9
                              (  -88.68  1090.72   -70.45     0.51 S1)  ; 10
                              (  -89.71  1094.98   -70.80     0.51 S1)  ; 11
                              (  -90.23  1097.53   -70.82     0.51 S1)  ; 12
                              (  -91.00  1100.09   -70.85     0.51 S1)  ; 13
                              (  -91.26  1102.36   -71.55     0.51 S1)  ; 14
                              (  -92.28  1104.64   -72.05     0.51 S1)  ; 15
                              (  -93.57  1105.77   -72.55     0.51 S1)  ; 16
                              (  -94.08  1108.04   -72.88     0.51 S1)  ; 17
                              (  -95.37  1110.32   -73.28     0.51 S1)  ; 18
                              (  -96.14  1113.16   -74.32     0.51 S1)  ; 19
                              (  -97.17  1116.28   -75.60     0.51 S1)  ; 20
                              (  -98.20  1119.69   -76.65     0.51 S1)  ; 21
                              (  -98.99  1122.12   -75.78     0.51 S1)  ; 22
                              ( -100.53  1124.96   -76.77     0.51 S1)  ; 23
                              ( -102.07  1128.37   -77.60     0.51 S1)  ; 24
                              ( -103.61  1131.78   -79.15     0.51 S1)  ; 25
                              ( -105.16  1135.19   -79.40     0.51 S1)  ; 26
                              ( -107.47  1136.89   -79.60     0.51 S1)  ; 27
                              ( -108.50  1138.03   -79.80     0.51 S1)  ; 28
                              ( -109.53  1140.87   -78.53     0.51 S1)  ; 29
                              ( -109.53  1142.57   -80.45     0.51 S1)  ; 30
                              ( -110.30  1143.71   -82.83     0.51 S1)  ; 31
                              ( -111.59  1144.84   -84.57     0.51 S1)  ; 32
                              ( -113.13  1147.69   -83.95     0.51 S1)  ; 33
                              ( -113.39  1149.96   -83.95     0.51 S1)  ; 34
                              ( -113.39  1151.95   -87.70     0.51 S1)  ; 35
                              ( -113.64  1153.65   -90.20     0.51 S1)  ; 36
                              ( -114.67  1155.64   -93.75     0.51 S1)  ; 37
                              ( -114.16  1157.91   -96.60     0.51 S1)  ; 38
                              ( -113.13  1160.47   -99.07     0.51 S1)  ; 39
                              ( -113.90  1162.46  -100.68     0.51 S1)  ; 40
                              ( -114.41  1165.58  -104.43     0.51 S1)  ; 41
                              ( -115.19  1168.42  -104.43     0.51 S1)  ; 42
                              ( -116.73  1171.26  -104.90     0.51 S1)  ; 43
                              ( -117.50  1174.67  -106.10     0.51 S1)  ; 44
                              ( -120.84  1176.95  -107.22     0.51 S1)  ; 45
                              ( -125.73  1179.79  -108.13     0.51 S1)  ; 46
                              ( -132.16  1180.64  -108.45     0.51 S1)  ; 47
                              ( -134.73  1180.35  -109.55     0.51 S1)  ; 48
                              ( -137.56  1181.49  -109.65     0.51 S1)  ; 49
                              ( -140.39  1182.34  -109.67     0.51 S1)  ; 50

                              (Cross
                                (Color Orange)
                                (Name "Marker 3")
                                (  -78.66  1068.56   -66.92     0.51 S1)  ; 1
                                (  -75.57  1064.01   -58.58     0.51 S1)  ; 2
                                (  -77.37  1065.72   -65.22     0.51 S1)  ; 3
                                (  -78.66  1068.84   -65.22     0.51 S1)  ; 4
                                (  -87.91  1084.47   -69.80     0.51 S1)  ; 5
                                (  -87.91  1083.61   -69.80     0.51 S1)  ; 6
                                (  -85.86  1084.75   -69.80     0.51 S1)  ; 7
                                (  -83.80  1081.06   -69.80     0.51 S1)  ; 8
                                (  -91.26  1097.53   -71.55     0.51 S1)  ; 9
                                (  -87.91  1092.14   -71.55     0.51 S1)  ; 10
                                (  -96.91  1116.28   -76.65     0.51 S1)  ; 11
                                (  -96.66  1114.58   -72.60     0.51 S1)  ; 12
                                (  -93.31  1108.04   -69.30     0.51 S1)  ; 13
                                (  -90.48  1103.78   -67.82     0.51 S1)  ; 14
                                (  -94.08  1104.92   -67.82     0.51 S1)  ; 15
                                (  -98.20  1118.55   -72.38     0.51 S1)  ; 16
                                (  -97.68  1117.42   -72.38     0.51 S1)  ; 17
                                (  -98.73  1123.82   -76.77     0.51 S1)  ; 18
                                (  -97.96  1121.27   -76.77     0.51 S1)  ; 19
                                ( -102.07  1131.21   -74.35     0.51 S1)  ; 20
                                ( -101.56  1129.50   -74.85     0.51 S1)  ; 21
                                ( -103.10  1129.50   -80.80     0.51 S1)  ; 22
                                ( -106.96  1135.75   -79.80     0.51 S1)  ; 23
                                ( -107.99  1142.00   -81.30     0.51 S1)  ; 24
                                ( -113.64  1147.69   -83.95     0.51 S1)  ; 25
                                ( -114.41  1149.67   -83.95     0.51 S1)  ; 26
                                ( -112.10  1151.66   -87.70     0.51 S1)  ; 27
                                ( -114.93  1158.20   -98.80     0.51 S1)  ; 28
                                ( -113.13  1158.76   -98.80     0.51 S1)  ; 29
                                ( -115.19  1160.47   -98.80     0.51 S1)  ; 30
                                ( -114.16  1162.74   -99.17     0.51 S1)  ; 31
                                ( -112.87  1163.31   -99.17     0.51 S1)  ; 32
                                ( -117.76  1171.26  -104.65     0.51 S1)  ; 33
                                ( -114.16  1170.70  -104.65     0.51 S1)  ; 34
                                ( -124.70  1177.23  -106.03     0.51 S1)  ; 35
                                ( -136.79  1179.22  -109.67     0.51 S1)  ; 36
                                ( -134.21  1181.77  -109.67     0.51 S1)  ; 37
                              )  ;  End of markers
                               High
                            |
                              (  -74.89  1064.34   -62.75     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1-1-2
                              (  -75.92  1065.76   -56.32     0.51 S1)  ; 2
                              (  -76.44  1067.18   -53.90     0.51 S1)  ; 3
                              (  -76.69  1068.60   -51.55     0.51 S1)  ; 4
                              (  -75.66  1069.45   -51.17     0.51 S1)  ; 5
                              (  -75.66  1071.72   -51.63     0.51 S1)  ; 6
                              (  -74.64  1073.99   -49.30     0.51 S1)  ; 7
                              (  -72.84  1075.70   -42.00     0.51 S1)  ; 8
                              (  -71.29  1076.84   -39.75     0.51 S1)  ; 9
                              (  -70.52  1078.54   -38.33     0.51 S1)  ; 10
                              (  -69.24  1079.68   -37.08     0.51 S1)  ; 11
                              (  -68.21  1082.23   -37.08     0.51 S1)  ; 12
                              (  -68.46  1083.65   -36.30     0.51 S1)  ; 13
                              (  -67.18  1084.51   -35.13     0.51 S1)  ; 14
                              (  -67.95  1086.21   -34.00     0.51 S1)  ; 15
                              (  -68.46  1087.91   -32.02     0.51 S1)  ; 16
                              (  -68.46  1089.62   -30.65     0.51 S1)  ; 17
                              (  -67.69  1091.32   -30.02     0.51 S1)  ; 18
                              (  -66.41  1092.46   -27.73     0.51 S1)  ; 19
                              (  -65.89  1093.88   -25.87     0.51 S1)  ; 20
                              (  -65.64  1096.44   -24.50     0.51 S1)  ; 21
                              (  -64.35  1097.57   -23.55     0.51 S1)  ; 22
                              (  -64.61  1100.13   -21.98     0.51 S1)  ; 23
                              (  -64.35  1101.55   -20.42     0.51 S1)  ; 24
                              (  -65.64  1102.69   -18.88     0.51 S1)  ; 25
                              (  -64.86  1103.82   -17.85     0.51 S1)  ; 26
                              (  -65.64  1106.10   -16.47     0.51 S1)  ; 27
                              (  -65.12  1107.23   -15.85     0.51 S1)  ; 28
                              (  -64.35  1108.94   -15.50     0.51 S1)  ; 29
                              (  -64.61  1111.21   -15.45     0.51 S1)  ; 30
                              (  -65.12  1112.63   -14.18     0.51 S1)  ; 31
                              (  -65.38  1113.77   -13.10     0.51 S1)  ; 32
                              (  -64.61  1116.32   -12.10     0.51 S1)  ; 33
                              (  -63.84  1118.31   -10.95     0.51 S1)  ; 34
                              (  -65.12  1119.73    -9.17     0.51 S1)  ; 35
                              (  -65.08  1122.84    -9.95     0.51 S1)  ; 36
                              (  -65.08  1124.26    -7.57     0.51 S1)  ; 37
                              (  -62.25  1125.97    -6.32     0.51 S1)  ; 38

                              (Cross
                                (Color Orange)
                                (Name "Marker 3")
                                (  -74.89  1068.60   -49.27     0.51 S1)  ; 1
                                (  -75.92  1067.18   -57.10     0.51 S1)  ; 2
                                (  -75.41  1066.04   -61.70     0.51 S1)  ; 3
                                (  -76.69  1070.87   -51.63     0.51 S1)  ; 4
                                (  -74.12  1072.01   -49.30     0.51 S1)  ; 5
                                (  -72.84  1077.40   -38.33     0.51 S1)  ; 6
                                (  -69.75  1077.69   -38.33     0.51 S1)  ; 7
                                (  -67.95  1080.81   -37.08     0.51 S1)  ; 8
                                (  -68.98  1084.79   -38.05     0.51 S1)  ; 9
                                (  -67.44  1093.31   -27.73     0.51 S1)  ; 10
                                (  -65.64  1091.61   -27.73     0.51 S1)  ; 11
                                (  -66.41  1095.58   -24.50     0.51 S1)  ; 12
                                (  -64.35  1105.53   -17.10     0.51 S1)  ; 13
                                (  -66.66  1104.96   -16.47     0.51 S1)  ; 14
                                (  -66.15  1104.68   -16.47     0.51 S1)  ; 15
                                (  -66.41  1106.95   -15.85     0.51 S1)  ; 16
                                (  -65.89  1108.08   -15.50     0.51 S1)  ; 17
                                (  -65.38  1108.94   -15.50     0.51 S1)  ; 18
                                (  -65.12  1111.49   -14.07     0.51 S1)  ; 19
                                (  -66.15  1115.47   -11.75     0.51 S1)  ; 20
                                (  -63.84  1116.32   -11.75     0.51 S1)  ; 21
                                (  -66.15  1119.45    -9.17     0.51 S1)  ; 22
                                (  -66.88  1122.84   -10.40     0.51 S1)  ; 23
                              )  ;  End of markers
                              (
                                (  -62.77  1128.52    -4.75     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1-1-2-1
                                (  -63.02  1129.66    -1.00     0.51 S1)  ; 2
                                (  -63.80  1131.08     1.88     0.51 S1)  ; 3
                                (  -65.08  1130.23     5.70     0.51 S1)  ; 4
                                (  -65.85  1128.81     6.85     0.51 S1)  ; 5

                                (Cross
                                  (Color Orange)
                                  (Name "Marker 3")
                                  (  -65.85  1131.08     3.55     0.51 S1)  ; 1
                                  (  -64.05  1129.09     3.55     0.51 S1)  ; 2
                                  (  -64.05  1131.93    -2.22     0.51 S1)  ; 3
                                )  ;  End of markers
                                 Normal
                              |
                                (  -60.45  1126.53    -7.47     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1-1-2-2
                                (  -57.88  1127.10     7.90     0.26 S1)  ; 2
                                (  -56.34  1127.95     7.95     0.26 S1)  ; 3
                                (  -55.57  1128.24     8.50     0.26 S1)  ; 4
                                (  -54.54  1127.67     8.50     0.26 S1)  ; 5
                                (  -54.28  1126.53     8.52     0.26 S1)  ; 6
                                (  -52.48  1126.25     8.63     0.26 S1)  ; 7
                                (  -51.71  1127.39     8.65     0.26 S1)  ; 8
                                 Normal
                              )  ;  End of split
                            )  ;  End of split
                          |
                            (  -61.89  1028.47   -57.95     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-1-2
                            (  -61.12  1030.46   -61.20     0.51 S1)  ; 2
                            (  -60.09  1031.88   -62.67     0.51 S1)  ; 3
                            (  -58.81  1032.73   -63.45     0.51 S1)  ; 4
                            (  -58.29  1034.43   -64.25     0.51 S1)  ; 5
                            (  -57.01  1035.86   -64.70     0.51 S1)  ; 6
                            (  -56.24  1037.56   -66.17     0.51 S1)  ; 7
                            (  -55.72  1039.26   -66.17     0.51 S1)  ; 8
                            (  -54.69  1040.97   -67.38     0.51 S1)  ; 9
                            (  -54.18  1043.53   -67.70     0.51 S1)  ; 10
                            (  -53.92  1045.23   -68.07     0.51 S1)  ; 11
                            (  -52.38  1047.79   -68.32     0.51 S1)  ; 12
                            (  -51.35  1049.78   -69.85     0.51 S1)  ; 13
                            (  -50.58  1051.76   -70.40     0.51 S1)  ; 14
                            (  -51.09  1054.04   -71.25     0.51 S1)  ; 15
                            (  -49.55  1055.74   -72.07     0.51 S1)  ; 16
                            (  -49.55  1057.45   -73.90     0.51 S1)  ; 17
                            (  -49.29  1060.00   -75.22     0.51 S1)  ; 18
                            (  -49.04  1063.13   -75.32     0.51 S1)  ; 19
                            (  -48.78  1065.97   -76.90     0.51 S1)  ; 20
                            (  -47.75  1067.67   -77.32     0.51 S1)  ; 21
                            (  -46.98  1069.66   -77.32     0.51 S1)  ; 22
                            (  -46.98  1071.37   -78.70     0.51 S1)  ; 23
                            (  -45.44  1072.50   -79.02     0.51 S1)  ; 24
                            (  -43.64  1074.77   -79.70     0.51 S1)  ; 25
                            (  -42.86  1077.33   -81.03     0.51 S1)  ; 26
                            (  -42.61  1079.60   -82.83     0.51 S1)  ; 27
                            (  -41.58  1081.59   -85.30     0.51 S1)  ; 28
                            (  -41.61  1083.76   -86.58     0.51 S1)  ; 29
                            (  -40.59  1085.18   -87.80     0.51 S1)  ; 30
                            (  -39.30  1086.60   -88.70     0.51 S1)  ; 31
                            (  -39.30  1088.02   -90.18     0.51 S1)  ; 32
                            (  -38.53  1090.86   -86.15     0.26 S1)  ; 33
                            (  -37.50  1093.98   -91.00     0.26 S1)  ; 34
                            (  -36.47  1097.39   -93.25     0.26 S1)  ; 35
                            (  -35.70  1100.80   -94.03     0.26 S1)  ; 36
                            (  -34.67  1104.49   -96.10     0.26 S1)  ; 37
                            (  -33.39  1109.04   -96.80     0.26 S1)  ; 38
                            (  -31.59  1113.59   -97.60     0.26 S1)  ; 39
                            (  -30.30  1117.28   -98.15     0.26 S1)  ; 40
                            (  -29.53  1118.98   -98.53     0.26 S1)  ; 41
                            (  -28.50  1120.40   -98.97     0.26 S1)  ; 42
                            (  -27.73  1123.53   -99.22     0.26 S1)  ; 43
                            (  -27.21  1127.51   -99.22     0.26 S1)  ; 44
                            (  -26.19  1130.40   -99.22     0.26 S1)  ; 45
                            (  -25.41  1133.24   -99.67     0.26 S1)  ; 46
                            (  -24.64  1135.80  -100.37     0.26 S1)  ; 47
                            (  -23.62  1138.36  -100.65     0.26 S1)  ; 48
                            (  -22.33  1140.91  -100.80     0.26 S1)  ; 49
                            (  -21.30  1143.19  -100.88     0.26 S1)  ; 50
                            (  -21.56  1144.04  -101.10     0.26 S1)  ; 51
                            (  -20.02  1146.03  -101.10     0.26 S1)  ; 52
                            (  -20.02  1148.58  -101.10     0.26 S1)  ; 53
                            (  -18.99  1151.14  -102.00     0.26 S1)  ; 54
                            (  -18.73  1154.55  -103.20     0.26 S1)  ; 55
                            (  -18.73  1156.54  -105.13     0.26 S1)  ; 56
                            (  -16.93  1158.81  -105.40     0.26 S1)  ; 57
                            (  -17.44  1161.37  -105.52     0.26 S1)  ; 58
                            (  -15.90  1163.92  -109.15     0.26 S1)  ; 59
                            (  -13.59  1165.91  -109.78     0.26 S1)  ; 60
                            (  -11.79  1167.90  -111.32     0.26 S1)  ; 61
                            (  -11.02  1170.46  -112.85     0.26 S1)  ; 62
                            (  -11.27  1174.15  -113.47     0.26 S1)  ; 63
                            (  -11.02  1177.56  -116.30     0.26 S1)  ; 64
                            (  -10.76  1180.68  -116.67     0.26 S1)  ; 65
                            (  -13.07  1182.39  -117.32     0.26 S1)  ; 66
                             High
                          )  ;  End of split
                        |
                          (  -11.10   882.15   -43.85     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2
                          (  -10.59   885.85   -43.20     0.77 S1)  ; 2
                          (   -9.81   889.82   -41.88     0.77 S1)  ; 3
                          (   -9.04   892.95   -41.70     0.77 S1)  ; 4
                          (   -7.76   895.51   -41.32     0.77 S1)  ; 5
                          (   -8.27   898.35   -40.77     0.77 S1)  ; 6
                          (   -8.79   901.47   -40.40     0.77 S1)  ; 7
                          (   -8.53   904.88   -40.03     0.77 S1)  ; 8
                          (   -8.27   907.72   -39.28     0.77 S1)  ; 9
                          (   -7.76   910.82   -39.25     0.77 S1)  ; 10
                          (   -7.50   913.66   -38.72     0.77 S1)  ; 11
                          (   -7.76   917.92   -38.17     0.77 S1)  ; 12
                          (   -8.01   921.33   -37.77     0.77 S1)  ; 13
                          (   -7.50   924.17   -37.35     0.77 S1)  ; 14
                          (   -8.27   927.29   -36.55     0.77 S1)  ; 15
                          (   -7.24   929.57   -35.30     0.77 S1)  ; 16
                          (   -6.47   931.84   -34.67     0.77 S1)  ; 17
                          (   -7.24   934.40   -34.45     0.77 S1)  ; 18
                          (   -7.24   936.67   -34.22     0.77 S1)  ; 19
                          (   -6.73   939.51   -34.20     0.77 S1)  ; 20
                          (   -7.17   942.63   -34.08     0.77 S1)  ; 21
                          (   -7.68   946.89   -33.70     0.77 S1)  ; 22
                          (   -8.71   950.02   -33.05     0.77 S1)  ; 23
                          (   -9.74   952.86   -32.32     0.77 S1)  ; 24
                          (   -9.48   955.99   -32.17     0.77 S1)  ; 25
                          (   -9.48   957.97   -31.52     0.77 S1)  ; 26
                          (  -10.77   959.39   -31.17     0.77 S1)  ; 27
                          (  -11.28   961.95   -30.07     0.77 S1)  ; 28
                          (  -10.51   964.79   -29.30     0.77 S1)  ; 29
                          (   -9.22   966.78   -28.77     0.77 S1)  ; 30
                          (   -8.97   969.34   -28.33     0.77 S1)  ; 31
                          (   -9.48   971.04   -27.70     0.77 S1)  ; 32
                          (
                            (   -9.74   974.17   -27.08     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-1
                            (   -9.99   977.29   -26.88     0.77 S1)  ; 2
                            (  -10.77   980.70   -26.63     0.77 S1)  ; 3
                            (  -10.77   984.11   -27.15     0.77 S1)  ; 4
                            (  -11.28   987.80   -26.48     0.77 S1)  ; 5
                            (  -11.79   990.64   -26.00     0.77 S1)  ; 6
                            (  -11.79   993.48   -24.92     0.77 S1)  ; 7
                            (  -13.19   996.47   -31.27     0.77 S1)  ; 8
                            (  -12.67   998.18   -30.65     0.77 S1)  ; 9
                            (  -11.13   999.60   -26.98     0.77 S1)  ; 10
                            (  -10.36  1001.87   -26.48     0.51 S1)  ; 11
                            (   -8.30  1003.01   -24.48     0.51 S1)  ; 12
                            (   -5.73  1004.71   -24.32     0.51 S1)  ; 13
                            (   -3.41  1005.56   -23.57     0.51 S1)  ; 14
                            (   -1.36  1008.12   -21.77     0.51 S1)  ; 15
                            (   -0.84  1010.39   -20.90     0.51 S1)  ; 16
                            (   -1.36  1012.10   -19.40     0.51 S1)  ; 17
                            (   -1.37  1015.60   -19.70     0.51 S1)  ; 18
                            (   -1.63  1018.15   -18.72     0.51 S1)  ; 19
                            (   -0.60  1021.00   -15.82     0.51 S1)  ; 20
                            (    0.17  1023.55   -14.65     0.51 S1)  ; 21
                            (    0.68  1025.82   -13.85     0.51 S1)  ; 22
                            (    2.74  1027.25   -13.32     0.51 S1)  ; 23
                            (    4.54  1028.10   -11.58     0.51 S1)  ; 24
                            (    5.57  1029.23    -8.77     0.51 S1)  ; 25
                            (    6.34  1030.37    -7.92     0.51 S1)  ; 26
                            (    7.37  1031.79    -7.47     0.51 S1)  ; 27
                            (    6.86  1032.93    -7.17     0.51 S1)  ; 28
                            (    7.63  1034.35    -5.88     0.51 S1)  ; 29
                            (    9.17  1034.35    -5.22     0.51 S1)  ; 30
                            (   10.20  1035.77    -3.62     0.51 S1)  ; 31
                            (   11.23  1037.47    -2.20     0.51 S1)  ; 32
                            (   13.28  1038.61    -1.80     0.51 S1)  ; 33
                            (   13.80  1039.46    -1.13     0.51 S1)  ; 34
                            (   12.77  1040.88    -1.00     0.51 S1)  ; 35
                            (   11.48  1041.73    -0.77     0.51 S1)  ; 36
                            (   12.00  1044.01    -0.22     0.51 S1)  ; 37
                            (   13.80  1045.99     1.75     0.51 S1)  ; 38
                            (   15.86  1046.56     2.20     0.51 S1)  ; 39
                            (   18.17  1046.56     2.53     0.51 S1)  ; 40
                            (   18.94  1048.55     3.00     0.51 S1)  ; 41
                            (   20.23  1051.68     3.25     0.51 S1)  ; 42
                            (   20.48  1055.14     3.65     0.51 S1)  ; 43
                            (   19.97  1057.41     4.07     0.51 S1)  ; 44
                            (   21.77  1057.98     4.38     0.51 S1)  ; 45
                            (   23.31  1060.54     1.65     0.77 S1)  ; 46
                            (   24.08  1063.38     1.97     0.77 S1)  ; 47
                            (   25.11  1065.37     2.05     0.77 S1)  ; 48
                            (   24.86  1067.93     2.22     0.77 S1)  ; 49
                            (   25.37  1070.77    -0.32     0.77 S1)  ; 50
                            (   26.66  1073.04    -0.97     0.77 S1)  ; 51
                            (
                              (   25.37  1075.60    -2.47     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-1-1
                              (   23.31  1076.16    -1.63     0.26 S1)  ; 2
                              (   22.54  1077.02    -0.63     0.26 S1)  ; 3
                              (   23.31  1079.86     0.25     0.26 S1)  ; 4
                              (   23.57  1080.99     1.67     0.26 S1)  ; 5
                              (   22.28  1082.98     4.47     0.26 S1)  ; 6
                              (   23.06  1084.69     6.97     0.26 S1)  ; 7
                              (   23.31  1087.24     7.70     0.26 S1)  ; 8
                              (   23.57  1089.80     7.97     0.26 S1)  ; 9
                              (   23.31  1091.50     8.95     0.26 S1)  ; 10
                              (   23.57  1092.92     9.38     0.26 S1)  ; 11
                              (   24.34  1094.34    10.45     0.26 S1)  ; 12
                              (   23.57  1095.20    11.40     0.26 S1)  ; 13
                              (   24.34  1098.04    12.25     0.26 S1)  ; 14
                              (   23.57  1100.59    13.42     0.26 S1)  ; 15
                              (   25.37  1102.30    13.82     0.26 S1)  ; 16
                              (   26.40  1104.00    14.30     0.26 S1)  ; 17
                              (   25.11  1105.14    14.80     0.26 S1)  ; 18
                              (   23.83  1105.42    15.35     0.26 S1)  ; 19
                              (   23.06  1106.84    15.40     0.26 S1)  ; 20
                              (   24.34  1107.41    15.77     0.26 S1)  ; 21
                               Low
                            |
                              (   27.17  1075.88    -3.42     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-1-2
                              (   28.20  1079.57    -4.72     0.77 S1)  ; 2
                              (   28.20  1084.12    -4.95     0.77 S1)  ; 3
                              (   28.46  1086.96    -5.00     0.77 S1)  ; 4
                              (   29.23  1091.22    -5.15     0.77 S1)  ; 5
                              (   28.46  1095.20    -5.22     0.77 S1)  ; 6
                              (   28.20  1097.19    -6.02     0.77 S1)  ; 7
                              (   28.46  1098.32    -6.02     0.77 S1)  ; 8
                              (   30.26  1100.88    -6.32     0.77 S1)  ; 9
                              (   31.03  1104.00    -6.57     0.77 S1)  ; 10
                              (   31.28  1106.28    -6.70     0.77 S1)  ; 11
                              (   30.77  1108.26    -6.80     0.77 S1)  ; 12
                              (   32.57  1110.54    -7.00     0.51 S1)  ; 13
                              (   33.86  1111.96    -8.07     0.51 S1)  ; 14
                              (   34.63  1113.66    -8.27     0.51 S1)  ; 15
                              (   34.63  1115.65    -9.65     0.51 S1)  ; 16
                              (   34.37  1117.36    -8.47     0.51 S1)  ; 17
                              (   36.43  1119.34    -9.00     0.51 S1)  ; 18
                              (   37.20  1121.62    -9.77     0.51 S1)  ; 19
                              (   38.74  1124.17   -10.80     0.51 S1)  ; 20
                              (
                                (   37.97  1127.01   -10.95     0.26 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-1-2-1
                                (   36.94  1129.29    -6.93     0.26 S1)  ; 2
                                (   37.20  1131.28    -6.75     0.26 S1)  ; 3
                                (   37.20  1134.12    -6.50     0.26 S1)  ; 4
                                (   36.43  1136.10    -7.55     0.26 S1)  ; 5
                                (   36.17  1137.81   -10.63     0.26 S1)  ; 6
                                (   35.66  1139.23   -12.52     0.26 S1)  ; 7
                                (   35.40  1141.50   -17.32     0.26 S1)  ; 8
                                (   35.66  1142.92   -18.77     0.26 S1)  ; 9
                                (   36.94  1144.91   -19.67     0.26 S1)  ; 10
                                (   37.20  1147.18   -20.38     0.26 S1)  ; 11
                                (   38.23  1148.89   -19.38     0.26 S1)  ; 12
                                 Normal
                              |
                                (   38.74  1127.30   -15.35     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-1-2-2
                                (   39.77  1128.72   -16.02     0.51 S1)  ; 2
                                (   39.00  1130.71   -16.35     0.51 S1)  ; 3
                                (   39.77  1132.70   -18.48     0.51 S1)  ; 4
                                (   40.03  1134.68   -19.60     0.51 S1)  ; 5
                                (   39.77  1135.54   -20.13     0.51 S1)  ; 6
                                (   39.51  1137.24   -20.13     0.51 S1)  ; 7
                                (   40.03  1138.66   -21.25     0.51 S1)  ; 8
                                (   39.77  1140.37   -21.72     0.51 S1)  ; 9
                                (   39.77  1141.79   -22.50     0.51 S1)  ; 10
                                (   41.06  1142.64   -23.47     0.51 S1)  ; 11
                                (   42.60  1144.63   -24.42     0.51 S1)  ; 12
                                (   43.11  1146.33   -25.47     0.51 S1)  ; 13
                                (   42.34  1147.47   -26.48     0.51 S1)  ; 14
                                (   43.63  1149.17   -26.82     0.51 S1)  ; 15
                                (   44.91  1151.44   -27.32     0.51 S1)  ; 16
                                (   46.97  1152.30   -27.65     0.51 S1)  ; 17
                                (   48.26  1153.72   -28.27     0.51 S1)  ; 18
                                (   49.80  1155.71   -28.80     0.51 S1)  ; 19
                                (   51.08  1155.71   -29.20     0.51 S1)  ; 20
                                (   53.40  1158.26   -27.25     0.51 S1)  ; 21
                                (   55.46  1158.55   -29.70     0.51 S1)  ; 22
                                (   57.77  1159.40   -30.95     0.51 S1)  ; 23
                                (   59.31  1159.97   -31.52     0.51 S1)  ; 24
                                (   61.11  1159.68   -31.72     0.51 S1)  ; 25
                                (   62.14  1158.83   -31.72     0.51 S1)  ; 26
                                (   62.91  1158.26   -31.88     0.51 S1)  ; 27
                                (   65.23  1157.98   -32.08     0.26 S1)  ; 28
                                (   67.03  1157.69   -32.10     0.26 S1)  ; 29
                                (   67.28  1156.27   -32.83     0.26 S1)  ; 30
                                (   69.60  1154.00   -33.65     0.26 S1)  ; 31
                                 Normal
                              )  ;  End of split
                            )  ;  End of split
                          |
                            (   -7.90   972.28   -27.38     0.77 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-2
                            (   -5.59   973.70   -25.65     0.51 S1)  ; 2
                            (   -3.79   975.12   -24.75     0.51 S1)  ; 3
                            (   -1.99   977.39   -23.40     0.51 S1)  ; 4
                            (   -1.73   979.10   -21.18     0.51 S1)  ; 5
                            (   -0.44   979.95   -20.33     0.51 S1)  ; 6
                            (    1.10   979.95   -19.95     0.51 S1)  ; 7
                            (    1.61   982.22   -19.65     0.51 S1)  ; 8
                            (    0.59   984.78   -19.25     0.51 S1)  ; 9
                            (    1.87   986.48   -18.57     0.51 S1)  ; 10
                            (    3.93   987.91   -18.15     0.51 S1)  ; 11
                            (    5.99   989.33   -17.13     0.51 S1)  ; 12
                            (    7.01   990.46   -16.00     0.51 S1)  ; 13
                            (    5.99   992.17   -15.55     0.51 S1)  ; 14
                            (    6.24   993.87   -15.15     0.51 S1)  ; 15
                            (    8.30   996.14   -13.70     0.51 S1)  ; 16
                            (
                              (    9.33  1000.12   -13.30     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-2-1
                              (    9.59  1002.11   -12.93     0.51 S1)  ; 2
                              (    9.07  1004.95   -16.20     0.51 S1)  ; 3
                              (    8.81  1007.51   -17.50     0.51 S1)  ; 4
                              (    8.56  1011.77   -19.60     0.51 S1)  ; 5
                              (    8.56  1012.90   -20.30     0.51 S1)  ; 6
                              (    7.53  1014.04   -20.50     0.51 S1)  ; 7
                              (    6.50  1016.88   -20.90     0.51 S1)  ; 8
                              (    6.76  1020.01   -20.90     0.51 S1)  ; 9
                              (    5.21  1022.56   -21.02     0.51 S1)  ; 10
                              (    5.47  1025.97   -21.58     0.51 S1)  ; 11
                              (    5.73  1028.53   -22.83     0.51 S1)  ; 12
                              (    5.99  1031.65   -22.83     0.51 S1)  ; 13
                              (    6.76  1035.35   -24.70     0.51 S1)  ; 14
                              (    7.79  1036.77   -25.30     0.51 S1)  ; 15
                              (    7.53  1039.89   -25.38     0.51 S1)  ; 16
                              (    8.30  1043.58   -25.47     0.51 S1)  ; 17
                              (    9.07  1046.14   -25.65     0.51 S1)  ; 18
                              (    9.59  1049.61   -25.87     0.51 S1)  ; 19
                              (   10.10  1051.60   -25.87     0.51 S1)  ; 20
                              (   10.61  1053.30   -25.87     0.51 S1)  ; 21
                              (   10.10  1055.29   -26.07     0.51 S1)  ; 22
                              (   10.61  1059.27   -27.32     0.51 S1)  ; 23
                              (   10.87  1061.54   -28.45     0.51 S1)  ; 24
                              (
                                (   11.90  1064.66   -28.45     0.51 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-2-1-1
                                (   13.19  1067.22   -28.98     0.51 S1)  ; 2
                                (   13.70  1069.21   -29.05     0.51 S1)  ; 3
                                (   13.44  1070.35   -29.05     0.51 S1)  ; 4
                                (   15.50  1072.33   -29.08     0.51 S1)  ; 5
                                (   16.27  1074.32   -29.08     0.51 S1)  ; 6
                                (   17.04  1076.03   -29.08     0.51 S1)  ; 7
                                (   18.07  1078.87   -30.25     0.51 S1)  ; 8
                                (   19.36  1081.42   -30.25     0.51 S1)  ; 9
                                (   20.64  1083.70   -30.55     0.51 S1)  ; 10
                                (   21.16  1085.12   -30.55     0.51 S1)  ; 11
                                (   21.41  1087.11   -30.73     0.51 S1)  ; 12
                                (   21.67  1090.51   -31.20     0.51 S1)  ; 13
                                (   22.11  1093.41   -29.90     0.51 S1)  ; 14
                                (   22.62  1094.83   -29.72     0.51 S1)  ; 15
                                (   23.39  1097.67   -29.72     0.51 S1)  ; 16
                                (   23.39  1099.09   -29.22     0.51 S1)  ; 17
                                (   25.14  1100.28   -32.13     0.29 S1)  ; 18
                                (   26.02  1101.87   -29.85     0.29 S1)  ; 19
                                (   27.48  1103.15   -28.30     0.29 S1)  ; 20
                                (   28.36  1104.74   -27.10     0.29 S1)  ; 21
                                (   28.07  1107.28   -24.30     0.29 S1)  ; 22
                                (   28.94  1109.83   -22.60     0.29 S1)  ; 23
                                (   29.53  1113.01   -20.47     0.29 S1)  ; 24
                                (   30.11  1114.60   -18.27     0.29 S1)  ; 25
                                (   30.11  1116.19   -17.45     0.29 S1)  ; 26
                                (   31.29  1120.01   -17.40     0.29 S1)  ; 27
                                (   30.99  1123.25   -19.55     0.29 S1)  ; 28
                                (   29.82  1124.85   -19.07     0.29 S1)  ; 29
                                (   29.53  1125.80   -21.52     0.29 S1)  ; 30
                                (   30.41  1128.03   -22.80     0.29 S1)  ; 31
                                (   29.82  1129.94   -23.35     0.29 S1)  ; 32
                                (   30.11  1132.80   -24.32     0.29 S1)  ; 33
                                (   30.11  1134.71   -25.45     0.29 S1)  ; 34
                                (   31.29  1136.30   -25.80     0.29 S1)  ; 35
                                (   30.70  1137.89   -26.45     0.29 S1)  ; 36
                                (   30.41  1141.07   -28.55     0.29 S1)  ; 37
                                (   30.99  1144.26   -29.58     0.29 S1)  ; 38
                                (   31.87  1145.85   -31.45     0.29 S1)  ; 39
                                (   30.99  1147.76   -33.47     0.29 S1)  ; 40
                                (   32.46  1149.66   -34.70     0.29 S1)  ; 41
                                (   31.58  1152.53   -36.03     0.29 S1)  ; 42
                                (   31.58  1154.76   -39.08     0.29 S1)  ; 43
                                (   32.16  1156.66   -39.38     0.29 S1)  ; 44
                                (   33.63  1158.57   -41.12     0.29 S1)  ; 45
                                (   34.50  1160.80   -43.15     0.29 S1)  ; 46
                                (   35.67  1162.39   -45.10     0.29 S1)  ; 47
                                (   36.26  1165.26   -47.22     0.29 S1)  ; 48
                                (   37.14  1168.44   -47.60     0.29 S1)  ; 49
                                (   35.38  1170.03   -47.97     0.29 S1)  ; 50
                                 Normal
                              |
                                (   13.44  1062.35   -28.35     0.29 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-2-1-2
                                (   15.20  1064.58   -28.23     0.29 S1)  ; 2
                                (   16.07  1066.49   -28.02     0.29 S1)  ; 3
                                (   19.00  1068.08   -28.02     0.29 S1)  ; 4
                                (   21.05  1071.58   -27.27     0.29 S1)  ; 5
                                (   22.80  1075.08   -26.35     0.29 S1)  ; 6
                                (   24.26  1077.31   -26.13     0.29 S1)  ; 7
                                (   25.43  1079.85   -24.30     0.29 S1)  ; 8
                                (   26.60  1081.45   -24.13     0.29 S1)  ; 9
                                (   28.36  1082.72   -23.90     0.29 S1)  ; 10
                                (   27.77  1084.31   -22.67     0.29 S1)  ; 11
                                (   28.94  1085.58   -22.43     0.29 S1)  ; 12
                                (   30.11  1088.13   -21.82     0.29 S1)  ; 13
                                (   30.70  1092.58   -21.60     0.29 S1)  ; 14
                                (   29.82  1097.67   -21.45     0.29 S1)  ; 15
                                (   30.70  1100.85   -21.28     0.29 S1)  ; 16
                                (   30.70  1105.63   -21.07     0.29 S1)  ; 17
                                (   30.11  1109.13   -19.92     0.29 S1)  ; 18
                                (   30.41  1111.35   -19.50     0.29 S1)  ; 19
                                (   29.53  1113.26   -18.45     0.29 S1)  ; 20
                                (   30.70  1114.54   -17.92     0.29 S1)  ; 21
                                (   31.87  1115.81   -17.57     0.29 S1)  ; 22
                                (   32.16  1117.40   -16.80     0.29 S1)  ; 23
                                (   32.46  1118.99   -16.47     0.29 S1)  ; 24
                                (   32.75  1120.26   -15.77     0.29 S1)  ; 25
                                (   33.92  1121.54   -15.60     0.29 S1)  ; 26
                                (   33.04  1123.13   -15.00     0.29 S1)  ; 27
                                (   33.63  1125.04   -14.60     0.29 S1)  ; 28
                                (   34.50  1126.95   -14.25     0.29 S1)  ; 29
                                (   34.21  1128.22   -13.55     0.29 S1)  ; 30
                                (   34.80  1130.45   -12.90     0.29 S1)  ; 31
                                (   35.38  1132.67   -12.00     0.29 S1)  ; 32
                                (   34.80  1134.26   -11.63     0.29 S1)  ; 33
                                (   33.92  1135.54   -11.32     0.29 S1)  ; 34
                                (   34.21  1136.49   -11.02     0.29 S1)  ; 35
                                (   34.50  1138.40   -10.77     0.29 S1)  ; 36
                                (   36.26  1140.31   -10.55     0.29 S1)  ; 37
                                (   38.31  1141.90   -10.33     0.29 S1)  ; 38
                                (   40.06  1143.17   -10.17     0.29 S1)  ; 39
                                (   40.70  1144.79   -13.95     0.29 S1)  ; 40
                                (   41.29  1146.70   -15.63     0.29 S1)  ; 41
                                (   43.04  1146.70   -17.80     0.29 S1)  ; 42
                                (   43.63  1148.61   -18.08     0.29 S1)  ; 43
                                (   44.50  1150.20   -18.70     0.29 S1)  ; 44
                                (   43.92  1151.47   -19.82     0.29 S1)  ; 45
                                (   43.92  1152.11   -22.70     0.29 S1)  ; 46
                                (   45.38  1153.70   -24.42     0.29 S1)  ; 47
                                (   45.97  1153.06   -26.67     0.29 S1)  ; 48
                                (   48.01  1153.06   -29.22     0.29 S1)  ; 49
                                (   49.48  1154.66   -30.38     0.29 S1)  ; 50
                                (   49.77  1154.02   -32.35     0.29 S1)  ; 51
                                (   51.52  1155.61   -33.80     0.29 S1)  ; 52
                                (   52.11  1156.56   -34.25     0.29 S1)  ; 53
                                (   53.28  1157.84   -34.92     0.29 S1)  ; 54
                                (   54.74  1160.06   -35.88     0.29 S1)  ; 55
                                (   56.50  1161.02   -36.30     0.29 S1)  ; 56
                                 Normal
                              )  ;  End of split
                            |
                              (   11.80   998.81   -10.97     0.29 S1)  ; 1, R-1-1-1-1-2-2-2-2-2-2-2-2-2-2
                              (   13.26  1000.72   -10.55     0.29 S1)  ; 2
                              (   15.02  1001.68    -9.35     0.29 S1)  ; 3
                              (   17.36  1001.36    -8.15     0.29 S1)  ; 4
                              (   17.94  1002.31    -6.60     0.29 S1)  ; 5
                              (   18.23  1003.59    -5.20     0.29 S1)  ; 6
                              (   19.99  1003.90    -4.35     0.29 S1)  ; 7
                              (   20.87  1005.81    -3.90     0.29 S1)  ; 8
                              (   22.33  1006.45    -2.97     0.29 S1)  ; 9
                              (   23.50  1007.09    -1.73     0.29 S1)  ; 10
                              (   24.38  1008.36    -0.93     0.29 S1)  ; 11
                              (   25.25  1009.95    -0.55     0.29 S1)  ; 12
                              (   26.42  1010.59     1.60     0.29 S1)  ; 13
                              (   27.01  1011.54     3.80     0.29 S1)  ; 14
                              (   29.35  1012.81     3.92     0.29 S1)  ; 15
                              (   30.23  1013.45     5.72     0.29 S1)  ; 16
                              (   31.69  1015.04     6.78     0.29 S1)  ; 17
                              (   32.86  1016.63     7.02     0.29 S1)  ; 18
                              (   33.44  1017.59     7.05     0.29 S1)  ; 19
                              (   33.85  1019.70     4.90     0.29 S1)  ; 20
                              (   35.22  1021.04     5.95     0.29 S1)  ; 21
                              (   36.98  1020.40     6.25     0.29 S1)  ; 22
                              (   38.44  1019.45     6.57     0.29 S1)  ; 23
                              (   38.44  1020.40     6.75     0.29 S1)  ; 24
                              (   38.44  1021.67     6.88     0.29 S1)  ; 25
                              (   40.19  1022.95     7.45     0.29 S1)  ; 26
                              (   41.95  1022.63     7.92     0.29 S1)  ; 27
                              (   42.24  1023.26     8.35     0.29 S1)  ; 28
                              (   42.24  1024.22     8.55     0.29 S1)  ; 29
                              (   44.00  1025.49     9.15     0.29 S1)  ; 30
                              (   45.17  1026.76     9.20     0.29 S1)  ; 31
                              (   45.75  1027.40     9.20     0.29 S1)  ; 32
                              (   46.92  1028.67     9.75     0.29 S1)  ; 33
                              (   48.68  1029.63    10.07     0.29 S1)  ; 34
                              (   49.85  1030.26     9.35     0.29 S1)  ; 35
                              (   49.26  1031.86     9.15     0.29 S1)  ; 36
                              (   50.72  1033.13     8.05     0.29 S1)  ; 37
                              (   52.48  1033.76     5.95     0.29 S1)  ; 38
                              (   52.77  1035.04     5.65     0.29 S1)  ; 39
                              (   54.53  1036.31     4.97     0.29 S1)  ; 40
                              (   56.57  1037.58     4.70     0.29 S1)  ; 41
                              (   57.74  1036.63     4.30     0.29 S1)  ; 42
                              (   59.21  1037.26     4.82     0.29 S1)  ; 43
                              (   60.08  1038.54     6.75     0.29 S1)  ; 44
                              (   61.84  1039.49     8.30     0.29 S1)  ; 45
                              (   64.76  1041.72     8.65     0.29 S1)  ; 46
                              (   67.10  1041.72    10.50     0.29 S1)  ; 47
                              (   70.03  1042.67    10.80     0.29 S1)  ; 48
                              (   72.95  1043.95    11.73     0.29 S1)  ; 49
                              (   76.46  1046.17    12.47     0.29 S1)  ; 50
                              (   77.34  1048.72    12.85     0.29 S1)  ; 51
                              (   79.68  1050.63    12.98     0.29 S1)  ; 52
                              (   81.14  1050.63    13.15     0.29 S1)  ; 53
                              (   84.07  1052.86    13.38     0.29 S1)  ; 54
                               Normal
                            )  ;  End of split
                          )  ;  End of split
                        )  ;  End of split
                      )  ;  End of split
                    )  ;  End of split
                  )  ;  End of split
                )  ;  End of split
              )  ;  End of split
            )  ;  End of split
          )  ;  End of split
        |
          (   24.19   194.74   -45.63     0.88 S1)  ; 1, R-1-1-1-2
          (   23.02   196.02   -51.03     0.88 S1)  ; 2
          (   21.86   197.30   -55.13     0.88 S1)  ; 3
          (   20.10   197.94   -57.37     0.88 S1)  ; 4
          (   19.52   200.18   -60.15     0.88 S1)  ; 5
          (   17.77   203.06   -63.05     0.88 S1)  ; 6
          (   16.60   204.98   -63.80     0.88 S1)  ; 7
          (   13.98   207.55   -65.63     0.88 S1)  ; 8
          (   12.52   210.43   -66.00     0.88 S1)  ; 9
          (   10.77   212.35   -68.13     0.88 S1)  ; 10
          (    9.60   215.23   -69.05     0.88 S1)  ; 11
          (    9.60   217.15   -72.17     0.88 S1)  ; 12
          (    9.02   219.39   -74.13     0.88 S1)  ; 13
          (    7.26   222.92   -76.45     0.88 S1)  ; 14
          (    6.10   223.88   -82.30     0.88 S1)  ; 15
          (    4.64   227.40   -82.38     0.88 S1)  ; 16
          (    3.47   230.28   -86.13     0.88 S1)  ; 17
          (    1.43   231.88   -87.72     0.88 S1)  ; 18
          (    1.14   234.44   -89.95     0.88 S1)  ; 19
          (   -2.66   235.40   -94.03     0.88 S1)  ; 20
           Incomplete
        )  ;  End of split
      |
        (   28.28   154.05   -49.40     1.17 S1)  ; 1, R-1-1-2
        (   30.32   153.09   -40.57     1.17 S1)  ; 2
        (   31.49   154.37   -36.33     1.17 S1)  ; 3
        (   33.53   155.33   -33.33     1.17 S1)  ; 4
        (   35.57   155.97   -32.40     1.17 S1)  ; 5
        (
          (   38.20   156.61   -31.20     1.17 S1)  ; 1, R-1-1-2-1
          (   40.53   156.93   -32.47     1.17 S1)  ; 2
          (   43.16   156.93   -33.95     1.17 S1)  ; 3
          (   46.66   159.17   -34.88     1.17 S1)  ; 4
          (
            (   47.54   160.77   -30.83     1.17 S1)  ; 1, R-1-1-2-1-1
            (   49.87   162.37   -31.40     1.17 S1)  ; 2
            (   51.91   164.30   -28.92     0.88 S1)  ; 3
            (   53.87   163.99   -26.80     0.88 S1)  ; 4
            (   56.78   165.59   -26.13     0.88 S1)  ; 5
            (   57.66   168.15   -25.70     0.88 S1)  ; 6
            (   59.70   170.71   -25.03     0.88 S1)  ; 7
            (   62.33   171.99   -23.57     0.88 S1)  ; 8
            (   64.08   173.91   -23.02     0.88 S1)  ; 9
            (   66.41   174.55   -21.32     0.88 S1)  ; 10
            (   67.87   175.19   -20.50     0.88 S1)  ; 11
            (
              (   71.08   176.16   -19.82     0.88 S1)  ; 1, R-1-1-2-1-1-1
              (   73.13   177.12   -19.17     0.88 S1)  ; 2
              (   74.58   179.36   -20.30     0.88 S1)  ; 3
              (   75.17   181.92   -24.35     0.88 S1)  ; 4
              (   76.04   184.48   -24.80     0.88 S1)  ; 5
              (   76.92   186.40   -27.97     0.88 S1)  ; 6
              (   77.21   188.32   -31.27     0.88 S1)  ; 7
              (   76.34   190.89   -31.58     0.88 S1)  ; 8
              (   75.46   193.13   -32.47     0.88 S1)  ; 9
              (   75.75   194.41   -32.60     0.88 S1)  ; 10
              (   76.63   196.01   -32.63     0.88 S1)  ; 11
              (   77.79   198.25   -32.65     0.88 S1)  ; 12
              (   78.96   198.89   -33.15     0.88 S1)  ; 13
              (   78.96   201.45   -33.33     0.88 S1)  ; 14
              (   79.55   203.69   -33.83     0.88 S1)  ; 15
              (   80.42   204.97   -33.97     0.88 S1)  ; 16
              (   81.30   206.26   -31.52     0.88 S1)  ; 17
              (   82.46   208.18   -29.45     0.88 S1)  ; 18
              (   82.17   211.06   -29.05     0.88 S1)  ; 19
              (   82.46   212.98   -32.92     0.88 S1)  ; 20
              (   83.05   215.86   -34.42     0.88 S1)  ; 21
              (   83.34   217.46   -35.40     0.88 S1)  ; 22
              (   85.09   219.38   -37.02     0.88 S1)  ; 23
              (   85.97   221.31   -37.80     0.88 S1)  ; 24
              (   86.84   224.19   -38.03     0.88 S1)  ; 25
              (   89.18   226.11   -38.90     0.88 S1)  ; 26
              (   90.63   228.35   -40.03     0.88 S1)  ; 27
              (
                (   94.39   229.66   -40.35     0.29 S1)  ; 1, R-1-1-2-1-1-1-1
                (   95.85   230.31   -42.53     0.29 S1)  ; 2
                (   97.02   231.59   -44.27     0.29 S1)  ; 3
                (   98.18   230.95   -44.85     0.29 S1)  ; 4
                (  100.23   231.27   -45.22     0.29 S1)  ; 5
                (  103.44   232.87   -45.42     0.29 S1)  ; 6
                (  105.19   234.47   -45.57     0.29 S1)  ; 7
                (  108.40   235.75   -45.92     0.29 S1)  ; 8
                (  110.73   236.71   -47.10     0.29 S1)  ; 9
                (  112.78   235.75   -47.25     0.29 S1)  ; 10
                (  116.28   236.39   -43.70     0.29 S1)  ; 11
                (  118.03   235.11   -42.92     0.29 S1)  ; 12
                (  119.78   234.47   -39.88     0.29 S1)  ; 13
                (  123.28   233.51   -38.17     0.29 S1)  ; 14
                (  125.61   231.91   -37.15     0.29 S1)  ; 15
                (  128.24   231.27   -34.88     0.29 S1)  ; 16
                 Normal
              |
                (   93.58   232.43   -40.20     0.29 S1)  ; 1, R-1-1-2-1-1-1-2
                (   95.33   236.28   -40.40     0.29 S1)  ; 2
                (   98.54   237.88   -40.45     0.29 S1)  ; 3
                (  100.29   240.44   -40.45     0.29 S1)  ; 4
                (  104.67   241.40   -40.52     0.29 S1)  ; 5
                (  105.84   242.04   -41.22     0.29 S1)  ; 6
                (  106.13   243.96   -41.52     0.29 S1)  ; 7
                (  108.17   246.52   -41.80     0.29 S1)  ; 8
                (  110.50   248.12   -42.53     0.29 S1)  ; 9
                (  112.55   251.33   -43.27     0.29 S1)  ; 10
                (  114.01   254.21   -43.55     0.29 S1)  ; 11
                (  116.34   256.77   -44.32     0.29 S1)  ; 12
                (  118.97   256.77   -45.92     0.29 S1)  ; 13
                (  120.43   258.37   -47.63     0.29 S1)  ; 14
                (  122.18   260.29   -48.15     0.29 S1)  ; 15
                (  123.34   262.53   -50.68     0.29 S1)  ; 16
                (  126.26   264.78   -50.72     0.29 S1)  ; 17
                (  128.89   267.98   -50.77     0.29 S1)  ; 18
                (  130.64   269.58   -52.28     0.29 S1)  ; 19
                (  131.81   272.14   -53.97     0.29 S1)  ; 20
                (  134.43   273.74   -53.05     0.29 S1)  ; 21
                (  136.18   275.02   -53.92     0.29 S1)  ; 22
                (  138.23   276.94   -55.40     0.29 S1)  ; 23
                (  139.69   278.22   -57.63     0.29 S1)  ; 24
                (  140.27   280.79   -58.27     0.29 S1)  ; 25
                 Normal
              )  ;  End of split
            |
              (   67.61   176.72   -18.13     0.29 S1)  ; 1, R-1-1-2-1-1-2
              (   65.86   178.64   -15.52     0.29 S1)  ; 2
              (   64.98   180.56   -14.88     0.29 S1)  ; 3
              (   64.69   183.12   -12.93     0.29 S1)  ; 4
              (   63.81   185.04   -11.25     0.29 S1)  ; 5
              (   62.36   185.68    -9.57     0.29 S1)  ; 6
              (   60.31   187.28    -8.38     0.29 S1)  ; 7
              (   61.48   190.17    -6.22     0.29 S1)  ; 8
              (   62.36   192.41    -4.20     0.29 S1)  ; 9
              (   62.65   194.33    -2.83     0.29 S1)  ; 10
              (   62.06   197.21    -2.65     0.29 S1)  ; 11
              (   61.77   200.09    -2.47     0.29 S1)  ; 12
              (   62.06   202.97    -2.75     0.29 S1)  ; 13
              (   61.77   205.22    -4.15     0.29 S1)  ; 14
              (   61.77   206.50    -5.77     0.29 S1)  ; 15
              (   60.90   209.06    -7.55     0.29 S1)  ; 16
              (   61.77   210.98    -7.95     0.29 S1)  ; 17
              (   62.06   212.26    -7.17     0.29 S1)  ; 18
              (   62.36   213.22    -3.78     0.29 S1)  ; 19
              (   60.90   215.78    -3.08     0.29 S1)  ; 20
              (   60.60   216.74    -2.53     0.29 S1)  ; 21
              (   60.90   218.99     0.05     0.29 S1)  ; 22
              (   62.06   221.87     0.50     0.29 S1)  ; 23
              (   62.94   223.15     0.60     0.29 S1)  ; 24
              (   64.11   224.43    -4.55     0.29 S1)  ; 25
              (   62.94   225.71    -5.92     0.29 S1)  ; 26
              (   63.52   226.35    -7.65     0.29 S1)  ; 27
              (   63.23   227.95   -10.07     0.29 S1)  ; 28
              (   63.23   229.87   -11.17     0.29 S1)  ; 29
              (   64.40   231.15   -11.27     0.29 S1)  ; 30
              (   67.32   233.07   -10.48     0.29 S1)  ; 31
               Normal
            )  ;  End of split
          |
            (   50.10   158.79   -34.88     1.17 S1)  ; 1, R-1-1-2-1-2
            (   53.02   159.11   -35.67     1.17 S1)  ; 2
            (   55.94   158.14   -36.27     1.17 S1)  ; 3
            (   58.85   157.82   -36.27     1.17 S1)  ; 4
            (   60.90   159.43   -37.38     1.17 S1)  ; 5
            (   63.81   160.39   -38.05     1.17 S1)  ; 6
            (   67.32   161.03   -38.25     1.17 S1)  ; 7
            (   71.11   159.75   -37.32     1.17 S1)  ; 8
            (   73.44   157.82   -39.67     1.17 S1)  ; 9
            (   75.20   157.18   -39.67     0.88 S1)  ; 10
            (   78.70   158.79   -37.77     0.88 S1)  ; 11
            (   80.74   159.75   -40.48     0.88 S1)  ; 12
            (   83.37   159.11   -40.52     0.88 S1)  ; 13
            (   85.70   157.82   -40.90     0.88 S1)  ; 14
            (   87.16   159.43   -41.12     0.88 S1)  ; 15
            (   90.66   160.71   -39.40     0.88 S1)  ; 16
            (   94.46   160.71   -38.80     0.88 S1)  ; 17
            (   97.96   161.35   -38.55     0.88 S1)  ; 18
            (  100.29   159.43   -38.40     0.88 S1)  ; 19
            (  103.21   161.67   -37.75     0.88 S1)  ; 20
            (  107.00   161.67   -37.50     0.88 S1)  ; 21
            (  110.51   161.03   -36.38     0.88 S1)  ; 22
            (  113.42   161.67   -35.02     0.88 S1)  ; 23
            (  115.47   161.99   -33.47     0.88 S1)  ; 24
            (  119.55   162.31   -32.72     0.88 S1)  ; 25
            (  121.59   161.35   -32.40     0.88 S1)  ; 26
            (  123.34   163.27   -33.92     0.88 S1)  ; 27
            (  125.68   164.23   -36.10     0.88 S1)  ; 28
            (  129.47   164.23   -36.20     0.88 S1)  ; 29
            (  131.27   165.67   -35.02     0.88 S1)  ; 30
            (  132.73   167.92   -33.92     0.58 S1)  ; 31
            (  136.23   168.24   -32.25     0.58 S1)  ; 32
            (  139.15   168.24   -32.02     0.58 S1)  ; 33
            (  140.61   169.20   -30.80     0.58 S1)  ; 34
            (  142.06   171.76   -30.47     0.58 S1)  ; 35
            (  143.09   174.68   -30.47     0.58 S1)  ; 36
            (  144.25   176.92   -34.88     0.58 S1)  ; 37
            (  147.17   178.20   -36.25     0.58 S1)  ; 38
            (  149.21   178.52   -37.05     0.58 S1)  ; 39
            (  150.67   179.81   -37.20     0.58 S1)  ; 40
            (  153.59   181.09   -38.97     0.58 S1)  ; 41
            (  157.09   182.05   -40.05     0.29 S1)  ; 42
            (  159.43   183.01   -40.85     0.29 S1)  ; 43
            (  160.30   184.29   -41.12     0.29 S1)  ; 44
            (  162.64   184.61   -42.77     0.29 S1)  ; 45
            (  166.14   184.29   -44.10     0.29 S1)  ; 46
            (  167.89   185.89   -45.20     0.29 S1)  ; 47
            (  168.18   187.81   -45.88     0.29 S1)  ; 48
             Normal
          )  ;  End of split
        |
          (   35.41   157.39   -26.50     1.17 S1)  ; 1, R-1-1-2-2
          (
            (   36.57   159.31   -24.17     0.88 S1)  ; 1, R-1-1-2-2-1
            (   36.86   161.55   -23.27     0.88 S1)  ; 2
            (   38.62   162.51   -19.97     0.88 S1)  ; 3
            (   39.49   162.83   -16.95     0.88 S1)  ; 4
            (   37.45   162.19   -15.75     0.88 S1)  ; 5
            (   38.03   163.15   -12.88     0.88 S1)  ; 6
            (   36.28   163.80   -10.33     0.58 S1)  ; 7
            (   35.11   163.80   -12.70     0.58 S1)  ; 8
            (   35.99   165.72    -8.97     0.58 S1)  ; 9
            (   36.86   167.00    -3.10     0.58 S1)  ; 10
            (   35.70   167.64    -1.50     0.58 S1)  ; 11
            (   36.57   170.20     1.55     0.58 S1)  ; 12
            (   35.99   170.20     5.37     0.58 S1)  ; 13
            (   35.11   169.88    10.52     0.58 S1)  ; 14
            (
              (   32.78   168.28    10.52     0.29 S1)  ; 1, R-1-1-2-2-1-1
              (   32.20   166.36    10.92     0.29 S1)  ; 2
              (   30.44   164.44    10.92     0.29 S1)  ; 3
               Normal
            |
              (   36.28   172.12    10.52     0.29 S1)  ; 1, R-1-1-2-2-1-2
              (   35.70   173.08    14.20     0.29 S1)  ; 2
              (   34.24   173.40    14.45     0.29 S1)  ; 3
              (   33.36   174.36    14.72     0.29 S1)  ; 4
              (   32.20   173.08    15.35     0.29 S1)  ; 5
               Low
            )  ;  End of split
          |
            (   33.07   159.31   -21.98     0.88 S1)  ; 1, R-1-1-2-2-2
            (   29.57   160.59   -21.00     0.88 S1)  ; 2
            (   27.23   162.83   -20.50     0.88 S1)  ; 3
            (   26.07   164.44   -18.92     0.88 S1)  ; 4
            (   24.02   166.36   -18.77     0.88 S1)  ; 5
            (   23.15   167.96   -16.63     0.88 S1)  ; 6
            (
              (   23.91   170.15   -13.77     0.88 S1)  ; 1, R-1-1-2-2-2-1
              (   22.46   171.11   -12.85     0.88 S1)  ; 2
              (   21.00   172.39   -11.63     0.88 S1)  ; 3
              (   21.87   174.63    -9.27     0.88 S1)  ; 4
              (   22.75   176.55    -6.65     0.88 S1)  ; 5
              (   21.29   178.80    -4.50     0.88 S1)  ; 6
              (   19.83   180.08    -3.70     0.88 S1)  ; 7
              (   20.12   182.64    -2.00     0.88 S1)  ; 8
              (   20.41   185.52    -1.90     0.88 S1)  ; 9
              (   19.83   187.44    -1.70     0.88 S1)  ; 10
              (   19.83   190.00    -1.55     0.88 S1)  ; 11
              (   20.41   192.56    -1.47     0.88 S1)  ; 12
              (   19.83   196.41    -1.40     0.88 S1)  ; 13
              (   18.95   200.57    -0.80     0.88 S1)  ; 14
              (   17.20   203.45    -0.80     0.88 S1)  ; 15
              (   15.74   204.73    -0.65     0.88 S1)  ; 16
              (   17.49   206.65    -0.20     0.88 S1)  ; 17
              (   18.66   209.22     0.17     0.88 S1)  ; 18
              (   18.66   211.78     0.45     0.88 S1)  ; 19
              (   17.49   214.02     1.38     0.88 S1)  ; 20
              (   17.79   216.58     1.80     0.88 S1)  ; 21
              (   17.49   219.14     1.90     0.88 S1)  ; 22
              (   18.08   221.38     1.20     0.88 S1)  ; 23
              (   19.25   222.99     0.05     0.88 S1)  ; 24
              (   18.08   225.55    -0.67     0.88 S1)  ; 25
              (   18.37   228.75    -2.33     0.88 S1)  ; 26
              (   17.79   231.63    -3.40     0.88 S1)  ; 27
              (   15.45   233.23    -3.50     0.88 S1)  ; 28
              (   12.83   235.15    -4.75     0.58 S1)  ; 29
              (   11.66   237.39    -5.53     0.58 S1)  ; 30
              (   11.37   240.28    -6.65     0.58 S1)  ; 31
              (   11.95   242.84    -6.73     0.58 S1)  ; 32
              (   11.37   246.68    -6.90     0.58 S1)  ; 33
              (    9.91   247.32    -6.90     0.58 S1)  ; 34
              (    6.70   248.60    -7.00     0.58 S1)  ; 35
              (    4.36   249.56    -7.53     0.58 S1)  ; 36
              (    2.90   248.92    -7.67     0.58 S1)  ; 37
               Normal
            |
              (   21.29   167.52   -15.80     0.88 S1)  ; 1, R-1-1-2-2-2-2
              (   19.25   168.16   -13.23     0.88 S1)  ; 2
              (   17.49   167.52   -11.10     0.88 S1)  ; 3
              (   16.33   166.24    -9.30     0.88 S1)  ; 4
              (   13.12   164.64    -9.02     0.88 S1)  ; 5
              (    9.91   164.00    -8.47     0.88 S1)  ; 6
              (    7.28   163.68    -8.42     0.88 S1)  ; 7
              (
                (    4.36   161.76   -10.63     0.58 S1)  ; 1, R-1-1-2-2-2-2-1
                (    2.32   161.12   -10.17     0.58 S1)  ; 2
                (    0.28   161.12    -8.82     0.58 S1)  ; 3
                (   -0.01   161.44    -4.90     0.58 S1)  ; 4
                (   -0.89   160.48    -1.02     0.58 S1)  ; 5
                (   -2.06   160.16    -0.57     0.58 S1)  ; 6
                (   -2.93   160.80     1.00     0.58 S1)  ; 7
                (   -2.93   162.40     3.80     0.58 S1)  ; 8
                (   -4.68   163.04     4.75     0.58 S1)  ; 9
                (   -6.73   164.32     5.07     0.58 S1)  ; 10
                (   -8.77   165.60     6.65     0.58 S1)  ; 11
                (  -10.81   165.28     7.50     0.58 S1)  ; 12
                (  -13.15   164.64     8.25     0.58 S1)  ; 13
                (  -13.44   165.92    10.10     0.58 S1)  ; 14
                (  -15.48   167.52    11.85     0.58 S1)  ; 15
                (  -17.52   167.52    12.40     0.58 S1)  ; 16
                (  -19.27   167.52    12.75     0.58 S1)  ; 17
                (  -20.73   167.52    14.38     0.58 S1)  ; 18
                (  -23.36   167.52    14.57     0.58 S1)  ; 19
                (  -26.28   167.52    15.05     0.58 S1)  ; 20
                 Low
              |
                (    5.24   165.60    -8.40     0.58 S1)  ; 1, R-1-1-2-2-2-2-2
                (    3.49   164.32    -6.52     0.58 S1)  ; 2
                (    2.03   164.64    -4.78     0.58 S1)  ; 3
                (    1.74   165.60    -3.42     0.58 S1)  ; 4
                (   -1.18   165.28    -1.58     0.58 S1)  ; 5
                (   -2.35   166.56     1.45     0.58 S1)  ; 6
                (   -2.93   168.16     3.08     0.58 S1)  ; 7
                (   -3.81   169.45     4.75     0.58 S1)  ; 8
                (   -5.56   168.81     6.75     0.58 S1)  ; 9
                (   -7.31   168.48     7.65     0.58 S1)  ; 10
                (   -7.31   169.77     8.25     0.58 S1)  ; 11
                (   -9.35   170.41    13.00     0.58 S1)  ; 12
                (   -9.64   170.41    13.57     0.58 S1)  ; 13
                (
                  (  -11.98   169.45     9.35     0.58 S1)  ; 1, R-1-1-2-2-2-2-2-1
                  (  -14.60   169.13     8.05     0.58 S1)  ; 2
                  (  -16.36   169.45     6.05     0.58 S1)  ; 3
                   Normal
                |
                  (   -9.64   172.33    13.57     0.58 S1)  ; 1, R-1-1-2-2-2-2-2-2
                  (   -9.94   174.25    12.20     0.58 S1)  ; 2
                  (  -10.81   174.89    11.13     0.58 S1)  ; 3
                   Low
                )  ;  End of split
              )  ;  End of split
            )  ;  End of split
          )  ;  End of split
        )  ;  End of split
      )  ;  End of split
    |
      (   28.00   125.83   -42.33     1.17 S1)  ; 1, R-1-2
      (   31.50   125.51   -45.03     1.17 S1)  ; 2
      (   35.30   124.87   -46.88     1.17 S1)  ; 3
      (   38.51   123.27   -46.88     1.17 S1)  ; 4
      (   40.55   121.67   -47.90     1.17 S1)  ; 5
      (   43.17   120.39   -50.07     1.17 S1)  ; 6
      (   46.97   119.75   -51.17     1.17 S1)  ; 7
      (   51.05   117.83   -51.38     1.17 S1)  ; 8
      (   53.10   117.19   -51.67     1.17 S1)  ; 9
      (   54.56   116.55   -51.67     1.17 S1)  ; 10
      (
        (   56.01   116.23   -50.22     1.17 S1)  ; 1, R-1-2-1
        (   58.64   116.23   -47.90     1.17 S1)  ; 2
        (
          (   60.39   117.83   -45.88     0.88 S1)  ; 1, R-1-2-1-1
          (   63.02   117.83   -44.65     0.88 S1)  ; 2
          (   65.06   117.51   -42.80     0.88 S1)  ; 3
          (   66.52   118.47   -38.57     0.88 S1)  ; 4
          (   69.44   119.11   -37.60     0.88 S1)  ; 5
          (   71.48   120.07   -36.97     0.88 S1)  ; 6
          (   72.65   121.99   -35.45     0.88 S1)  ; 7
          (   75.27   122.95   -34.32     0.88 S1)  ; 8
          (   77.32   123.59   -37.45     0.88 S1)  ; 9
          (   79.07   125.51   -33.33     0.88 S1)  ; 10
          (   81.69   125.83   -31.63     0.88 S1)  ; 11
          (   83.74   126.47   -30.47     0.88 S1)  ; 12
          (   85.49   127.43   -29.62     0.88 S1)  ; 13
          (   88.99   128.39   -29.27     0.88 S1)  ; 14
          (   91.03   127.43   -28.92     0.88 S1)  ; 15
          (   93.37   127.43   -31.85     0.88 S1)  ; 16
          (   96.87   129.35   -31.52     0.88 S1)  ; 17
          (   99.49   130.96   -33.07     0.88 S1)  ; 18
          (  102.41   132.24   -33.67     0.88 S1)  ; 19
          (  104.46   132.56   -35.85     0.88 S1)  ; 20
          (  105.91   132.24   -39.50     0.88 S1)  ; 21
          (  109.71   133.20   -41.42     0.88 S1)  ; 22
          (  111.46   134.16   -41.88     0.88 S1)  ; 23
          (  112.63   134.48   -41.10     0.58 S1)  ; 24
          (  113.50   135.76   -41.20     0.58 S1)  ; 25
          (  113.79   137.36   -41.70     0.58 S1)  ; 26
          (  116.42   138.32   -41.88     0.58 S1)  ; 27
          (  119.05   139.60   -43.40     0.58 S1)  ; 28
          (  121.67   141.52   -46.57     0.58 S1)  ; 29
          (  122.55   142.48   -47.70     0.58 S1)  ; 30
          (  124.01   143.12   -47.75     0.58 S1)  ; 31
          (  126.34   145.05   -48.15     0.58 S1)  ; 32
          (  128.09   146.01   -44.32     0.58 S1)  ; 33
          (  131.01   146.65   -42.67     0.58 S1)  ; 34
          (  132.76   147.29   -42.17     0.58 S1)  ; 35
          (  134.80   149.21   -42.08     0.58 S1)  ; 36
          (  136.56   149.21   -41.82     0.58 S1)  ; 37
          (  137.72   150.49   -43.62     0.58 S1)  ; 38
          (  140.35   150.81   -44.17     0.58 S1)  ; 39
          (  143.10   152.16   -41.30     0.58 S1)  ; 40
          (  144.85   153.12   -40.30     0.58 S1)  ; 41
          (  147.48   152.80   -41.93     0.58 S1)  ; 42
          (  149.82   154.72   -42.95     0.58 S1)  ; 43
          (  152.15   156.96   -44.63     0.58 S1)  ; 44
          (  153.61   157.28   -46.67     0.58 S1)  ; 45
          (  155.36   158.56   -47.47     0.58 S1)  ; 46
          (  157.40   161.12   -48.00     0.58 S1)  ; 47
          (  159.74   162.76   -45.00     0.58 S1)  ; 48
          (  160.91   164.04   -44.00     0.29 S1)  ; 49
          (  160.91   165.64   -41.57     0.29 S1)  ; 50
          (  160.91   168.84   -40.50     0.29 S1)  ; 51
          (  161.20   170.44   -39.63     0.29 S1)  ; 52
          (  161.78   172.04   -37.92     0.29 S1)  ; 53
          (  162.95   172.36   -35.97     0.29 S1)  ; 54
           Normal
        |
          (   59.74   114.40   -45.40     0.88 S1)  ; 1, R-1-2-1-2
          (   63.53   113.44   -44.92     0.88 S1)  ; 2
          (   66.45   112.48   -43.82     0.88 S1)  ; 3
          (   70.24   112.16   -41.90     0.88 S1)  ; 4
          (   72.87   111.20   -41.52     0.88 S1)  ; 5
          (   75.20   109.60   -41.17     0.88 S1)  ; 6
          (   77.24   108.00   -39.58     0.88 S1)  ; 7
          (   78.70   106.72   -37.95     0.88 S1)  ; 8
          (   80.75   106.72   -37.67     0.88 S1)  ; 9
          (   83.37   105.12   -37.25     0.88 S1)  ; 10
          (   85.12   104.16   -37.05     0.88 S1)  ; 11
          (   86.87   104.16   -36.92     0.88 S1)  ; 12
          (   88.63   105.12   -36.88     0.88 S1)  ; 13
          (   91.25   103.84   -36.72     0.88 S1)  ; 14
          (   94.17   103.84   -36.30     0.88 S1)  ; 15
          (   96.50   103.20   -34.88     0.88 S1)  ; 16
          (   99.13   102.56   -34.75     0.88 S1)  ; 17
          (  102.34   101.92   -34.75     0.88 S1)  ; 18
          (  105.84   102.56   -34.60     0.88 S1)  ; 19
          (  108.76   102.56   -34.60     0.88 S1)  ; 20
          (  110.51   100.96   -34.58     0.88 S1)  ; 21
          (  112.55   100.31   -34.42     0.88 S1)  ; 22
          (  114.60    98.39   -34.42     0.88 S1)  ; 23
          (  116.06    97.43   -33.53     0.88 S1)  ; 24
          (  118.10    97.43   -33.83     0.88 S1)  ; 25
          (  119.27    96.15   -34.58     0.88 S1)  ; 26
          (  121.89    96.47   -35.30     0.88 S1)  ; 27
          (  123.94    95.19   -36.52     0.88 S1)  ; 28
          (  125.69    93.59   -38.00     0.88 S1)  ; 29
          (  127.73    91.99   -39.47     0.88 S1)  ; 30
          (  130.36    91.67   -40.17     0.88 S1)  ; 31
          (  133.86    92.31   -43.53     0.58 S1)  ; 32
          (  136.19    91.99   -42.80     0.58 S1)  ; 33
          (  138.23    91.03   -40.97     0.58 S1)  ; 34
          (  139.11    89.43   -40.25     0.58 S1)  ; 35
          (  141.74    88.79   -39.42     0.58 S1)  ; 36
          (  144.07    88.15   -37.92     0.58 S1)  ; 37
          (  146.11    87.51   -37.22     0.58 S1)  ; 38
          (  147.86    86.87   -36.27     0.58 S1)  ; 39
          (  149.61    87.19   -36.15     0.58 S1)  ; 40
          (  151.95    86.87   -35.92     0.58 S1)  ; 41
          (  153.41    85.91   -35.85     0.58 S1)  ; 42
          (  153.99    84.62   -34.17     0.58 S1)  ; 43
          (  155.16    83.66   -32.28     0.58 S1)  ; 44
          (  158.08    83.02   -31.98     0.58 S1)  ; 45
          (  159.24    82.06   -32.70     0.58 S1)  ; 46
          (  160.70    81.74   -35.80     0.58 S1)  ; 47
          (  163.04    80.14   -37.65     0.58 S1)  ; 48
          (  165.37    79.18   -38.07     0.58 S1)  ; 49
          (  166.25    77.90   -38.40     0.58 S1)  ; 50
          (  168.58    76.30   -38.47     0.58 S1)  ; 51
          (  171.50    76.62   -38.63     0.58 S1)  ; 52
          (  174.13    76.30   -35.63     0.58 S1)  ; 53
          (  175.00    77.26   -34.15     0.58 S1)  ; 54
          (  176.75    77.26   -32.05     0.58 S1)  ; 55
          (  177.92    77.26   -30.75     0.58 S1)  ; 56
          (  179.96    76.62   -30.52     0.58 S1)  ; 57
          (  181.71    75.34   -29.80     0.58 S1)  ; 58
          (  182.88    75.02   -28.30     0.58 S1)  ; 59
          (  184.63    75.34   -26.45     0.58 S1)  ; 60
          (  186.68    74.06   -26.28     0.58 S1)  ; 61
          (  187.55    72.78   -25.47     0.58 S1)  ; 62
          (  190.47    73.74   -25.27     0.58 S1)  ; 63
          (  192.22    72.78   -25.10     0.58 S1)  ; 64
          (  193.68    71.50   -24.90     0.58 S1)  ; 65
          (  196.31    70.21   -28.47     0.58 S1)  ; 66
          (  198.06    69.25   -28.17     0.58 S1)  ; 67
          (  200.39    67.65   -28.10     0.58 S1)  ; 68
           Normal
        )  ;  End of split
      |
        (   55.74   114.08   -52.13     0.88 S1)  ; 1, R-1-2-2
        (   56.61   111.20   -52.95     0.88 S1)  ; 2
        (   58.66   108.96   -53.13     0.88 S1)  ; 3
        (   59.53   106.08   -53.45     0.88 S1)  ; 4
        (   60.41   103.20   -54.65     0.88 S1)  ; 5
        (   62.45   101.60   -56.90     0.88 S1)  ; 6
        (   64.20    99.99   -58.58     0.88 S1)  ; 7
        (   66.24    98.39   -59.78     0.88 S1)  ; 8
        (   68.58    97.75   -61.85     0.88 S1)  ; 9
        (   69.45    95.83   -63.70     0.88 S1)  ; 10
        (   70.62    93.27   -65.38     0.88 S1)  ; 11
        (   71.50    91.67   -68.20     0.88 S1)  ; 12
        (   72.96    88.79   -70.80     0.88 S1)  ; 13
        (   74.12    86.23   -74.95     0.88 S1)  ; 14
        (   75.29    85.26   -78.07     0.88 S1)  ; 15
        (   75.58    82.38   -80.65     0.88 S1)  ; 16
        (   76.75    80.14   -83.10     0.88 S1)  ; 17
        (   77.62    77.90   -87.25     0.88 S1)  ; 18
        (   80.25    75.34   -87.87     0.88 S1)  ; 19
        (   82.59    73.42   -89.10     0.58 S1)  ; 20
        (   85.50    71.18   -92.57     0.58 S1)  ; 21
        (   88.13    69.25   -98.30     0.58 S1)  ; 22
        (   89.88    67.01   -98.97     0.58 S1)  ; 23
         Incomplete
      )  ;  End of split
    )  ;  End of split
  |
    (   30.73    68.55   -58.25     1.17 S1)  ; 1, R-2
    (   28.10    68.87   -58.75     1.17 S1)  ; 2
    (   26.35    68.55   -62.05     1.17 S1)  ; 3
    (   23.14    68.23   -64.75     1.17 S1)  ; 4
    (   20.22    68.55   -65.03     1.17 S1)  ; 5
    (   17.89    69.83   -66.32     1.17 S1)  ; 6
    (   15.85    70.47   -67.40     1.17 S1)  ; 7
    (   13.69    70.79   -67.05     0.88 S1)  ; 8

    (Cross
      (Color Orange)
      (Name "Marker 3")
      (   25.77    69.83   -64.75     1.17 S1)  ; 1
      (   25.48    67.59   -64.75     1.17 S1)  ; 2
      (   13.80    72.71   -67.22     1.17 S1)  ; 3
    )  ;  End of markers
    (
      (   13.10    71.75   -67.05     0.88 S1)  ; 1, R-2-1
      (   11.35    72.71   -67.22     0.88 S1)  ; 2
      (    9.31    73.35   -69.38     0.88 S1)  ; 3
      (    5.52    74.31   -70.97     0.58 S1)  ; 4
      (    2.60    75.91   -71.77     0.58 S1)  ; 5
      (   -0.32    78.80   -72.32     0.58 S1)  ; 6
      (   -3.53    80.40   -71.95     0.58 S1)  ; 7
      (   -6.45    81.68   -73.65     0.58 S1)  ; 8
      (   -9.37    81.68   -74.00     0.58 S1)  ; 9
      (  -11.70    83.28   -75.10     0.58 S1)  ; 10
      (  -14.62    85.52   -76.10     0.58 S1)  ; 11
      (  -17.83    86.48   -78.05     0.58 S1)  ; 12
      (  -20.16    86.80   -78.75     0.58 S1)  ; 13
      (  -22.21    87.76   -80.02     0.58 S1)  ; 14
      (  -24.83    89.68   -80.20     0.58 S1)  ; 15
      (  -27.17    90.96   -81.53     0.58 S1)  ; 16
      (  -29.21    91.93   -83.13     0.58 S1)  ; 17
      (  -30.67    92.57   -83.93     0.58 S1)  ; 18
      (  -32.71    93.21   -85.42     0.58 S1)  ; 19
      (  -33.00    95.13   -86.15     0.58 S1)  ; 20
      (  -34.75    96.41   -83.75     0.58 S1)  ; 21
      (  -37.09    96.73   -86.80     0.58 S1)  ; 22
      (  -39.13    99.61   -89.95     0.58 S1)  ; 23
      (  -41.17    99.61   -91.27     0.58 S1)  ; 24
      (  -42.63   100.57   -92.30     0.58 S1)  ; 25
      (  -43.80   102.81   -96.45     0.58 S1)  ; 26
      (  -45.84   103.77   -96.88     0.58 S1)  ; 27
      (  -49.93   103.13   -99.67     0.58 S1)  ; 28
      (  -52.26   104.41   -99.85     0.58 S1)  ; 29
      (  -54.89   105.69  -101.22     0.58 S1)  ; 30

      (Cross
        (Color Orange)
        (Name "Marker 3")
        (  -10.24    80.40   -74.00     0.58 S1)  ; 1
        (   -8.20    82.64   -74.00     0.58 S1)  ; 2
        (   -7.03    80.40   -74.00     0.58 S1)  ; 3
        (   -3.24    82.00   -74.00     0.58 S1)  ; 4
        (  -12.58    84.88   -73.20     0.58 S1)  ; 5
        (  -24.54    87.76   -80.20     0.58 S1)  ; 6
        (  -23.37    87.76   -80.20     0.58 S1)  ; 7
        (  -24.25    90.64   -80.70     0.58 S1)  ; 8
        (  -28.92    92.89   -83.13     0.58 S1)  ; 9
        (  -29.21    91.28   -83.90     0.58 S1)  ; 10
        (  -43.80   103.77   -91.85     0.58 S1)  ; 11
      )  ;  End of markers
       High
    |
      (   11.35    72.07   -69.90     0.58 S1)  ; 1, R-2-2
      (    8.43    72.71   -72.95     0.58 S1)  ; 2
      (    7.56    75.27   -74.18     0.58 S1)  ; 3
      (    6.98    76.23   -76.15     0.58 S1)  ; 4
      (    5.81    77.84   -77.25     0.58 S1)  ; 5
      (    3.18    77.20   -78.15     0.58 S1)  ; 6
      (    0.56    77.52   -80.52     0.58 S1)  ; 7
      (
        (   -0.90    80.08   -81.65     0.58 S1)  ; 1, R-2-2-1
        (   -2.65    80.40   -84.43     0.58 S1)  ; 2
        (   -4.99    81.68   -89.05     0.58 S1)  ; 3
        (   -5.86    82.96   -92.97     0.58 S1)  ; 4
        (   -8.49    82.64   -95.13     0.58 S1)  ; 5
        (  -11.12    83.92   -95.65     0.58 S1)  ; 6
        (  -14.33    85.52  -100.13     0.58 S1)  ; 7
        (  -14.91    87.44  -104.15     0.58 S1)  ; 8
        (  -16.95    89.36  -106.20     0.58 S1)  ; 9

        (Cross
          (Color Orange)
          (Name "Marker 3")
          (    1.43    79.12   -81.65     0.58 S1)  ; 1
        )  ;  End of markers
         High
      |
        (   -1.78    75.91   -80.52     0.58 S1)  ; 1, R-2-2-2
        (   -1.78    73.99   -82.63     0.58 S1)  ; 2
        (   -3.53    72.39   -83.13     0.58 S1)  ; 3
        (   -5.28    72.71   -87.30     0.58 S1)  ; 4
        (   -7.32    72.39   -90.33     0.58 S1)  ; 5
        (   -8.78    70.47   -92.15     0.58 S1)  ; 6
        (  -11.41    70.15   -96.30     0.58 S1)  ; 7
        (  -12.87    69.83   -99.38     0.58 S1)  ; 8
        (  -13.74    68.55  -101.20     0.58 S1)  ; 9

        (Cross
          (Color RGB (0, 128, 192))
          (Name "Marker 3")
          (    0.56    75.91   -80.52     0.58 S1)  ; 1
          (   -0.90    73.35   -82.63     0.58 S1)  ; 2
          (   -2.65    75.27   -83.38     0.58 S1)  ; 3
        )  ;  End of markers
         High
      )  ;  End of split
    )  ;  End of split
  )  ;  End of split
)  ;  End of tree

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/SKv3_1.mod:
=======================================
:Comment :
:Reference : :		Characterization of a Shaw-related potassium channel family in rat brain, The EMBO Journal, vol.11, no.7,2473-2486 (1992)

NEURON	{
	SUFFIX SKv3_1
	USEION k READ ek WRITE ik
	RANGE gSKv3_1bar, gSKv3_1, ik 
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gSKv3_1bar = 0.00001 (S/cm2) 
}

ASSIGNED	{
	v	(mV)
	ek	(mV)
	ik	(mA/cm2)
	gSKv3_1	(S/cm2)
	mInf
	mTau
}

STATE	{ 
	m
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gSKv3_1 = gSKv3_1bar*m
	ik = gSKv3_1*(v-ek)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
}

INITIAL{
	rates()
	m = mInf
}

PROCEDURE rates(){
	UNITSOFF
		mInf =  1/(1+exp(((v -(18.700))/(-9.700))))
		mTau =  0.2*20.000/(1+exp(((v -(-46.560))/(-44.140))))
	UNITSON
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/ProbAMPANMDA2.mod:
==============================================
TITLE AMPA and NMDA receptor with presynaptic short-term plasticity 


COMMENT
AMPA and NMDA receptor conductance using a dual-exponential profile
presynaptic short-term plasticity based on Fuhrmann et al. 2002
Implemented by Srikanth Ramaswamy, Blue Brain Project, July 2009
Etay: changed weight to be equal for NMDA and AMPA, gmax accessible in Neuron

ENDCOMMENT


NEURON {

        POINT_PROCESS ProbAMPANMDA2  
        RANGE tau_r_AMPA, tau_d_AMPA, tau_r_NMDA, tau_d_NMDA
        RANGE Use, u, Dep, Fac, u0, weight_NMDA
        RANGE i, i_AMPA, i_NMDA, g_AMPA, g_NMDA, e, gmax
        NONSPECIFIC_CURRENT i_AMPA,i_NMDA
	POINTER rng
}

PARAMETER {

        tau_r_AMPA = 0.2   (ms)  : dual-exponential conductance profile
        tau_d_AMPA = 1.7    (ms)  : IMPORTANT: tau_r < tau_d
	tau_r_NMDA = 0.29   (ms) : dual-exponential conductance profile
        tau_d_NMDA = 43     (ms) : IMPORTANT: tau_r < tau_d
        Use = 1.0   (1)   : Utilization of synaptic efficacy (just initial values! Use, Dep and Fac are overwritten by BlueBuilder assigned values) 
        Dep = 100   (ms)  : relaxation time constant from depression
        Fac = 10   (ms)  :  relaxation time constant from facilitation
        e = 0     (mV)  : AMPA and NMDA reversal potential
	mg = 1   (mM)  : initial concentration of mg2+
        mggate
    	gmax = .001 (uS) : weight conversion factor (from nS to uS)
    	u0 = 0 :initial value of u, which is the running value of Use
}

COMMENT
The Verbatim block is needed to generate random nos. from a uniform distribution between 0 and 1 
for comparison with Pr to decide whether to activate the synapse or not
ENDCOMMENT
   
VERBATIM

#include<stdlib.h>
#include<stdio.h>
#include<math.h>

double nrn_random_pick(void* r);
void* nrn_random_arg(int argpos);

ENDVERBATIM
  

ASSIGNED {

        v (mV)
        i (nA)
	i_AMPA (nA)
	i_NMDA (nA)
        g_AMPA (uS)
	g_NMDA (uS)
        factor_AMPA
	factor_NMDA
	rng
	weight_NMDA
}

STATE {

        A_AMPA       : AMPA state variable to construct the dual-exponential profile - decays with conductance tau_r_AMPA
        B_AMPA       : AMPA state variable to construct the dual-exponential profile - decays with conductance tau_d_AMPA
	A_NMDA       : NMDA state variable to construct the dual-exponential profile - decays with conductance tau_r_NMDA
        B_NMDA       : NMDA state variable to construct the dual-exponential profile - decays with conductance tau_d_NMDA
}

INITIAL{

        LOCAL tp_AMPA, tp_NMDA
        
	A_AMPA = 0
        B_AMPA = 0
	
	A_NMDA = 0
	B_NMDA = 0
        
	tp_AMPA = (tau_r_AMPA*tau_d_AMPA)/(tau_d_AMPA-tau_r_AMPA)*log(tau_d_AMPA/tau_r_AMPA) :time to peak of the conductance
	tp_NMDA = (tau_r_NMDA*tau_d_NMDA)/(tau_d_NMDA-tau_r_NMDA)*log(tau_d_NMDA/tau_r_NMDA) :time to peak of the conductance
        
	factor_AMPA = -exp(-tp_AMPA/tau_r_AMPA)+exp(-tp_AMPA/tau_d_AMPA) :AMPA Normalization factor - so that when t = tp_AMPA, gsyn = gpeak
        factor_AMPA = 1/factor_AMPA
	
	factor_NMDA = -exp(-tp_NMDA/tau_r_NMDA)+exp(-tp_NMDA/tau_d_NMDA) :NMDA Normalization factor - so that when t = tp_NMDA, gsyn = gpeak
        factor_NMDA = 1/factor_NMDA
   
}

BREAKPOINT {

        SOLVE state METHOD cnexp
	mggate = 1 / (1 + exp(0.08  (/mV) * -(v)) * (mg / 3.57 (mM))) :mggate kinetics - Jahr & Stevens 1990
        g_AMPA = gmax*(B_AMPA-A_AMPA) :compute time varying conductance as the difference of state variables B_AMPA and A_AMPA
	g_NMDA = gmax*(B_NMDA-A_NMDA) * mggate :compute time varying conductance as the difference of state variables B_NMDA and A_NMDA and mggate kinetics
        i_AMPA = g_AMPA*(v-e) :compute the AMPA driving force based on the time varying conductance, membrane potential, and AMPA reversal
	i_NMDA = g_NMDA*(v-e) :compute the NMDA driving force based on the time varying conductance, membrane potential, and NMDA reversal
	i = i_AMPA + i_NMDA
}

DERIVATIVE state{

        A_AMPA' = -A_AMPA/tau_r_AMPA
        B_AMPA' = -B_AMPA/tau_d_AMPA
	A_NMDA' = -A_NMDA/tau_r_NMDA
        B_NMDA' = -B_NMDA/tau_d_NMDA
}


NET_RECEIVE (weight,weight_AMPA, weight_NMDA, Pv, Pr, u, tsyn (ms)){
	
	weight_AMPA = weight
	weight_NMDA = weight
	:printf("NMDA weight = %g\n", weight_NMDA)

        INITIAL{
                Pv=1
                u=u0
                tsyn=t
            }

        : calc u at event-
        if (Fac > 0) {
                u = u*exp(-(t - tsyn)/Fac) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           } else {
                  u = Use  
           } 
           if(Fac > 0){
                  u = u + Use*(1-u) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           }    

        
            Pv  = 1 - (1-Pv) * exp(-(t-tsyn)/Dep) :Probability Pv for a vesicle to be available for release, analogous to the pool of synaptic
                                                 :resources available for release in the deterministic model. Eq. 3 in Fuhrmann et al.
            Pr  = u * Pv                         :Pr is calculated as Pv * u (running value of Use)
            Pv  = Pv - u * Pv                    :update Pv as per Eq. 3 in Fuhrmann et al.
            :printf("Pv = %g\n", Pv)
            :printf("Pr = %g\n", Pr)
            tsyn = t
                
		   if (erand() < Pr){
	
                    A_AMPA = A_AMPA + weight_AMPA*factor_AMPA
                    B_AMPA = B_AMPA + weight_AMPA*factor_AMPA
		    A_NMDA = A_NMDA + weight_NMDA*factor_NMDA
                    B_NMDA = B_NMDA + weight_NMDA*factor_NMDA

                }
}

PROCEDURE setRNG() {
VERBATIM
    {
        /**
         * This function takes a NEURON Random object declared in hoc and makes it usable by this mod file.
         * Note that this method is taken from Brett paper as used by netstim.hoc and netstim.mod
         * which points out that the Random must be in negexp(1) mode
         */
        void** pv = (void**)(&_p_rng);
        if( ifarg(1)) {
            *pv = nrn_random_arg(1);
        } else {
            *pv = (void*)0;
        }
    }
ENDVERBATIM
}

FUNCTION erand() {
VERBATIM
	    //FILE *fi;
        double value;
        if (_p_rng) {
                /*
                :Supports separate independent but reproducible streams for
                : each instance. However, the corresponding hoc Random
                : distribution MUST be set to Random.negexp(1)
                */
                value = nrn_random_pick(_p_rng);
		        //fi = fopen("RandomStreamMCellRan4.txt", "w");
                //fprintf(fi,"random stream for this simulation = %lf\n",value);
                //printf("random stream for this simulation = %lf\n",value);
                return value;
        }else{
ENDVERBATIM
                : the old standby. Cannot use if reproducible parallel sim
                : independent of nhost or which host this instance is on
                : is desired, since each instance on this cpu draws from
                : the same stream
                erand = exprand(1)
VERBATIM
        }
ENDVERBATIM
        erand = value
}

================================================================================
================================================================================
valid_fitting_results_exploration.py:
=====================================
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import glob
import pickle
from scipy.stats import norm

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% look at validation evaluations results

folder_name = '/Reseach/Single_Neuron_InOut/models/'
list_of_evaluated_models = glob.glob(folder_name + '*/eval_results/*.pickle')


def extract_useful_info(learning_dict_filename):
    
    learning_dict = pickle.load(open(learning_dict_filename, "rb" ), encoding='latin1')
    data_dict         = learning_dict['data_dict']
    architecture_dict = learning_dict['architecture_dict']
    training_dict     = learning_dict['training_history_dict']
    results_dict      = learning_dict['evaluations_results_dict']['starting_at_500ms_spikes_in_[0,24]_range']

    # biophyisical model type
    biophyisical_model_type_1 = learning_dict_filename.split('/')[-1].split('_')[0]
    biophyisical_model_type_2 = data_dict['train_files'][0].split('/')[-2].split('_')[1]
    biophyisical_model_type_3 = data_dict['valid_files'][0].split('/')[-2].split('_')[1]
    biophyisical_model_type_4 = data_dict['test_files'][0].split('/')[-2].split('_')[1]

    assert(biophyisical_model_type_1 == biophyisical_model_type_2)
    assert(biophyisical_model_type_1 == biophyisical_model_type_3)
    assert(biophyisical_model_type_1 == biophyisical_model_type_4)

    # NN model type
    NN_model_type_1 = learning_dict_filename.split('/')[-1].split('_')[1]
    
    if NN_model_type_1 == 'SK':
        NN_model_type_1 = learning_dict_filename.split('/')[-1].split('_')[2]
        biophyisical_model_type_1 = biophyisical_model_type_1 + '_SK'
    
    # NN input time window
    NN_input_time_window_1 = int(learning_dict_filename.split('/')[-1].split('__')[1].split('x')[-1])
    
    useful_results_dict = {}
    useful_results_dict['biophysical_model_type'] = biophyisical_model_type_1
    useful_results_dict['NN_model_type']          = NN_model_type_1
    useful_results_dict['NN_depth']               = architecture_dict['network_depth']
    useful_results_dict['NN_width']               = np.array(architecture_dict['num_filters_per_layer']).mean().astype(int)
    useful_results_dict['NN_input_time_window']   = NN_input_time_window_1
    useful_results_dict['NN_num_train_samples']   = sum(training_dict['num_train_samples'])
    useful_results_dict['NN_unique_train_files']  = len(training_dict['train_files_histogram'][-1].keys())

    useful_results_dict['spikes AUC']                = results_dict['AUC']
    useful_results_dict['spikes D prime']            = np.sqrt(2) * norm.ppf(results_dict['AUC'])
    useful_results_dict['spikes TP @ 0.25% FP']      = results_dict['TP @ 0.0025 FP']
    useful_results_dict['spikes TP @ 0.1% FP']       = results_dict['TP @ 0.0010 FP']
    useful_results_dict['spikes AUC @ 1% FP']        = results_dict['AUC @ 0.0100 FP']
    useful_results_dict['soma RMSE']                 = results_dict['soma_RMSE']
    useful_results_dict['soma MAE']                  = results_dict['soma_MAE']
    useful_results_dict['soma explained variance %'] = results_dict['soma_explained_variance_percent']
    
    useful_results_dict['full model filename'] = learning_dict_filename.split('/')[-1].split('.')[0]
    
    return useful_results_dict


list_of_useful_results_dict = []
for k, learning_dict_filename in enumerate(list_of_evaluated_models):
    useful_results_dict = extract_useful_info(learning_dict_filename)
    list_of_useful_results_dict.append(useful_results_dict)

print('finished loading %d model results' %(len(list_of_useful_results_dict)))

#%% insert results into a pandas dataframe

num_rows = len(list_of_useful_results_dict)
cols = list_of_useful_results_dict[-1].keys()

# columns in the "right order"
cols = [
 'biophysical_model_type',
 'NN_depth',
 'NN_width',
 'NN_input_time_window',
 'NN_model_type',
 'spikes D prime',
 'spikes AUC',
 'spikes AUC @ 1% FP',
 'soma explained variance %',
 'soma RMSE',
 'soma MAE',
 'spikes TP @ 0.1% FP',
 'spikes TP @ 0.25% FP',
 'NN_num_train_samples',
 'NN_unique_train_files',
 'full model filename']

results_dataframe = pd.DataFrame(index=range(num_rows), columns=cols)

for k, useful_res_row in enumerate(list_of_useful_results_dict):
    for key, value in useful_res_row.items():
        results_dataframe.loc[k,key] = value
    
print('finished building dataframe')

#%% remove extreemly poor perfomers from analysis

results_dataframe = results_dataframe.loc[results_dataframe['spikes D prime'] >= 0.5,:].reset_index(drop=True)
results_dataframe = results_dataframe.loc[results_dataframe['spikes AUC'] >= 0.6,:].reset_index(drop=True)
results_dataframe = results_dataframe.loc[results_dataframe['soma explained variance %'] >= 60,:].reset_index(drop=True)

#%% filter number of training samples

results_dataframe = results_dataframe.loc[results_dataframe['NN_width'] <= 256,:].reset_index(drop=True)
results_dataframe = results_dataframe.loc[results_dataframe['NN_input_time_window'] <= 260,:].reset_index(drop=True)
results_dataframe = results_dataframe.loc[results_dataframe['NN_num_train_samples'] >= 50000,:].reset_index(drop=True)
results_dataframe = results_dataframe.loc[results_dataframe['NN_num_train_samples'] <= 5000000,:].reset_index(drop=True)

#%% show various graphs


def show_dataframe_scatters(results_dataframe, noise_level=1.0):
    
    AMPA_SK_rows = results_dataframe['biophysical_model_type'] == 'AMPA_SK'
    AMPA_rows = results_dataframe['biophysical_model_type'] == 'AMPA'
    NMDA_rows = results_dataframe['biophysical_model_type'] == 'NMDA'
    
    alpha = 0.6
    fontsize = 20
    plt.close('all')


    ### Depth
    AMPA_SK_depth = results_dataframe.loc[AMPA_SK_rows,'NN_depth']
    AMPA_SK_depth = AMPA_SK_depth + noise_level * 0.15 * np.random.randn(AMPA_SK_depth.shape[0])
    
    AMPA_depth = results_dataframe.loc[AMPA_rows,'NN_depth']
    AMPA_depth = AMPA_depth + noise_level * 0.15 * np.random.randn(AMPA_depth.shape[0])
    
    NMDA_depth = results_dataframe.loc[NMDA_rows,'NN_depth']
    NMDA_depth = NMDA_depth + noise_level * 0.15 * np.random.randn(NMDA_depth.shape[0])
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of depth', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_depth, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_depth, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_depth, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network depth', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)

    
    ### Width
    AMPA_SK_width = results_dataframe.loc[AMPA_SK_rows,'NN_width']
    AMPA_SK_width = AMPA_SK_width + noise_level * 2.0 * np.random.randn(AMPA_SK_width.shape[0])
    
    AMPA_width = results_dataframe.loc[AMPA_rows,'NN_width']
    AMPA_width = AMPA_width + noise_level * 2.0 * np.random.randn(AMPA_width.shape[0])

    NMDA_width = results_dataframe.loc[NMDA_rows,'NN_width']
    NMDA_width = NMDA_width + noise_level * 2.0 * np.random.randn(NMDA_width.shape[0])
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of width', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)


    ### Width (log scale)
    AMPA_SK_width = results_dataframe.loc[AMPA_SK_rows,'NN_width']
    AMPA_SK_width = AMPA_SK_width + noise_level * 0.5 * np.random.randn(AMPA_SK_width.shape[0])
    AMPA_SK_width[AMPA_SK_width <= 0] = 0.1

    AMPA_width = results_dataframe.loc[AMPA_rows,'NN_width']
    AMPA_width = AMPA_width + noise_level * 0.5 * np.random.randn(AMPA_width.shape[0])
    AMPA_width[AMPA_width <= 0] = 0.1

    NMDA_width = results_dataframe.loc[NMDA_rows,'NN_width']
    NMDA_width = NMDA_width + noise_level * 0.5 * np.random.randn(NMDA_width.shape[0])
    NMDA_width[NMDA_width <= 0] = 0.1
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of width', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_width, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_width, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_width, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network width', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
        
    
    ### Time window size
    AMPA_SK_T_size = results_dataframe.loc[AMPA_SK_rows,'NN_input_time_window']
    AMPA_SK_T_size = AMPA_SK_T_size + noise_level * 1.5 * np.random.randn(AMPA_SK_T_size.shape[0])
    
    AMPA_T_size = results_dataframe.loc[AMPA_rows,'NN_input_time_window']
    AMPA_T_size = AMPA_T_size + noise_level * 1.5 * np.random.randn(AMPA_T_size.shape[0])
    
    NMDA_T_size = results_dataframe.loc[NMDA_rows,'NN_input_time_window']
    NMDA_T_size = NMDA_T_size + noise_level * 1.5 * np.random.randn(NMDA_T_size.shape[0])
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of time window size', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    
    # Time window size (log scale)
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of time window size (log scale)', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')

    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_T_size, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_T_size, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_T_size, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network time window size', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')

    
    ### num samples
    AMPA_SK_num_trains_samples = results_dataframe.loc[AMPA_SK_rows,'NN_num_train_samples'] / 1000.0
    AMPA_num_trains_samples = results_dataframe.loc[AMPA_rows,'NN_num_train_samples'] / 1000.0
    NMDA_num_trains_samples = results_dataframe.loc[NMDA_rows,'NN_num_train_samples'] / 1000.0
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of num training samples', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')

    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_num_trains_samples, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_trains_samples, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_trains_samples, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('network num train samples (thousands)', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize); plt.xscale('log')


    ### num samples
    AMPA_SK_num_unique_train_files = results_dataframe.loc[AMPA_SK_rows,'NN_unique_train_files']
    AMPA_num_unique_train_files = results_dataframe.loc[AMPA_rows,'NN_unique_train_files']
    NMDA_num_unique_train_files = results_dataframe.loc[NMDA_rows,'NN_unique_train_files']
    
    plt.figure(figsize=(18,16))
    plt.suptitle('network performace as function of num unique training files', fontsize=fontsize)
    plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)
    
    plt.subplot(3,2,1)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'spikes D prime'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'spikes D prime'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'spikes D prime'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('D prime', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,3)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'spikes AUC'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'spikes AUC'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'spikes AUC'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('AUC', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,5)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'spikes TP @ 0.25% FP'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'spikes TP @ 0.25% FP'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'spikes TP @ 0.25% FP'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('TP @ 0.25% FP', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    
    plt.subplot(3,2,2)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'soma explained variance %'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'soma explained variance %'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'soma explained variance %'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('soma explained variance %', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,4)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'soma RMSE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'soma RMSE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'soma RMSE'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('soma RMSE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)
    plt.subplot(3,2,6)
    plt.scatter(AMPA_SK_num_unique_train_files, results_dataframe.loc[AMPA_SK_rows,'soma MAE'], c='orange', alpha=alpha)
    plt.scatter(AMPA_num_unique_train_files, results_dataframe.loc[AMPA_rows,'soma MAE'], c='m', alpha=alpha)
    plt.scatter(NMDA_num_unique_train_files, results_dataframe.loc[NMDA_rows,'soma MAE'], c='b', alpha=alpha)
    plt.xlabel('num unique training files', fontsize=fontsize); plt.ylabel('soma MAE', fontsize=fontsize)
    plt.legend(['AMPA_SK','AMPA','NMDA'], fontsize=fontsize)


show_dataframe_scatters(results_dataframe)

#%% create a compact dataset with only the best model per (D,W,T,type)

select_best_AUC = True  # can choose whether to select based on somatic voltage or spikes prediction

DWTt_columns = ['NN_depth','NN_width','NN_input_time_window','NN_model_type','biophysical_model_type']
unique_DWTt_options = results_dataframe.loc[:,DWTt_columns].drop_duplicates().reset_index(drop=True)

num_unique_options = unique_DWTt_options.shape[0]

# go over all unique options, extract them from the database, and store the best values for each metric
best_results_dataframe = pd.DataFrame(columns=results_dataframe.columns.tolist())
for k in range(num_unique_options):
    DVTt_option = unique_DWTt_options.loc[k,:]
    
    option_rows = np.all((results_dataframe[DWTt_columns] == DVTt_option), axis=1)
    results_subset_df = results_dataframe.loc[option_rows,:].reset_index(drop=True)
    
    # choose the best according to some criteria
    if select_best_AUC:
        best_row_ind = np.argmax(np.array(results_subset_df['spikes AUC']))
    else:
        best_row_ind = np.argmin(np.array(results_subset_df['soma RMSE']))
    best_results_dataframe = best_results_dataframe.append(results_subset_df.loc[best_row_ind,:])
    
best_results_dataframe = best_results_dataframe.reset_index(drop=True)

sorting_order = ['biophysical_model_type',
                 'NN_depth',
                 'NN_model_type',
                 'NN_width',
                 'NN_input_time_window',
                 'spikes D prime']

# organize best results dataframe for saving
best_results_dataframe = best_results_dataframe.sort_values(by=sorting_order)

output_filename = '/Reseach/Single_Neuron_InOut/models/best_models/best_results_valid_%d_models.csv' %(num_unique_options)
best_results_dataframe.to_csv(output_filename, index=False)

#%% filter the very extreeme results

best_results_dataframe = best_results_dataframe.loc[best_results_dataframe['NN_width'] <= 256,:].reset_index(drop=True)
best_results_dataframe = best_results_dataframe.loc[best_results_dataframe['NN_input_time_window'] >= 10,:].reset_index(drop=True)
best_results_dataframe = best_results_dataframe.loc[best_results_dataframe['NN_input_time_window'] <= 260,:].reset_index(drop=True)
best_results_dataframe = best_results_dataframe.loc[best_results_dataframe['NN_num_train_samples'] >= 100000,:].reset_index(drop=True)

#%% show all data as scatter

show_dataframe_scatters(best_results_dataframe, noise_level=0.0)

#%% add to best results dataframe several "artificial" rows

FCN_rows = best_results_dataframe.loc[best_results_dataframe.loc[:,'NN_model_type'] == 'FCN',:]
FCN_rows.loc[:,['NN_model_type']] = 'TCN'
FCN_rows = FCN_rows.reset_index(drop=True)
best_results_dataframe = pd.concat((best_results_dataframe,FCN_rows),axis=0).reset_index(drop=True)


def keep_duplicate_x_with_extreeme_y(x,y, use_min=False):
    x_array = np.array(x)
    y_array = np.array(y)
    
    new_x_vals = np.sort(np.unique(x_array))
    new_y_vals = []
    
    for x_val in new_x_vals:
        if use_min:
            new_y_vals.append(y_array[x_array == x_val].min())
        else:
            new_y_vals.append(y_array[x_array == x_val].max())
    new_y_vals = np.array(new_y_vals)
    
    return new_x_vals, new_y_vals


def keep_only_strictly_changing_values(x, y, inreasing=True):
    
    y_span = y.max() - y.min()
    
    if inreasing:
        is_changing = np.diff(y) > 0.02 * y_span
    else:
        is_changing = np.diff(y) < -0.02 * y_span
        
    is_changing = np.concatenate((np.zeros(1)==0, is_changing))
    is_changing[-1] = True
    
    inds_to_keep = np.nonzero(is_changing)[0]
    x_subset = x[inds_to_keep]
    y_subset = y[inds_to_keep]
    
    return x_subset, y_subset


#%% show accuracy vs complexity graphs (slice and dice in various ways)


### NN_depth
x_axis_name = 'NN_depth'
fontsize = 20
use_log_scale = False
type_columns = ['biophysical_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]
max_cols = ['spikes D prime', 'spikes AUC @ 1% FP', 'spikes TP @ 0.1% FP',
            'soma explained variance %', 'spikes AUC', 'spikes TP @ 0.25% FP']
min_cols = ['soma MAE', 'soma RMSE']

# go over all unique options, extract them from the database, and store the best values for each metric
X_vs_depth_curve_dicts = {}
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type']
    
    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]

    sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
    sorted_results_subset_df_max = sorted_results_subset_df.cummax()
    sorted_results_subset_df_min = sorted_results_subset_df.cummin()
    
    # max cols
    sorted_results_subset_df.loc[:,max_cols] = sorted_results_subset_df_max.loc[:,max_cols]
    # min cols
    sorted_results_subset_df.loc[:,min_cols] = sorted_results_subset_df_min.loc[:,min_cols]
        
    # assemble dict
    X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
    
plt.close('all')
plt.figure(figsize=(17,12))
plt.suptitle('network performace as function of %s' %(x_axis_name), fontsize=fontsize)
plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.92,hspace=0.15,wspace=0.15)

plot_ind = 1

# positive
list_of_target_cols = ['spikes AUC', 'soma explained variance %','spikes D prime']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(2,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col])
        x,y = keep_only_strictly_changing_values(x, y, inreasing=True)
        
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names, loc='lower right')
    plot_ind = plot_ind + 1
    
# negative curves
list_of_target_cols = ['soma RMSE']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(2,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col], use_min=True)
        x,y = keep_only_strictly_changing_values(x, y, inreasing=False)
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names, loc='upper right')
    plot_ind = plot_ind + 1


### NN_width
x_axis_name = 'NN_width'
fontsize = 20
use_log_scale = False
type_columns = ['biophysical_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]
max_cols = ['spikes D prime', 'spikes AUC @ 1% FP', 'spikes TP @ 0.1% FP',
            'soma explained variance %', 'spikes AUC', 'spikes TP @ 0.25% FP']
min_cols = ['soma MAE', 'soma RMSE']

# go over all unique options, extract them from the database, and store the best values for each metric
X_vs_depth_curve_dicts = {}
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type']

    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]

    sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
    sorted_results_subset_df_max = sorted_results_subset_df.cummax()
    sorted_results_subset_df_min = sorted_results_subset_df.cummin()
    
    # max cols
    sorted_results_subset_df.loc[:,max_cols] = sorted_results_subset_df_max.loc[:,max_cols]
    # min cols
    sorted_results_subset_df.loc[:,min_cols] = sorted_results_subset_df_min.loc[:,min_cols]
        
    # assemble dict
    X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
    
    
plt.figure(figsize=(17,12))
plt.suptitle('network performace as function of %s' %(x_axis_name), fontsize=fontsize)
plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.92,hspace=0.15,wspace=0.15)

plot_ind = 1

# positive
list_of_target_cols = ['spikes AUC', 'soma explained variance %','spikes D prime']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(2,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col])
        x,y = keep_only_strictly_changing_values(x, y, inreasing=True)
        
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names, loc='lower right')
    plot_ind = plot_ind + 1
    
# negative curves
list_of_target_cols = ['soma RMSE']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(2,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col], use_min=True)
        x,y = keep_only_strictly_changing_values(x, y, inreasing=False)
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names, loc='upper right')
    plot_ind = plot_ind + 1


### NN_input_time_window
x_axis_name = 'NN_input_time_window'
fontsize = 20
use_log_scale = False
type_columns = ['biophysical_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]
max_cols = ['spikes D prime', 'spikes AUC @ 1% FP', 'spikes TP @ 0.1% FP',
            'soma explained variance %', 'spikes AUC', 'spikes TP @ 0.25% FP']
min_cols = ['soma MAE', 'soma RMSE']

# go over all unique options, extract them from the database, and store the best values for each metric
X_vs_depth_curve_dicts = {}
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type']

    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]

    sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
    sorted_results_subset_df_max = sorted_results_subset_df.cummax()
    sorted_results_subset_df_min = sorted_results_subset_df.cummin()
    
    # max cols
    sorted_results_subset_df.loc[:,max_cols] = sorted_results_subset_df_max.loc[:,max_cols]
    # min cols
    sorted_results_subset_df.loc[:,min_cols] = sorted_results_subset_df_min.loc[:,min_cols]
        
    # assemble dict
    X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
    
    
plt.figure(figsize=(17,12))
plt.suptitle('network performace as function of %s' %(x_axis_name), fontsize=fontsize)
plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.92,hspace=0.15,wspace=0.15)

plot_ind = 1

# positive
list_of_target_cols = ['spikes AUC', 'soma explained variance %','spikes D prime']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(2,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col])
        x,y = keep_only_strictly_changing_values(x, y, inreasing=True)

        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names, loc='lower right')
    plot_ind = plot_ind + 1

# negative curves
list_of_target_cols = ['soma RMSE']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(2,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col], use_min=True)
        x,y = keep_only_strictly_changing_values(x, y, inreasing=False)
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names, loc='upper right')
    plot_ind = plot_ind + 1
    
#%% delve deeper
    
plt.close('all')

#%% show accuracy vs depth graph (condition also on architecture type (FCN/TCN))

x_axis_name = 'NN_depth'
fontsize = 20
use_log_scale = False
type_columns = ['biophysical_model_type','NN_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]
max_cols = ['spikes D prime', 'spikes AUC @ 1% FP', 'spikes TP @ 0.1% FP',
            'soma explained variance %', 'spikes AUC', 'spikes TP @ 0.25% FP']
min_cols = ['soma MAE', 'soma RMSE']

# go over all unique options, extract them from the database, and store the best values for each metric
X_vs_depth_curve_dicts = {}
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type'] + '_' + type_option['NN_model_type']

    print(curve_key)
    
    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]

    sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
    sorted_results_subset_df_max = sorted_results_subset_df.cummax()
    sorted_results_subset_df_min = sorted_results_subset_df.cummin()
    
    # max cols
    sorted_results_subset_df.loc[:,max_cols] = sorted_results_subset_df_max.loc[:,max_cols]
    # min cols
    sorted_results_subset_df.loc[:,min_cols] = sorted_results_subset_df_min.loc[:,min_cols]
        
    # assemble dict
    X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
    
    
plt.figure(figsize=(17,17))
plt.suptitle('network performace as function of %s' %(x_axis_name), fontsize=fontsize)
plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)

plot_ind = 1

# positive
list_of_target_cols = ['spikes D prime', 'spikes AUC', 'spikes TP @ 0.25% FP',  'soma explained variance %']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(3,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col])
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names)
    plot_ind = plot_ind + 1
    
# negative curves
list_of_target_cols = ['soma MAE', 'soma RMSE']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(3,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col], use_min=True)
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names)
    plot_ind = plot_ind + 1


#%% show accuracy vs width graph

x_axis_name = 'NN_width'
fontsize = 20
use_log_scale = False
type_columns = ['biophysical_model_type','NN_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]
max_cols = ['spikes D prime', 'spikes AUC @ 1% FP', 'spikes TP @ 0.1% FP',
            'soma explained variance %', 'spikes AUC', 'spikes TP @ 0.25% FP']
min_cols = ['soma MAE', 'soma RMSE']

# go over all unique options, extract them from the database, and store the best values for each metric
X_vs_depth_curve_dicts = {}
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type'] + '_' + type_option['NN_model_type']

    print(curve_key)
    
    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]

    sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
    sorted_results_subset_df_max = sorted_results_subset_df.cummax()
    sorted_results_subset_df_min = sorted_results_subset_df.cummin()
    
    # max cols
    sorted_results_subset_df.loc[:,max_cols] = sorted_results_subset_df_max.loc[:,max_cols]
    # min cols
    sorted_results_subset_df.loc[:,min_cols] = sorted_results_subset_df_min.loc[:,min_cols]
        
    # assemble dict
    X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
    
    
plt.figure(figsize=(17,17))
plt.suptitle('network performace as function of %s' %(x_axis_name), fontsize=fontsize)
plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)

plot_ind = 1

# positive
list_of_target_cols = ['spikes D prime', 'spikes AUC', 'spikes TP @ 0.25% FP',  'soma explained variance %']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(3,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col])
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names)
    plot_ind = plot_ind + 1
    
# negative curves
list_of_target_cols = ['soma MAE', 'soma RMSE']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(3,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col], use_min=True)
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names)
    plot_ind = plot_ind + 1


#%% show accuracy vs time window size graph

x_axis_name = 'NN_input_time_window'
fontsize = 20
use_log_scale = False
type_columns = ['biophysical_model_type','NN_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]
max_cols = ['spikes D prime', 'spikes AUC @ 1% FP', 'spikes TP @ 0.1% FP',
            'soma explained variance %', 'spikes AUC', 'spikes TP @ 0.25% FP']
min_cols = ['soma MAE', 'soma RMSE']

# go over all unique options, extract them from the database, and store the best values for each metric
X_vs_depth_curve_dicts = {}
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type'] + '_' + type_option['NN_model_type']

    print(curve_key)
    
    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]

    sorted_results_subset_df = results_subset_df.sort_values(by=[x_axis_name])
    sorted_results_subset_df_max = sorted_results_subset_df.cummax()
    sorted_results_subset_df_min = sorted_results_subset_df.cummin()
    
    # max cols
    sorted_results_subset_df.loc[:,max_cols] = sorted_results_subset_df_max.loc[:,max_cols]
    # min cols
    sorted_results_subset_df.loc[:,min_cols] = sorted_results_subset_df_min.loc[:,min_cols]
        
    # assemble dict
    X_vs_depth_curve_dicts[curve_key] = sorted_results_subset_df
    
    
plt.figure(figsize=(17,17))
plt.suptitle('network performace as function of %s' %(x_axis_name), fontsize=fontsize)
plt.subplots_adjust(left=0.06,right=0.97,bottom=0.06,top=0.94,hspace=0.15,wspace=0.15)

plot_ind = 1

# positive
list_of_target_cols = ['spikes D prime', 'spikes AUC', 'spikes TP @ 0.25% FP',  'soma explained variance %']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(3,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col])
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names)
    plot_ind = plot_ind + 1
    
#  negative curves
list_of_target_cols = ['soma MAE', 'soma RMSE']
for k, target_col in enumerate(list_of_target_cols):
    plt.subplot(3,2,plot_ind); plt.title('%s vs %s' %(target_col,x_axis_name))
    plt.xlabel(x_axis_name); plt.ylabel(target_col)
    
    list_of_curve_names = []
    for curve_key, X_vs_depth_df in X_vs_depth_curve_dicts.items():
        list_of_curve_names.append(curve_key)
        
        x,y = keep_duplicate_x_with_extreeme_y(X_vs_depth_df[x_axis_name], X_vs_depth_df[target_col], use_min=True)
        if use_log_scale:
            plt.semilogx(x,y)
        else:
            plt.plot(x,y)
        
    plt.legend(list_of_curve_names)
    plot_ind = plot_ind + 1

#%% create pairwise combinations scatter plots

type_columns = ['biophysical_model_type','NN_model_type']
unique_type_options = best_results_dataframe.loc[:,type_columns].drop_duplicates().reset_index(drop=True)
num_unique_options = unique_type_options.shape[0]

option_colors = ['red','blue','orange','green','purple','magenta']
option_colors = ['cyan','green','red','orange','blue','yellow']

label_handles = []
# go over all unique options, extract them from the database, and store the best values for each metric
plt.figure(figsize=(20,10))
for k in range(num_unique_options):
    type_option = unique_type_options.loc[k,:]
    curve_key = type_option['biophysical_model_type'] + '_' + type_option['NN_model_type']
    print(curve_key)
    
    option_rows = np.all((best_results_dataframe[type_columns] == type_option), axis=1)
    results_subset_df = best_results_dataframe.loc[option_rows,:]
    num_rows = results_subset_df.shape[0]

    plt.subplot(1,3,1); plt.title('width vs time window size')
    plt.scatter(results_subset_df['NN_input_time_window'] + 4.0 * np.random.randn(num_rows),
                results_subset_df['NN_width'] + 2.0 * np.random.randn(num_rows), c=option_colors[k], alpha=0.8)
    plt.xlabel('T'); plt.ylabel('W'); plt.xlim(0,200); plt.ylim(0,150)
    
    plt.subplot(1,3,2); plt.title('width vs depth')
    plt.scatter(results_subset_df['NN_depth'] + 0.2 * np.random.randn(num_rows),
                results_subset_df['NN_width'] + 2.0 * np.random.randn(num_rows), c=option_colors[k], alpha=0.8)
    plt.xlabel('D'); plt.ylabel('W'); plt.xlim(0,9); plt.ylim(0,150)

    plt.subplot(1,3,3); plt.title('depth vs time window size')
    plt.scatter(results_subset_df['NN_depth'] + 0.2 * np.random.randn(num_rows),
                results_subset_df['NN_input_time_window'] + 4.0 * np.random.randn(num_rows), c=option_colors[k], alpha=0.8)
    plt.xlabel('D'); plt.ylabel('T'); plt.xlim(0,9); plt.ylim(0,200)
    
    curr_patch = mpatches.Patch(color=option_colors[k], label=curve_key)
    label_handles.append(curr_patch)
    
plt.legend(handles=label_handles, loc='lower right')

#%%







================================================================================
================================================================================
L5PC_NEURON_simulation/mods/ProbAMPANMDA_3.mod:
===============================================
TITLE AMPA and NMDA receptor with presynaptic short-term plasticity 


COMMENT
AMPA and NMDA receptor conductance using a dual-exponential profile
presynaptic short-term plasticity based on Fuhrmann et al. 2002
Implemented by Srikanth Ramaswamy, Blue Brain Project, July 2009
Etay: changed weight to be equal for NMDA and AMPA, gmax accessible in Neuron

ENDCOMMENT


NEURON {

    POINT_PROCESS ProbAMPANMDA3  
    RANGE tau_r_AMPA, tau_d_AMPA, tau_r_NMDA, tau_d_NMDA
    RANGE Use, u, Dep, Fac, u0, weight_NMDA
    RANGE i, i_AMPA, i_NMDA, g_AMPA, g_NMDA, e, gmax
    NONSPECIFIC_CURRENT i_AMPA,i_NMDA
	POINTER rng
}

PARAMETER {

    tau_r_AMPA = 0.2   (ms)  : dual-exponential conductance profile
    tau_d_AMPA = 1.7    (ms)  : IMPORTANT: tau_r < tau_d
	tau_r_NMDA = 0.29   (ms) : dual-exponential conductance profile
    tau_d_NMDA = 43     (ms) : IMPORTANT: tau_r < tau_d
    Use = 1.0   (1)   : Utilization of synaptic efficacy (just initial values! Use, Dep and Fac are overwritten by BlueBuilder assigned values) 
    Dep = 100   (ms)  : relaxation time constant from depression
    Fac = 10   (ms)  :  relaxation time constant from facilitation
    e = 0     (mV)  : AMPA and NMDA reversal potential
	mg = 1   (mM)  : initial concentration of mg2+
    mggate
    gmax = .001 (uS) : weight conversion factor (from nS to uS)
    u0 = 0 :initial value of u, which is the running value of Use
}

COMMENT
The Verbatim block is needed to generate random nos. from a uniform distribution between 0 and 1 
for comparison with Pr to decide whether to activate the synapse or not
ENDCOMMENT
   
VERBATIM

#include<stdlib.h>
#include<stdio.h>
#include<math.h>

double nrn_random_pick(void* r);
void* nrn_random_arg(int argpos);

ENDVERBATIM
  

ASSIGNED {
    v (mV)
    i (nA)
    i_AMPA (nA)
    i_NMDA (nA)
    g_AMPA (uS)
    g_NMDA (uS)
    factor_AMPA
    factor_NMDA
    rng
    weight_NMDA
}

STATE {
    A_AMPA       : AMPA state variable to construct the dual-exponential profile - decays with conductance tau_r_AMPA
    B_AMPA       : AMPA state variable to construct the dual-exponential profile - decays with conductance tau_d_AMPA
    A_NMDA       : NMDA state variable to construct the dual-exponential profile - decays with conductance tau_r_NMDA
    B_NMDA       : NMDA state variable to construct the dual-exponential profile - decays with conductance tau_d_NMDA
}

INITIAL{

    LOCAL tp_AMPA, tp_NMDA
        
	A_AMPA = 0
    B_AMPA = 0
	
	A_NMDA = 0
	B_NMDA = 0
        
	tp_AMPA = (tau_r_AMPA*tau_d_AMPA)/(tau_d_AMPA-tau_r_AMPA)*log(tau_d_AMPA/tau_r_AMPA) :time to peak of the conductance
	tp_NMDA = (tau_r_NMDA*tau_d_NMDA)/(tau_d_NMDA-tau_r_NMDA)*log(tau_d_NMDA/tau_r_NMDA) :time to peak of the conductance
        
	factor_AMPA = -exp(-tp_AMPA/tau_r_AMPA)+exp(-tp_AMPA/tau_d_AMPA) :AMPA Normalization factor - so that when t = tp_AMPA, gsyn = gpeak
    factor_AMPA = 1/factor_AMPA
	
	factor_NMDA = -exp(-tp_NMDA/tau_r_NMDA)+exp(-tp_NMDA/tau_d_NMDA) :NMDA Normalization factor - so that when t = tp_NMDA, gsyn = gpeak
    factor_NMDA = 1/factor_NMDA
   
}

BREAKPOINT {

    SOLVE state METHOD cnexp
    
	mggate = 1 / (1 + exp(0.08  (/mV) * -(v)) * (mg / 3.57 (mM)))          :mggate kinetics - Jahr & Stevens 1990
    g_AMPA = gmax*(B_AMPA-A_AMPA)               :compute time varying conductance as the difference of state variables B_AMPA and A_AMPA
	g_NMDA = gmax*(B_NMDA-A_NMDA) * mggate      :compute time varying conductance as the difference of state variables B_NMDA and A_NMDA and mggate kinetics
    i_AMPA = g_AMPA*(v-e)       :compute the AMPA driving force based on the time varying conductance, membrane potential, and AMPA reversal
	i_NMDA = g_NMDA*(v-e)       :compute the NMDA driving force based on the time varying conductance, membrane potential, and NMDA reversal
	i = i_AMPA + i_NMDA
}

DERIVATIVE state{
    A_AMPA' = -A_AMPA/tau_r_AMPA
    B_AMPA' = -B_AMPA/tau_d_AMPA
	A_NMDA' = -A_NMDA/tau_r_NMDA
    B_NMDA' = -B_NMDA/tau_d_NMDA
}


NET_RECEIVE (weight,weight_AMPA, weight_NMDA, Pv, Pr, u, tsyn (ms)){
	
	weight_AMPA = weight
	weight_NMDA = weight
	:printf("NMDA weight = %g\n", weight_NMDA)

        INITIAL{
                Pv=1
                u=u0
                tsyn=t
            }

        : calc u at event-
        if (Fac > 0) {
                u = u*exp(-(t - tsyn)/Fac) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           } else {
                  u = Use  
           } 
           if(Fac > 0){
                  u = u + Use*(1-u) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           }    

        
            Pv  = 1 - (1-Pv) * exp(-(t-tsyn)/Dep) :Probability Pv for a vesicle to be available for release, analogous to the pool of synaptic
                                                 :resources available for release in the deterministic model. Eq. 3 in Fuhrmann et al.
            Pr  = u * Pv                         :Pr is calculated as Pv * u (running value of Use)
            Pv  = Pv - u * Pv                    :update Pv as per Eq. 3 in Fuhrmann et al.
            :printf("Pv = %g\n", Pv)
            :printf("Pr = %g\n", Pr)
            tsyn = t
                
		   if (erand() < Pr){
	
                    A_AMPA = A_AMPA + weight_AMPA*factor_AMPA
                    B_AMPA = B_AMPA + weight_AMPA*factor_AMPA
		    A_NMDA = A_NMDA + weight_NMDA*factor_NMDA
                    B_NMDA = B_NMDA + weight_NMDA*factor_NMDA

                }
}

PROCEDURE setRNG() {
VERBATIM
    {
        /**
         * This function takes a NEURON Random object declared in hoc and makes it usable by this mod file.
         * Note that this method is taken from Brett paper as used by netstim.hoc and netstim.mod
         * which points out that the Random must be in negexp(1) mode
         */
        void** pv = (void**)(&_p_rng);
        if( ifarg(1)) {
            *pv = nrn_random_arg(1);
        } else {
            *pv = (void*)0;
        }
    }
ENDVERBATIM
}

FUNCTION erand() {
VERBATIM
	    //FILE *fi;
        double value;
        if (_p_rng) {
                /*
                :Supports separate independent but reproducible streams for
                : each instance. However, the corresponding hoc Random
                : distribution MUST be set to Random.negexp(1)
                */
                value = nrn_random_pick(_p_rng);
		        //fi = fopen("RandomStreamMCellRan4.txt", "w");
                //fprintf(fi,"random stream for this simulation = %lf\n",value);
                //printf("random stream for this simulation = %lf\n",value);
                return value;
        }else{
ENDVERBATIM
                : the old standby. Cannot use if reproducible parallel sim
                : independent of nhost or which host this instance is on
                : is desired, since each instance on this cpu draws from
                : the same stream
                erand = exprand(1)
VERBATIM
        }
ENDVERBATIM
        erand = value
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/Im.mod:
===================================
:Reference : :		Adams et al. 1982 - M-currents and other potassium currents in bullfrog sympathetic neurones
:Comment: corrected rates using q10 = 2.3, target temperature 34, orginal 21

NEURON	{
	SUFFIX Im
	USEION k READ ek WRITE ik
	RANGE gImbar, gIm, ik
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gImbar = 0.00001 (S/cm2) 
}

ASSIGNED	{
	v	(mV)
	ek	(mV)
	ik	(mA/cm2)
	gIm	(S/cm2)
	mInf
	mTau
	mAlpha
	mBeta
}

STATE	{ 
	m
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gIm = gImbar*m
	ik = gIm*(v-ek)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
}

INITIAL{
	rates()
	m = mInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)

	UNITSOFF
		mAlpha = 3.3e-3*exp(2.5*0.04*(v - -35))
		mBeta = 3.3e-3*exp(-2.5*0.04*(v - -35))
		mInf = mAlpha/(mAlpha + mBeta)
		mTau = (1/(mAlpha + mBeta))/qt
	UNITSON
}

================================================================================
================================================================================
main_figure_replication.py:
===========================
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import matplotlib.patches as mpatches
from matplotlib.lines import Line2D
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import glob
from skimage.transform import resize
import time
import pickle
import imageio
from scipy import signal
from keras.models import Model, load_model
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import mean_absolute_error as MAE
from sklearn.metrics import explained_variance_score
from sklearn.metrics import roc_curve, auc

matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['svg.fonttype'] = 'none'

save_figures = True
all_file_endings_to_use = ['.png', '.pdf', '.svg']

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit

# ALSO NOTE: prints are for logging purposes

#%% helper functions


def bin2dict(bin_spikes_matrix):
    spike_row_inds, spike_times = np.nonzero(bin_spikes_matrix)
    row_inds_spike_times_map = {}
    for row_ind, syn_time in zip(spike_row_inds,spike_times):
        if row_ind in row_inds_spike_times_map.keys():
            row_inds_spike_times_map[row_ind].append(syn_time)
        else:
            row_inds_spike_times_map[row_ind] = [syn_time]

    return row_inds_spike_times_map


def dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):
    
    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')
    for row_ind in row_inds_spike_times_map.keys():
        for spike_time in row_inds_spike_times_map[row_ind]:
            bin_spikes_matrix[row_ind,spike_time] = 1.0
    
    return bin_spikes_matrix


def parse_sim_experiment_file(sim_experiment_file):
    
    print('-----------------------------------------------------------------')
    print("loading file: '" + sim_experiment_file.split("\\")[-1] + "'")
    loading_start_time = time.time()
    experiment_dict = pickle.load(open(sim_experiment_file, "rb" ), encoding='latin1')
    
    # gather params
    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
    num_segments    = len(experiment_dict['Params']['allSegmentsType'])
    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000
    num_ex_synapses  = num_segments
    num_inh_synapses = num_segments
    num_synapses = num_ex_synapses + num_inh_synapses
    
    # collect X, y_spike, y_soma
    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')
    y_spike = np.zeros((sim_duration_ms,num_simulations))
    y_soma  = np.zeros((sim_duration_ms,num_simulations))
    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)
        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)
        X[:,:,k] = np.vstack((X_ex,X_inh))
        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)
        y_spike[spike_times,k] = 1.0
        y_soma[:,k] = sim_dict['somaVoltageLowRes']

    loading_duration_sec = time.time() - loading_start_time
    print('loading took %.3f seconds' %(loading_duration_sec))
    print('-----------------------------------------------------------------')

    return X, y_spike, y_soma


def parse_multiple_sim_experiment_files(sim_experiment_files):
    
    for k, sim_experiment_file in enumerate(sim_experiment_files):
        X_curr, y_spike_curr, y_soma_curr = parse_sim_experiment_file(sim_experiment_file)
        
        if k == 0:
            X       = X_curr
            y_spike = y_spike_curr
            y_soma  = y_soma_curr
        else:
            X       = np.dstack((X,X_curr))
            y_spike = np.hstack((y_spike,y_spike_curr))
            y_soma  = np.hstack((y_soma,y_soma_curr))

    return X, y_spike, y_soma


def calc_AUC_at_desired_FP(y_test, y_test_hat, desired_false_positive_rate=0.01):
    fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())

    linear_spaced_FPR = np.linspace(0,1, num=20000)
    linear_spaced_TPR = np.interp(linear_spaced_FPR, fpr, tpr)
    
    desired_fp_ind = min(max(1, np.argmin(abs(linear_spaced_FPR - desired_false_positive_rate))), linear_spaced_TPR.shape[0] - 1)
    
    return linear_spaced_TPR[:desired_fp_ind].mean()


def calc_TP_at_desired_FP(y_test, y_test_hat, desired_false_positive_rate=0.0025):
    fpr, tpr, thresholds = roc_curve(y_test.ravel(), y_test_hat.ravel())
    
    desired_fp_ind = np.argmin(abs(fpr - desired_false_positive_rate))
    if desired_fp_ind == 0:
        desired_fp_ind = 1

    return tpr[desired_fp_ind]


def exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat, desired_FP_list=[0.0025,0.0100]):
    
    # evaluate the model and save the results
    print('----------------------------------------------------------------------------------------')
    print('calculating key results...')
    
    evaluation_start_time = time.time()
    
    # store results in the hyper param dict and return it
    evaluations_results_dict = {}
    
    for desired_FP in desired_FP_list:
        TP_at_desired_FP  = calc_TP_at_desired_FP(y_spikes_GT, y_spikes_hat, desired_false_positive_rate=desired_FP)
        AUC_at_desired_FP = calc_AUC_at_desired_FP(y_spikes_GT, y_spikes_hat, desired_false_positive_rate=desired_FP)
        print('-----------------------------------')
        print('TP  at %.4f FP rate = %.4f' %(desired_FP, TP_at_desired_FP))
        print('AUC at %.4f FP rate = %.4f' %(desired_FP, AUC_at_desired_FP))
        TP_key_string = 'TP @ %.4f FP' %(desired_FP)
        evaluations_results_dict[TP_key_string] = TP_at_desired_FP
    
        AUC_key_string = 'AUC @ %.4f FP' %(desired_FP)
        evaluations_results_dict[AUC_key_string] = AUC_at_desired_FP
    
    print('--------------------------------------------------')
    fpr, tpr, thresholds = roc_curve(y_spikes_GT.ravel(), y_spikes_hat.ravel())
    AUC_score = auc(fpr, tpr)
    print('AUC = %.4f' %(AUC_score))
    print('--------------------------------------------------')
    
    soma_explained_variance_percent = 100.0 * explained_variance_score(y_soma_GT.ravel(), y_soma_hat.ravel())
    soma_RMSE = np.sqrt(MSE(y_soma_GT.ravel(), y_soma_hat.ravel()))
    soma_MAE  = MAE(y_soma_GT.ravel(), y_soma_hat.ravel())
    
    print('--------------------------------------------------')
    print('soma explained_variance percent = %.2f%s' %(soma_explained_variance_percent, '%'))
    print('soma RMSE = %.3f [mV]' %(soma_RMSE))
    print('soma MAE = %.3f [mV]' %(soma_MAE))
    print('--------------------------------------------------')
    
    evaluations_results_dict['AUC'] = AUC_score
    evaluations_results_dict['soma_explained_variance_percent'] = soma_explained_variance_percent
    evaluations_results_dict['soma_RMSE'] = soma_RMSE
    evaluations_results_dict['soma_MAE'] = soma_MAE
    
    evaluation_duration_min = (time.time() - evaluation_start_time) / 60
    print('finished evaluation. time took to evaluate results is %.2f minutes' %(evaluation_duration_min))
    print('----------------------------------------------------------------------------------------')
    
    return evaluations_results_dict


def filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat, desired_FP_list=[0.0025,0.0100],
                                    ignore_time_at_start_ms=500, num_spikes_per_sim=[0,24]):

    time_points_to_eval = np.arange(y_spikes_GT.shape[1]) >= ignore_time_at_start_ms
    simulations_to_eval = np.logical_and((y_spikes_GT.sum(axis=1) >= num_spikes_per_sim[0]),(y_spikes_GT.sum(axis=1) <= num_spikes_per_sim[1]))
    
    print('total amount of simualtions is %d' %(y_spikes_GT.shape[0]))
    print('percent of simulations kept = %.2f%s' %(100 * simulations_to_eval.mean(),'%'))
    
    y_spikes_GT_to_eval  = y_spikes_GT[simulations_to_eval,:][:,time_points_to_eval]
    y_spikes_hat_to_eval = y_spikes_hat[simulations_to_eval,:][:,time_points_to_eval]
    y_soma_GT_to_eval    = y_soma_GT[simulations_to_eval,:][:,time_points_to_eval]
    y_soma_hat_to_eval   = y_soma_hat[simulations_to_eval,:][:,time_points_to_eval]
    
    return exctract_key_results(y_spikes_GT_to_eval, y_spikes_hat_to_eval, y_soma_GT_to_eval, y_soma_hat_to_eval, desired_FP_list=desired_FP_list)


#%% evel scrip params

model_string = 'NMDA'
# model_string = 'AMPA'
# model_string = 'AMPA_SK'

# model_size = 'small'
model_size = 'large'

models_dir = '/Reseach/Single_Neuron_InOut/models/best_models/'
data_dir   = '/Reseach/Single_Neuron_InOut/data/'

if model_string == 'NMDA':
    valid_data_dir     = data_dir + 'L5PC_NMDA_valid/'
    test_data_dir      = data_dir + 'L5PC_NMDA_test/'
    output_figures_dir = '/Reseach/Single_Neuron_InOut/figures/NMDA/'
    
    if model_size == 'small':
        model_dir = models_dir + '/NMDA_FCN__DxWxT_1x128x43/'
        NN_illustration_filename = '/Reseach/Single_Neuron_InOut/figures/NN_Illustrations/FCN_1_layer.png'
    elif model_size == 'large':
        model_dir = models_dir + '/NMDA_TCN__DxWxT_7x128x153/'
        NN_illustration_filename = '/Reseach/Single_Neuron_InOut/figures/NN_Illustrations/TCN_7_layers.png'

elif model_string == 'AMPA':
    valid_data_dir     = data_dir + 'L5PC_AMPA_valid/'
    test_data_dir      = data_dir + 'L5PC_AMPA_test/'
    output_figures_dir = '/Reseach/Single_Neuron_InOut/figures/AMPA/'
    
    if model_size == 'small':
        model_dir = models_dir + '/AMPA_FCN__DxWxT_1x128x43/'
        NN_illustration_filename = '/Reseach/Single_Neuron_InOut/figures/NN_Illustrations/FCN_1_layer.png'
    elif model_size == 'large':
        model_dir = models_dir + '/AMPA_TCN__DxWxT_4x64x120/'
        NN_illustration_filename = '/Reseach/Single_Neuron_InOut/figures/NN_Illustrations/TCN_4_layers.png'

elif model_string == 'AMPA_SK':
    valid_data_dir     = data_dir + 'L5PC_AMPA_SK_valid/'
    test_data_dir      = data_dir + 'L5PC_AMPA_SK_test/'
    output_figures_dir = '/Reseach/Single_Neuron_InOut/figures/AMPA_SK/'

    if model_size == 'small':
        model_dir = models_dir + '/AMPA_SK_FCN__DxWxT_1x128x46/'
        NN_illustration_filename = '/Reseach/Single_Neuron_InOut/figures/NN_Illustrations/FCN_1_layer.png'
    elif model_size == 'large':
        model_dir = models_dir + '/AMPA_SK_TCN__DxWxT_4x64x120/'
        NN_illustration_filename = '/Reseach/Single_Neuron_InOut/figures/NN_Illustrations/TCN_4_layers.png'

print('-----------------------------------------------')
print('finding data and model')
print('-----------------------------------------------')

valid_files = sorted(glob.glob(valid_data_dir + '*_128_simulationRuns*_6_secDuration_*'))
test_files  = sorted(glob.glob(test_data_dir  + '*_128_simulationRuns*_6_secDuration_*'))

model_filename = glob.glob(model_dir + '*_model.h5')[0]
model_metadata_filename = glob.glob(model_dir + '*_training.pickle')[0]

print('model found          : "%s"' %(model_filename.split('/')[-1]))
print('model metadata found : "%s"' %(model_metadata_filename.split('/')[-1]))
print('number of validation files is %d' %(len(valid_files)))
print('number of test files is %d' %(len(test_files)))
print('-----------------------------------------------')

#%% load valid and test datasets

print('----------------------------------------------------------------------------------------')
print('loading testing files...')
test_file_loading_start_time = time.time()

v_threshold = -55

# load test data
X_test , y_spike_test , y_soma_test  = parse_multiple_sim_experiment_files(test_files)
y_soma_test[y_soma_test > v_threshold] = v_threshold

test_file_loading_duration_min = (time.time() - test_file_loading_start_time) / 60
print('time took to load data is %.3f minutes' %(test_file_loading_duration_min))
print('----------------------------------------------------------------------------------------')

#%% load morphology

morphology_folder = '/Reseach/Single_Neuron_InOut/morphology/'
morphology_filename = morphology_folder + 'morphology_dict.pickle'
morphology_dict = pickle.load(open(morphology_filename, "rb" ), encoding='latin1')

allSectionsLength                  = morphology_dict['all_sections_length']
allSections_DistFromSoma           = morphology_dict['all_sections_distance_from_soma']
allSegmentsLength                  = morphology_dict['all_segments_length']
allSegmentsType                    = morphology_dict['all_segments_type']
allSegments_DistFromSoma           = morphology_dict['all_segments_distance_from_soma']
allSegments_SectionDistFromSoma    = morphology_dict['all_segments_section_distance_from_soma']
allSegments_SectionInd             = morphology_dict['all_segments_section_index']
allSegments_seg_ind_within_sec_ind = morphology_dict['all_segments_segment_index_within_section_index']

all_basal_section_coords  = morphology_dict['all_basal_section_coords']
all_basal_segment_coords  = morphology_dict['all_basal_segment_coords']
all_apical_section_coords = morphology_dict['all_apical_section_coords']
all_apical_segment_coords = morphology_dict['all_apical_segment_coords']

# show some colored DVTs with morphology colored with same segment color and soma voltage at the bottom
list_of_basal_section_inds  = np.unique(sorted([x[0] for x in list(all_basal_segment_coords.keys())]))
list_of_apical_section_inds = np.unique(sorted([x[0] for x in list(all_apical_segment_coords.keys())]))

seg_ind_to_xyz_coords_map = {}
seg_ind_to_sec_ind_map = {}
for k in range(len(allSegmentsType)):
    curr_segment_ind = allSegments_seg_ind_within_sec_ind[k]
    if allSegmentsType[k] == 'basal':
        curr_section_ind = allSegments_SectionInd[k]
        seg_ind_to_xyz_coords_map[k] = all_basal_segment_coords[(curr_section_ind,curr_segment_ind)]
        seg_ind_to_sec_ind_map[k] = ('basal', curr_section_ind)
    elif allSegmentsType[k] == 'apical':
        curr_section_ind = allSegments_SectionInd[k] - len(list_of_basal_section_inds)
        seg_ind_to_xyz_coords_map[k] = all_apical_segment_coords[(curr_section_ind,curr_segment_ind)]
        seg_ind_to_sec_ind_map[k] = ('apical', curr_section_ind)
    else:
        print('error!')

# plot 3 color image of the morphology
plt.close('all')

num_segments = 639
basal_cutoff = 262
tuft_cutoff  = [366,559]

apical_color = 'g'
oblique_color = 'orange'
basal_color = 'm'

basal_syn_inds    = np.arange(basal_cutoff)
oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])

all_basal_section_inds   = np.unique([seg_ind_to_sec_ind_map[x][1] for x in basal_syn_inds])
all_oblique_section_inds = np.unique([seg_ind_to_sec_ind_map[x][1] for x in oblique_syn_inds])
all_tuft_section_inds    = np.unique([seg_ind_to_sec_ind_map[x][1] for x in tuft_syn_inds])

# remove overlaping sections if any
all_oblique_section_inds = np.array(list(set(all_oblique_section_inds) - set(all_tuft_section_inds)))

# collect all basal, oblique, tuft segments
width_mult_factor = 1.2

plt.figure(figsize=(9,15))

# basal segments
for key in basal_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    plt.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=basal_color)

# oblique segments
for key in oblique_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    plt.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=oblique_color)

# tuft segments
for key in tuft_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    plt.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=apical_color)

# add black soma
plt.scatter(x=46.0,y=15.8,s=180,c='k', zorder=100)
plt.xlim(-180,235)
plt.ylim(-210,1200)
plt.axis('off')

if save_figures:
    figure_name = '%s__morphology' %(model_dir.split('/')[-2])
    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            plt.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            plt.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% load model
print('----------------------------------------------------------------------------------------')
print('loading model "%s"' %(model_filename.split('/')[-1]))

model_loading_start_time = time.time()

temporal_conv_net = load_model(model_filename)
temporal_conv_net.summary()

input_window_size = temporal_conv_net.input_shape[1]

# load metadata pickle file
model_metadata_dict = pickle.load(open(model_metadata_filename, "rb" ), encoding='latin1')

architecture_dict = model_metadata_dict['architecture_dict']
time_window_T = (np.array(architecture_dict['filter_sizes_per_layer']) - 1).sum() + 1
overlap_size = min(max(time_window_T + 1, min(150, input_window_size - 50)), 250)

print('overlap_size = %d' %(overlap_size))
print('time_window_T = %d' %(time_window_T))
print('input shape: %s' %(str(temporal_conv_net.get_input_shape_at(0))))

model_loading_duration_min = (time.time() - model_loading_start_time) / 60
print('time took to load model is %.3f minutes' %(model_loading_duration_min))
print('----------------------------------------------------------------------------------------')

#%% create spike predictions on test set

print('----------------------------------------------------------------------------------------')
print('predicting using model...')

prediction_start_time = time.time()

y_train_soma_bias = -67.7

X_test_for_TCN = np.transpose(X_test,axes=[2,1,0])
y1_test_for_TCN = y_spike_test.T[:,:,np.newaxis]
y2_test_for_TCN = y_soma_test.T[:,:,np.newaxis] - y_train_soma_bias

y1_test_for_TCN_hat = np.zeros(y1_test_for_TCN.shape)
y2_test_for_TCN_hat = np.zeros(y2_test_for_TCN.shape)

num_test_splits = int(2 + (X_test_for_TCN.shape[1] - input_window_size) / (input_window_size - overlap_size))

for k in range(num_test_splits):
    start_time_ind = k * (input_window_size - overlap_size)
    end_time_ind   = start_time_ind + input_window_size
    
    curr_X_test_for_TCN = X_test_for_TCN[:,start_time_ind:end_time_ind,:]
    
    if curr_X_test_for_TCN.shape[1] < input_window_size:
        padding_size = input_window_size - curr_X_test_for_TCN.shape[1]
        X_pad = np.zeros((curr_X_test_for_TCN.shape[0],padding_size,curr_X_test_for_TCN.shape[2]))
        curr_X_test_for_TCN = np.hstack((curr_X_test_for_TCN,X_pad))
        
    curr_y1_test_for_TCN, curr_y2_test_for_TCN, _ = temporal_conv_net.predict(curr_X_test_for_TCN)

    if k == 0:
        y1_test_for_TCN_hat[:,:end_time_ind,:] = curr_y1_test_for_TCN
        y2_test_for_TCN_hat[:,:end_time_ind,:] = curr_y2_test_for_TCN
    elif k == (num_test_splits - 1):
        t0 = start_time_ind + overlap_size
        duration_to_fill = y1_test_for_TCN_hat.shape[1] - t0
        y1_test_for_TCN_hat[:,t0:,:] = curr_y1_test_for_TCN[:,overlap_size:(overlap_size + duration_to_fill),:]
        y2_test_for_TCN_hat[:,t0:,:] = curr_y2_test_for_TCN[:,overlap_size:(overlap_size + duration_to_fill),:]
    else:
        t0 = start_time_ind + overlap_size
        y1_test_for_TCN_hat[:,t0:end_time_ind,:] = curr_y1_test_for_TCN[:,overlap_size:,:]
        y2_test_for_TCN_hat[:,t0:end_time_ind,:] = curr_y2_test_for_TCN[:,overlap_size:,:]

# zero score the prediction and align it with the actual test
s_dst = y2_test_for_TCN.std()
m_dst = y2_test_for_TCN.mean()

s_src = y2_test_for_TCN_hat.std()
m_src = y2_test_for_TCN_hat.mean()

y2_test_for_TCN_hat = (y2_test_for_TCN_hat - m_src) / s_src
y2_test_for_TCN_hat = s_dst * y2_test_for_TCN_hat + m_dst

# convert to simple (num_simulations, num_time_points) format
y_spikes_GT  = y1_test_for_TCN[:,:,0]
y_spikes_hat = y1_test_for_TCN_hat[:,:,0]
y_soma_GT    = y2_test_for_TCN[:,:,0]
y_soma_hat   = y2_test_for_TCN_hat[:,:,0]

prediction_duration_min = (time.time() - prediction_start_time) / 60
print('finished prediction. time took to predict is %.2f minutes' %(prediction_duration_min))
print('----------------------------------------------------------------------------------------')

#%% evaluate the model and save the results

print('----------------------------------------------------------------------------------------')
print('calculating key accuracy results...')

saving_start_time = time.time()

desired_FP_list = [0.0001, 0.0005, 0.0010, 0.0015, 0.0020, 0.0025, 0.0050, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.1000]
evaluations_results_dict = {}

ignore_time_at_start_ms = 500
num_spikes_per_sim = [0,18]
filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                          desired_FP_list=desired_FP_list,
                                                                          ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                          num_spikes_per_sim=num_spikes_per_sim)

ignore_time_at_start_ms = 500
num_spikes_per_sim = [0,24]
filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                          desired_FP_list=desired_FP_list,
                                                                          ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                          num_spikes_per_sim=num_spikes_per_sim)

ignore_time_at_start_ms = 500
num_spikes_per_sim = [0,30]
filter_string = 'starting_at_%dms_spikes_in_[%d,%d]_range' %(ignore_time_at_start_ms, num_spikes_per_sim[0], num_spikes_per_sim[1])
evaluations_results_dict[filter_string] = filter_and_exctract_key_results(y_spikes_GT, y_spikes_hat, y_soma_GT, y_soma_hat,
                                                                          desired_FP_list=desired_FP_list,
                                                                          ignore_time_at_start_ms=ignore_time_at_start_ms,
                                                                          num_spikes_per_sim=num_spikes_per_sim)

model_metadata_dict['evaluations_results_dict'] = evaluations_results_dict

print('---------------------------')
print('main results:')
print('---------------------------')
print('TP @ 0.0025 FP = %.3f' %(evaluations_results_dict['starting_at_500ms_spikes_in_[0,24]_range']['TP @ 0.0025 FP']))
print('spikes AUC = %.4f' %(evaluations_results_dict['starting_at_500ms_spikes_in_[0,24]_range']['AUC']))
print('soma explained var = %.2f%s' %(evaluations_results_dict['starting_at_500ms_spikes_in_[0,24]_range']['soma_explained_variance_percent'],'%'))
print('soma RMSE = %.3f [mV]' %(evaluations_results_dict['starting_at_500ms_spikes_in_[0,24]_range']['soma_RMSE']))
print('soma MAE = %.3f [mV]' %(evaluations_results_dict['starting_at_500ms_spikes_in_[0,24]_range']['soma_MAE']))
print('---------------------------')

saving_duration_min = (time.time() - saving_start_time) / 60
print('time took to calculate key prediction accuracy results is %.3f minutes' %(saving_duration_min))
print('----------------------------------------------------------------------------------------')
    
##%% plot the evaluation figures:
# (1) ROC curve of binary prediction
# (2) cross correlation between prediction and GT (illustrating the temporal accuracy of the prediction)
# (3) voltage prediction scatter plot

plt.close('all')

ignore_time_at_start_ms = 500
num_spikes_per_sim = [0,24]

xytick_labels_fontsize = 18
title_fontsize = 29
xylabels_fontsize = 22
legend_fontsize = 18

fig = plt.figure(figsize=(10,11))

time_points_to_eval = np.arange(y_spikes_GT.shape[1]) >= ignore_time_at_start_ms
simulations_to_eval = np.logical_and((y_spikes_GT.sum(axis=1) >= num_spikes_per_sim[0]),(y_spikes_GT.sum(axis=1) <= num_spikes_per_sim[1]))

print('total amount of simualtions is %d' %(y_spikes_GT.shape[0]))
print('percent of simulations kept = %.2f%s' %(100 * simulations_to_eval.mean(),'%'))

y_spikes_GT_to_eval  = y_spikes_GT[simulations_to_eval,:][:,time_points_to_eval]
y_spikes_hat_to_eval = y_spikes_hat[simulations_to_eval,:][:,time_points_to_eval]
y_soma_GT_to_eval    = y_soma_GT[simulations_to_eval,:][:,time_points_to_eval]
y_soma_hat_to_eval   = y_soma_hat[simulations_to_eval,:][:,time_points_to_eval]

# ROC curve
desired_false_positive_rate = 0.002

fpr, tpr, thresholds = roc_curve(y_spikes_GT_to_eval.ravel(), y_spikes_hat_to_eval.ravel())

desired_fp_ind = np.argmin(abs(fpr - desired_false_positive_rate))
if desired_fp_ind == 0:
    desired_fp_ind = 1
actual_false_positive_rate = fpr[desired_fp_ind]

AUC_score = auc(fpr, tpr)

print('AUC = %.4f' %(AUC_score))
print('at %.4f FP rate, TP = %.4f' %(actual_false_positive_rate, tpr[desired_fp_ind]))

# cross correlation
half_time_window_size_ms = 50

desired_threshold = thresholds[desired_fp_ind]
ground_truth_output_spikes = y_spikes_GT_to_eval
predicted_output_spikes    = y_spikes_hat_to_eval > desired_threshold
num_test_traces            = y_spikes_GT_to_eval.shape[0]

zero_padding_matrix = np.zeros((num_test_traces,half_time_window_size_ms))
predicted_output_spikes_padded    = np.hstack((zero_padding_matrix,predicted_output_spikes,zero_padding_matrix))
ground_truth_output_spikes_padded = np.hstack((zero_padding_matrix,ground_truth_output_spikes,zero_padding_matrix))

recall_curve = np.zeros(1 + 2 * half_time_window_size_ms)
trace_inds, spike_inds = np.nonzero(ground_truth_output_spikes_padded)
for trace_ind, spike_ind in zip(trace_inds,spike_inds):
    recall_curve += predicted_output_spikes_padded[trace_ind,spike_ind - half_time_window_size_ms:1 + spike_ind + half_time_window_size_ms]
recall_curve /= recall_curve.sum()

filter_cross_corr = True
if filter_cross_corr:
    cc_filter_size = 2
    recall_curve_filtered = signal.convolve(recall_curve, (1.0 / cc_filter_size) * np.ones(cc_filter_size), mode='same')
    recall_curve = 0.5 * recall_curve + 0.5 * recall_curve_filtered

time_axis_cc = np.arange(-half_time_window_size_ms, half_time_window_size_ms + 1)

# voltage scatter plot
num_datapoints_in_scatter = 20000

selected_datapoints = np.random.choice(range(len(y_soma_GT_to_eval.ravel())),size=num_datapoints_in_scatter,replace=False)
selected_GT = y_soma_GT_to_eval.ravel()[selected_datapoints] + 0.02 * np.random.randn(num_datapoints_in_scatter) + y_train_soma_bias
selected_pred = y_soma_hat_to_eval.ravel()[selected_datapoints] + y_train_soma_bias

soma_explained_variance_percent = 100.0 * explained_variance_score(y_soma_GT_to_eval.ravel(), y_soma_hat_to_eval.ravel())
soma_RMSE = np.sqrt(MSE(y_soma_GT_to_eval.ravel(), y_soma_hat_to_eval.ravel()))
soma_MAE  = MAE(y_soma_GT_to_eval.ravel(), y_soma_hat_to_eval.ravel())

print('soma voltage prediction explained variance = %.2f%s' %(soma_explained_variance_percent,'%'))


gs2 = gridspec.GridSpec(5,2)
gs2.update(left=0.15, right=0.85, bottom=0.15, top=0.88, wspace=0.58, hspace=1.1)
a33_left  = plt.subplot(gs2[:2,0])
a33_right = plt.subplot(gs2[:2,1])
ax34      = plt.subplot(gs2[2:,:])

# ROC curve
a33_left.plot(fpr, tpr, c='k')
a33_left.set_xlabel('False alarm rate', fontsize=xylabels_fontsize)
a33_left.set_ylabel('Hit rate', fontsize=xylabels_fontsize)
a33_left.set_ylim(0,1.05)
a33_left.set_xlim(-0.03,1)

a33_left.spines['top'].set_visible(False)
a33_left.spines['right'].set_visible(False)

for tick_label in (a33_left.get_xticklabels() + a33_left.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

a33_left.set_xticks([0.0,0.5,1.0])
a33_left.set_yticks([0.0,0.5,1.0])

left, bottom, width, height = [0.264, 0.68, 0.14, 0.15]
a33_left_inset = fig.add_axes([left, bottom, width, height])
a33_left_inset.plot(fpr, tpr, c='k')
a33_left_inset.set_ylim(0,1.05)
a33_left_inset.set_xlim(-0.001,0.05)
a33_left_inset.spines['top'].set_visible(False)
a33_left_inset.spines['right'].set_visible(False)

a33_left_inset.scatter(actual_false_positive_rate, tpr[desired_fp_ind + 1], c='r', s=100)

## cross correlation curve ( P( predicted spikes | ground truth==spike) )
max_firing_rate = 10 * int(max(1000 * recall_curve) / 10)
midpoint_firing_rate = 5 * int(max_firing_rate / 10)
a33_right.set_yticks([0, midpoint_firing_rate,max_firing_rate])

a33_right.plot(time_axis_cc, 1000 * recall_curve, c='k')
a33_right.set_ylim(0, 1.05 * 1000 * recall_curve.max())
a33_right.set_xlabel('$\Delta t$ (ms)', fontsize=xylabels_fontsize)
a33_right.set_ylabel('spike rate (Hz)', fontsize=xylabels_fontsize)
a33_right.set_xticks([-50,0,50])
a33_right.spines['top'].set_visible(False)
a33_right.spines['right'].set_visible(False)

for tick_label in (a33_right.get_xticklabels() + a33_right.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

# voltage scatter plot
soma_voltage_lims = np.round([np.percentile(selected_GT,0.2),np.percentile(selected_GT,99.8)]).astype(int)
soma_voltage_lims = np.round([np.percentile(selected_GT,0.2),-56]).astype(int)
voltage_granularity = 6
voltage_setpoint = -57
voltage_axis = np.arange(soma_voltage_lims[0],soma_voltage_lims[1])
voltage_ticks_to_show = np.unique(((voltage_axis - voltage_setpoint) / voltage_granularity).astype(int) * voltage_granularity + voltage_setpoint)
voltage_ticks_to_show = voltage_ticks_to_show[np.logical_and(voltage_ticks_to_show >= soma_voltage_lims[0],
                                                             voltage_ticks_to_show <= soma_voltage_lims[1])]
ax34.set_xticks(voltage_ticks_to_show)
ax34.set_yticks(voltage_ticks_to_show)

ax34.scatter(selected_GT,selected_pred, s=1.0, alpha=0.8)
ax34.set_xlabel('L5PC (%s) (mV)' %(model_string), fontsize=xylabels_fontsize)
ax34.set_ylabel('ANN (mV)', fontsize=xylabels_fontsize)
ax34.set_xlim(soma_voltage_lims[0],soma_voltage_lims[1])
ax34.set_ylim(soma_voltage_lims[0],soma_voltage_lims[1])

ax34.plot([-90,-50],[-90,-50], ls='-', c='k')

ax34.spines['top'].set_visible(False)
ax34.spines['right'].set_visible(False)

for tick_label in (ax34.get_xticklabels() + ax34.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

if save_figures:
    figure_name = '%s__model_evaluation' %(model_dir.split('/')[-2])
    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% show prediction trace

for k in range(30):
    num_spikes_per_simulation = y1_test_for_TCN.sum(axis=1)[:,0]
    possible_presentable_candidates = np.nonzero(np.logical_and(num_spikes_per_simulation >= 3, num_spikes_per_simulation <= 10))[0]
    selected_trace = np.random.choice(possible_presentable_candidates)
    
    zoomin_fraction = [0.25 + 0.23 * np.random.rand(), 0.52 + 0.23 * np.random.rand()]
    
    # selected_trace = 122
    # zoomin_fraction = [0.35,0.61]
    
    print('selected trace = %d' %(selected_trace))
    print('zoomin_fraction = %s' %(zoomin_fraction))
    print('at %.4f FP rate, TP = %.4f' %(actual_false_positive_rate, tpr[desired_fp_ind]))
    
    spike_trace_GT   = y1_test_for_TCN[selected_trace,:,0]
    spike_trace_pred = y1_test_for_TCN_hat[selected_trace,:,0] > desired_threshold
    
    output_spike_times_in_ms_GT   = np.nonzero(spike_trace_GT)[0]
    output_spike_times_in_ms_pred = np.nonzero(spike_trace_pred)[0]
    
    soma_voltage_trace_GT   = y2_test_for_TCN[selected_trace,:,0] + y_train_soma_bias
    soma_voltage_trace_pred = y2_test_for_TCN_hat[selected_trace,:,0] + y_train_soma_bias
    
    soma_voltage_trace_GT[output_spike_times_in_ms_GT] = 40
    soma_voltage_trace_pred[output_spike_times_in_ms_pred] = 40
        
    sim_duration_ms = spike_trace_GT.shape[0]
    
    # show raster plot and cell output
    time_in_sec = np.arange(sim_duration_ms) / 1000.0
    sim_duration_ms = spike_trace_GT.shape[0]
    sim_duration_sec = int(sim_duration_ms / 1000.0)

    xytick_labels_fontsize = 16
    title_fontsize = 26
    xylabels_fontsize = 19
    legend_fontsize = 15
    
    plt.close('all')
    fig = plt.figure(figsize=(17,8))
    
    gs1 = gridspec.GridSpec(2,1)
    gs1.update(left=0.05, right=0.95, bottom=0.05, top=0.95, wspace=0.01, hspace=0.01)
    
    ax11 = plt.subplot(gs1[0,0])
    ax12 = plt.subplot(gs1[1,0])
    ax11.axis('off')
    ax12.axis('off')
    
    ax11.plot(time_in_sec,soma_voltage_trace_GT,c='c')
    ax11.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
    ax11.set_xlim(0,sim_duration_sec)
    ax11.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
    
    for tick_label in (ax11.get_xticklabels() + ax11.get_yticklabels()):
        tick_label.set_fontsize(xytick_labels_fontsize)
    
    zoomout_scalebar_xloc = 0.95 * sim_duration_sec
    zoomin_xlims = [zoomin_fraction[0] * sim_duration_sec, zoomin_fraction[1] * sim_duration_sec]
    zoomin_dur_sec = zoomin_xlims[1] - zoomin_xlims[0]
    zoomin_time_in_sec = np.logical_and(time_in_sec >= zoomin_xlims[0], time_in_sec <= zoomin_xlims[1])
    zoomin_ylims = [soma_voltage_trace_GT[zoomin_time_in_sec].min() - 2.5, -52]
    zoomin_scalebar_xloc = zoomin_xlims[1] - 0.05 * zoomin_dur_sec
    
    ax12.plot(time_in_sec,soma_voltage_trace_GT,c='c')
    ax12.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
    ax12.set_xlim(zoomin_xlims[0],zoomin_xlims[1])
    ax12.set_ylim(zoomin_ylims[0],zoomin_ylims[1])
    ax12.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
    ax12.set_xlabel('time (sec)', fontsize=xylabels_fontsize)
    
    for tick_label in (ax12.get_xticklabels() + ax12.get_yticklabels()):
        tick_label.set_fontsize(xytick_labels_fontsize)

    # add scale bar to top plot
    scalebar_loc = np.array([zoomout_scalebar_xloc,-25])
    scalebar_size_x = 0.6
    scalebar_str_x = '600 ms'
    scalebar_size_y = 40
    scalebar_str_y = '40 mV'
    
    x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
    y = [scalebar_loc[1], scalebar_loc[1]]
    ax11.plot(x,y,lw=2,c='k')
    ax11.text(scalebar_loc[0] - 0.05 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
              scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')
    
    x = [scalebar_loc[0], scalebar_loc[0]]
    y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
    ax11.plot(x,y,lw=2,c='k')
    ax11.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
              scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

    # add dashed rectangle
    rect_w = zoomin_xlims[1] - zoomin_xlims[0]
    rect_h = zoomin_ylims[1] - zoomin_ylims[0]
    rect_bl_x = zoomin_xlims[0]
    rect_bl_y = zoomin_ylims[0]
    dashed_rectangle = mpatches.Rectangle((rect_bl_x,rect_bl_y),rect_w,rect_h,linewidth=2,edgecolor='k',linestyle='--',facecolor='none')
    
    ax11.add_patch(dashed_rectangle)

    # add scalebar to bottom plot
    scalebar_loc = np.array([zoomin_scalebar_xloc,-60])
    scalebar_size_x = 0.06
    scalebar_str_x = '60 ms'
    scalebar_size_y = 5
    scalebar_str_y = '5 mV'
    
    x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
    y = [scalebar_loc[1], scalebar_loc[1]]
    ax12.plot(x,y,lw=2,c='k')
    ax12.text(scalebar_loc[0] - 0.15 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
              scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')
    
    x = [scalebar_loc[0], scalebar_loc[0]]
    y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
    ax12.plot(x,y,lw=2,c='k')
    ax12.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
              scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')
    
    if save_figures:
        figure_name = '%s__single_prediction_trace_%d' %(model_dir.split('/')[-2], selected_trace)
        for file_ending in all_file_endings_to_use:
            if file_ending == '.png':
                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
            else:
                subfolder = '%s/' %(file_ending.split('.')[-1])
                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')


#%% show several prediction traces

num_subplots = 5

xytick_labels_fontsize = 16
title_fontsize = 26
xylabels_fontsize = 19
legend_fontsize = 15

num_spikes_per_simulation = y1_test_for_TCN.sum(axis=1)[:,0]
possible_presentable_candidates = np.nonzero(np.logical_and(num_spikes_per_simulation >= 3, num_spikes_per_simulation <= 15))[0]
selected_traces = np.random.choice(possible_presentable_candidates, size=num_subplots)

plt.close('all')
fig, ax = plt.subplots(nrows=num_subplots, ncols=1, figsize=(20,30))
fig.subplots_adjust(left=0.05, right=0.95, bottom=0.05, top=0.95, wspace=0.01, hspace=0.01)
for k, selected_trace in enumerate(selected_traces):
    
    spike_trace_GT   = y1_test_for_TCN[selected_trace,:,0]
    spike_trace_pred = y1_test_for_TCN_hat[selected_trace,:,0] > desired_threshold
    
    output_spike_times_in_ms_GT   = np.nonzero(spike_trace_GT)[0]
    output_spike_times_in_ms_pred = np.nonzero(spike_trace_pred)[0]
    
    soma_voltage_trace_GT   = y2_test_for_TCN[selected_trace,:,0] + y_train_soma_bias
    soma_voltage_trace_pred = y2_test_for_TCN_hat[selected_trace,:,0] + y_train_soma_bias
    
    soma_voltage_trace_GT[output_spike_times_in_ms_GT] = 40
    soma_voltage_trace_pred[output_spike_times_in_ms_pred] = 40
        
    ax[k].axis('off')
    ax[k].plot(time_in_sec,soma_voltage_trace_GT,c='c')
    ax[k].plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
    ax[k].set_xlim(0.02,sim_duration_sec)
    ax[k].set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
    for tick_label in (ax11.get_xticklabels() + ax11.get_yticklabels()):
        tick_label.set_fontsize(xytick_labels_fontsize)
    
    if k == int(num_subplots / 2):
        # add scale bar to top plot
        scalebar_loc = np.array([zoomout_scalebar_xloc,-25])
        scalebar_size_x = 0.6
        scalebar_str_x = '600 ms'
        scalebar_size_y = 40
        scalebar_str_y = '40 mV'
        
        x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
        y = [scalebar_loc[1], scalebar_loc[1]]
        ax[k].plot(x,y,lw=2,c='k')
        ax[k].text(scalebar_loc[0] - 0.05 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
                   scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')
        
        x = [scalebar_loc[0], scalebar_loc[0]]
        y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
        ax[k].plot(x,y,lw=2,c='k')
        ax[k].text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
                   scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

if save_figures:
    figure_name = '%s__multiple_prediction_traces_%d' %(model_dir.split('/')[-2], np.random.randint(10))
    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% show several first layer weights
    
# show all first layer learned weights

plt.close('all')

first_layer_weights = temporal_conv_net.get_weights()[0]
time_span, _, num_filters = first_layer_weights.shape

ylims = np.array([-1.01,1.01]) * max(abs(first_layer_weights.max()),abs(first_layer_weights.min()))

if time_span <= 50:
    max_num_plots_per_figure = 32
elif time_span <= 100:
    max_num_plots_per_figure = 24
else:
    max_num_plots_per_figure = 16
    
total_num_figures = int(np.ceil(num_filters / float(max_num_plots_per_figure)))

for fig_ind in range(total_num_figures):
    start_filter_to_show = fig_ind * max_num_plots_per_figure
    end_filter_to_show   = min(num_filters, start_filter_to_show + max_num_plots_per_figure)

    filters_to_show = list(range(start_filter_to_show,end_filter_to_show))

    plt.figure(figsize=(34,17))
    for k, filter_ind in enumerate(filters_to_show):
        plt.subplot(1,len(filters_to_show),k + 1); plt.title('filter %d' %(filter_ind))
        plt.imshow(first_layer_weights[:,:,filter_ind].T,cmap='jet')
        # plt.clim(vmin=ylims[0],vmax=ylims[1])
        plt.axis('off')
    plt.tight_layout()


#%% show selected filter in depth and temporal profile as well
    
plt.close('all')

### NMDA 1x128x43
#interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]

### NMDA 7x128x153
# interesting_filters = [8,17,25,37,52,54,59,66,71,89,91,93,96,114]

### AMPA 1x128x43
interesting_filters = [7,13,16,34,38,53,56,65,69,76,83,99,105,116,120,57,59,66,79,95]

### AMPA 4x64x120
# interesting_filters = [6,11,25,32,43,44,55,57]

### AMPA_SK 1x128x46
# interesting_filters = [0,5,13,27,40,46,49,63,78,107,97]

### AMPA_SK 4x64x120
# interesting_filters = [1,3,16,26,32,40,59,62,63]

selected_filter_ind = np.random.choice(interesting_filters)

filter_size = 2

first_layer_weights = np.flip(temporal_conv_net.get_weights()[0], axis=0)
time_span, _, num_filters = first_layer_weights.shape

weight_granularity = 0.06
time_granularity = 20

max_time_to_show = 40

use_filtered = True
if use_filtered:
    first_layer_weights_filtered = signal.convolve(first_layer_weights, (1.0 / filter_size) * np.ones((filter_size,1,1)), mode='valid')
    first_layer_weights = first_layer_weights_filtered

if first_layer_weights.shape[0] >= max_time_to_show:
    first_layer_weights = first_layer_weights[:max_time_to_show]

# invert if needed
exc_sum = first_layer_weights[:12,:num_segments,selected_filter_ind].sum()
inh_sum = first_layer_weights[:12,num_segments:,selected_filter_ind].sum()
exc_minus_inh = exc_sum - inh_sum

if exc_minus_inh < 0:
    first_layer_weights = -first_layer_weights

upper_limit = max(np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),99.95),np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),0.05))
ylims = np.array([-1.06,1.06]) * upper_limit

xlims = [-5 * int(first_layer_weights.shape[0] / 5),0]

num_segments = 639
basal_cutoff = 262
tuft_cutoff  = [366,559]

ex_basal_syn_inds    = np.arange(basal_cutoff)
ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds

basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)

time_axis = -np.arange(first_layer_weights.shape[0])

#%% create nice figure

ex_basal_color    = 'red'
ex_oblique_color  = 'darkorange'
ex_tuft_color     = 'yellow'
inh_basal_color   = 'darkblue'
inh_oblique_color = 'blue'
inh_tuft_color    = 'skyblue'

cmap = plt.cm.coolwarm

custom_lines = [Line2D([0], [0], color=ex_basal_color, lw=4),
                Line2D([0], [0], color=ex_oblique_color, lw=4),
                Line2D([0], [0], color=ex_tuft_color, lw=4),
                Line2D([0], [0], color=inh_basal_color, lw=4),
                Line2D([0], [0], color=inh_oblique_color, lw=4),
                Line2D([0], [0], color=inh_tuft_color, lw=4)]

all_traces_alpha = 0.08
mean_linewidth = 4.0

figure_xlims = xlims
figure_xlims[0] = max(-40, figure_xlims[0])

ex_basal_syn_inds    = np.arange(basal_cutoff)
ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds

basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)

combined_filter = np.concatenate((basal_weights_example_filter_ex,oblique_weights_example_filter_ex,tuft_weights_example_filter_ex,
                                  basal_weights_example_filter_inh,oblique_weights_example_filter_inh,tuft_weights_example_filter_inh),axis=0)

# draw 2 x 3 (basal,oblique,tuft) matrix
ex_basal_syn_inds    = np.arange(basal_cutoff)
ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds

basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)

time_axis = -np.arange(first_layer_weights.shape[0])
upper_limit = max(np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),99.8),np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),0.2))
weights_ylims = np.array([-1.08,1.08]) * upper_limit
weight_ticks_lims = (np.array(weights_ylims) / weight_granularity).astype(int) * weight_granularity

xytick_labels_fontsize = 27
title_fontsize = 37
xylabels_fontsize = 37
legend_fontsize = 16
all_traces_alpha = 0.08
mean_linewidth = 4.0

fig = plt.figure(figsize=(19,19))

gs1 = gridspec.GridSpec(1,3)
gs1.update(left=0.10, right=0.97, bottom=0.30, top=0.98, wspace=0.14, hspace=0.03)

gs2 = gridspec.GridSpec(1,3)
gs2.update(left=0.10, right=0.97, bottom=0.06, top=0.28, wspace=0.11, hspace=0.03)

ax00 = plt.subplot(gs1[0,0])
ax10 = plt.subplot(gs2[0,0])

ax01 = plt.subplot(gs1[0,1])
ax11 = plt.subplot(gs2[0,1])

ax02 = plt.subplot(gs1[0,2])
ax12 = plt.subplot(gs2[0,2])

ax00.axis('off')
ax01.axis('off')
ax02.axis('off')

# basal
weights_images = ax00.imshow(resize(basal_weights_example_filter, (combined_filter.shape[0], 200)),
                             cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
ax00.set_xticks([])
ax00.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
for ytick_label in ax00.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)

ax_colorbar = inset_axes(ax00, width="67%", height="6%", loc=2)
cbar = plt.colorbar(weights_images, cax=ax_colorbar, orientation="horizontal", ticks=[weight_ticks_lims[0], 0, weight_ticks_lims[1]])
ax_colorbar.xaxis.set_ticks_position("bottom")
cbar.ax.tick_params(labelsize=xytick_labels_fontsize)
ax00.text(10, 132, 'Weight (A.U)', color='k', fontsize=title_fontsize, ha='left', va='top', rotation='horizontal')

ax10.plot(time_axis, np.fliplr(basal_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
ax10.plot(time_axis, np.mean(np.fliplr(basal_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
ax10.plot(time_axis, np.fliplr(basal_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
ax10.plot(time_axis, np.mean(np.fliplr(basal_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)

ax10.set_xlim(time_axis.min(),time_axis.max())
ax10.set_xlabel('Time before $t_0$ (ms)', fontsize=xylabels_fontsize)
ax10.set_ylim(weights_ylims[0],weights_ylims[1])
ax10.set_ylabel('Weight (A.U)', fontsize=xylabels_fontsize)

time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
ax10.set_xticks(time_ticks_to_show)

weights_axis = np.linspace(weights_ylims[0],weights_ylims[1],10)
weight_ticks_to_show = np.unique((np.array(weights_axis) / weight_granularity).astype(int) * weight_granularity)
ax10.set_yticks(weight_ticks_to_show)

ax10.spines['top'].set_visible(False)
ax10.spines['right'].set_visible(False)

for ytick_label in ax10.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)
for xtick_label in ax10.get_xticklabels():
    xtick_label.set_fontsize(xytick_labels_fontsize)

# place a text box near the traces
#ax10.text(-25, 0.25, 'Exc', color='r', fontsize=20, verticalalignment='bottom')
#ax10.text(-25, -0.3, 'Inh', color='b', fontsize=20, verticalalignment='top')

# oblique
weights_images = ax01.imshow(resize(oblique_weights_example_filter, (combined_filter.shape[0], 200)),
                             cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
ax01.set_xticks([])
ax01.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
for ytick_label in ax01.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)

ax11.plot(time_axis, np.fliplr(oblique_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
ax11.plot(time_axis, np.mean(np.fliplr(oblique_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
ax11.plot(time_axis, np.fliplr(oblique_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
ax11.plot(time_axis, np.mean(np.fliplr(oblique_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)

ax11.set_xlim(time_axis.min(),time_axis.max())
ax11.set_xlabel('Time before $t_0$ (ms)', fontsize=xylabels_fontsize)
ax11.set_ylim(weights_ylims[0],weights_ylims[1])

time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
ax11.set_xticks(time_ticks_to_show)

ax11.spines['top'].set_visible(False)
ax11.spines['right'].set_visible(False)
ax11.spines['left'].set_visible(False)

ax11.set_yticks([])
for ytick_label in ax11.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)
for xtick_label in ax11.get_xticklabels():
    xtick_label.set_fontsize(xytick_labels_fontsize)

# tuft
weights_images = ax02.imshow(resize(tuft_weights_example_filter, (combined_filter.shape[0], 200)),
                             cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
ax02.set_xticks([])
ax02.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
for ytick_label in ax02.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)

ax12.plot(time_axis, np.fliplr(tuft_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
ax12.plot(time_axis, np.mean(np.fliplr(tuft_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
ax12.plot(time_axis, np.fliplr(tuft_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
ax12.plot(time_axis, np.mean(np.fliplr(tuft_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)

ax12.set_xlim(time_axis.min(),time_axis.max())
ax12.set_ylim(weights_ylims[0],weights_ylims[1])
ax12.set_xlabel('Time before $t_0$ (ms)', fontsize=xylabels_fontsize)
ax12.set_yticks([])

time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
ax12.set_xticks(time_ticks_to_show)

ax12.spines['top'].set_visible(False)
ax12.spines['right'].set_visible(False)
ax12.spines['left'].set_visible(False)

for ytick_label in ax12.get_yticklabels():
    ytick_label.set_fontsize(xytick_labels_fontsize)
for xtick_label in ax12.get_xticklabels():
    xtick_label.set_fontsize(xytick_labels_fontsize)

if save_figures:
    figure_name = '%s__first_layer_weights_filter_ind_%d' %(model_dir.split('/')[-2], selected_filter_ind)
    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% full combined figure (version 2)

# content params
possible_presentable_candidates = np.nonzero(np.logical_and(num_spikes_per_simulation >= 4, num_spikes_per_simulation <= 15))[0]
selected_trace  = np.random.choice(possible_presentable_candidates)
zoomin_fraction = [0.23 + 0.24 * np.random.rand(), 0.53 + 0.24 * np.random.rand()]

### AMPA_SK 1x128x46
# selected_trace  = 315
# zoomin_fraction = [0.25,0.51]

# selected_trace  = 419
# zoomin_fraction = [0.32,0.545]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [78,107,27]


### AMPA_SK 4x64x120
# selected_trace  = 211
# zoomin_fraction = [0.26,0.52]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [16,32,59]


### AMPA 1x128x43
# selected_trace  = 1198
# zoomin_fraction = [0.45,0.73]

# selected_trace  = 1123
# zoomin_fraction = [0.37,0.62]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84,120]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [34,13,116]
# selected_filter_inds = [34,16,120]


### AMPA 4x64x120
# selected_trace  = 103
# zoomin_fraction = [0.45,0.73]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [25,32,57]


### NMDA 1x128x43
#selected_trace  = 140
#zoomin_fraction = [0.48,0.79]

#interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
#selected_filter_inds = np.random.choice(interesting_filters, size=3)
#selected_filter_inds = [4,65,14]


### NMDA 7x128x153
# selected_trace  = 128
# zoomin_fraction = [0.61,0.85]

selected_trace  = 1313
zoomin_fraction = [0.34,0.65]

# selected_trace  = 564
# zoomin_fraction = [0.31,0.55]

# interesting_filters = [8,17,25,37,52,54,59,66,71,89,91,93,96,114]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
selected_filter_inds = [91,93,114]


use_filtered = True
filter_size = 3

# figure params
xytick_labels_fontsize = 15
title_fontsize = 26
xylabels_fontsize = 22
legend_fontsize = 15
all_traces_alpha = 0.08
mean_linewidth = 4.0

# figure layout
plt.close('all')
fig = plt.figure(figsize=(26,20))

gs_top_left = gridspec.GridSpec(nrows=1,ncols=1)
gs_top_left.update(left=0.04, right=0.20, bottom=0.45, top=0.95, wspace=0.5, hspace=0.01)
gs_top_middle = gridspec.GridSpec(nrows=7,ncols=1)
gs_top_middle.update(left=0.22, right=0.59, bottom=0.45, top=0.95, wspace=0.5, hspace=0.01)
gs_top_right = gridspec.GridSpec(nrows=5,ncols=2)
gs_top_right.update(left=0.65, right=0.97, bottom=0.47, top=0.95, wspace=0.3, hspace=0.5)

gs_bottom_left = gridspec.GridSpec(nrows=3,ncols=3)
gs_bottom_left.update(left=0.09, right=0.35, bottom=0.05, top=0.39, wspace=0.15, hspace=0.07)
gs_bottom_middle = gridspec.GridSpec(nrows=3,ncols=3)
gs_bottom_middle.update(left=0.40, right=0.66, bottom=0.05, top=0.39, wspace=0.15, hspace=0.07)
gs_bottom_right = gridspec.GridSpec(nrows=3,ncols=3)
gs_bottom_right.update(left=0.71, right=0.97, bottom=0.05, top=0.39, wspace=0.15, hspace=0.07)

# top
ax_morphology      = plt.subplot(gs_top_left[:,:])
ax_nn_illustration = plt.subplot(gs_top_middle[:3,:])
ax_trace_full      = plt.subplot(gs_top_middle[3:5,:])
ax_trace_zoomin    = plt.subplot(gs_top_middle[5:,:])
ax_roc        = plt.subplot(gs_top_right[:2,0])
ax_cross_corr = plt.subplot(gs_top_right[:2,1])
ax_scatter    = plt.subplot(gs_top_right[2:,:])

# bottom
ax_weights_left_basal_heatmap    = plt.subplot(gs_bottom_left[:2,0])
ax_weights_left_oblique_heatmap  = plt.subplot(gs_bottom_left[:2,1])
ax_weights_left_apical_heatmap   = plt.subplot(gs_bottom_left[:2,2])
ax_weights_left_basal_temporal   = plt.subplot(gs_bottom_left[2,0])
ax_weights_left_oblique_temporal = plt.subplot(gs_bottom_left[2,1])
ax_weights_left_apical_temporal  = plt.subplot(gs_bottom_left[2,2])

ax_weights_middle_basal_heatmap    = plt.subplot(gs_bottom_middle[:2,0])
ax_weights_middle_oblique_heatmap  = plt.subplot(gs_bottom_middle[:2,1])
ax_weights_middle_apical_heatmap   = plt.subplot(gs_bottom_middle[:2,2])
ax_weights_middle_basal_temporal   = plt.subplot(gs_bottom_middle[2,0])
ax_weights_middle_oblique_temporal = plt.subplot(gs_bottom_middle[2,1])
ax_weights_middle_apical_temporal  = plt.subplot(gs_bottom_middle[2,2])

ax_weights_right_basal_heatmap    = plt.subplot(gs_bottom_right[:2,0])
ax_weights_right_oblique_heatmap  = plt.subplot(gs_bottom_right[:2,1])
ax_weights_right_apical_heatmap   = plt.subplot(gs_bottom_right[:2,2])
ax_weights_right_basal_temporal   = plt.subplot(gs_bottom_right[2,0])
ax_weights_right_oblique_temporal = plt.subplot(gs_bottom_right[2,1])
ax_weights_right_apical_temporal  = plt.subplot(gs_bottom_right[2,2])
    
################################################
# set morphology
################################################

width_mult_factor = 1.2
apical_color = 'g'
oblique_color = 'orange'
basal_color = 'm'

# basal segments
for key in basal_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    ax_morphology.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=basal_color)

# oblique segments
for key in oblique_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    ax_morphology.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=oblique_color)

# tuft segments
for key in tuft_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    ax_morphology.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=apical_color)

# add black soma
ax_morphology.scatter(x=46.0,y=15.8,s=180,c='k', zorder=100)
ax_morphology.set_xlim(-180,235)
ax_morphology.set_ylim(-210,1200)
ax_morphology.set_axis_off()


################################################
# set illustration
################################################

ax_nn_illustration.set_axis_off()
ax_nn_illustration.imshow(imageio.imread(NN_illustration_filename))

################################################
# set traces
################################################

spike_trace_GT   = y1_test_for_TCN[selected_trace,:,0]
spike_trace_pred = y1_test_for_TCN_hat[selected_trace,:,0] > desired_threshold

output_spike_times_in_ms_GT   = np.nonzero(spike_trace_GT)[0]
output_spike_times_in_ms_pred = np.nonzero(spike_trace_pred)[0]

soma_voltage_trace_GT   = y2_test_for_TCN[selected_trace,:,0] + y_train_soma_bias
soma_voltage_trace_pred = y2_test_for_TCN_hat[selected_trace,:,0] + y_train_soma_bias

soma_voltage_trace_GT[output_spike_times_in_ms_GT] = 37
soma_voltage_trace_pred[output_spike_times_in_ms_pred] = 37


ax_trace_full.set_axis_off()
ax_trace_zoomin.set_axis_off()

ax_trace_full.plot(time_in_sec,soma_voltage_trace_GT,c='c')
ax_trace_full.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
ax_trace_full.set_xlim(0.05,sim_duration_sec)
ax_trace_full.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)

for tick_label in (ax_trace_full.get_xticklabels() + ax_trace_full.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

zoomout_scalebar_xloc = 0.95 * sim_duration_sec

zoomin_xlims = [zoomin_fraction[0] * sim_duration_sec, zoomin_fraction[1] * sim_duration_sec]
zoomin_dur_sec = zoomin_xlims[1] - zoomin_xlims[0]
zoomin_time_in_sec = np.logical_and(time_in_sec >= zoomin_xlims[0], time_in_sec <= zoomin_xlims[1])
zoomin_ylims = [soma_voltage_trace_GT[zoomin_time_in_sec].min() -2.5, -52]
zoomin_scalebar_xloc = zoomin_xlims[1] - 0.05 * zoomin_dur_sec

ax_trace_zoomin.plot(time_in_sec,soma_voltage_trace_GT,c='c')
ax_trace_zoomin.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
ax_trace_zoomin.set_xlim(zoomin_xlims[0],zoomin_xlims[1])
ax_trace_zoomin.set_ylim(zoomin_ylims[0],zoomin_ylims[1])
ax_trace_zoomin.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
ax_trace_zoomin.set_xlabel('time (sec)', fontsize=xylabels_fontsize)

for tick_label in (ax_trace_zoomin.get_xticklabels() + ax_trace_zoomin.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)


# add scale bar to top plot
scalebar_loc = np.array([zoomout_scalebar_xloc,-25])
scalebar_size_x = 0.6
scalebar_str_x = '600 ms'
scalebar_size_y = 40
scalebar_str_y = '40 mV'

x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
y = [scalebar_loc[1], scalebar_loc[1]]
ax_trace_full.plot(x,y,lw=2,c='k')
ax_trace_full.text(scalebar_loc[0] - 0.05 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
                   scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')

x = [scalebar_loc[0], scalebar_loc[0]]
y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
ax_trace_full.plot(x,y,lw=2,c='k')
ax_trace_full.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
                   scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')


# add dashed rectangle
rect_w = zoomin_xlims[1] - zoomin_xlims[0]
rect_h = zoomin_ylims[1] - zoomin_ylims[0]
rect_bl_x = zoomin_xlims[0]
rect_bl_y = zoomin_ylims[0]
dashed_rectangle = mpatches.Rectangle((rect_bl_x,rect_bl_y),rect_w,rect_h,linewidth=2,edgecolor='k',linestyle='--',facecolor='none')
ax_trace_full.add_patch(dashed_rectangle)

# add scalebar to bottom plot
scalebar_loc = np.array([zoomin_scalebar_xloc,-60])
scalebar_size_x = 0.06
scalebar_str_x = '60 ms'
scalebar_size_y = 5
scalebar_str_y = '5 mV'

x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
y = [scalebar_loc[1], scalebar_loc[1]]
ax_trace_zoomin.plot(x,y,lw=2,c='k')
ax_trace_zoomin.text(scalebar_loc[0] - 0.15 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
                     scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')

x = [scalebar_loc[0], scalebar_loc[0]]
y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
ax_trace_zoomin.plot(x,y,lw=2,c='k')
ax_trace_zoomin.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
                     scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

################################################
# set evaluation plots
################################################

# ROC curve
ax_roc.plot(fpr, tpr, c='k')
ax_roc.set_xlabel('False alarm rate', fontsize=xylabels_fontsize)
ax_roc.set_ylabel('Hit rate', fontsize=xylabels_fontsize)
ax_roc.set_ylim(0,1.05)
ax_roc.set_xlim(-0.03,1)
ax_roc.spines['top'].set_visible(False)
ax_roc.spines['right'].set_visible(False)
for tick_label in (ax_roc.get_xticklabels() + ax_roc.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)
ax_roc.set_xticks([0.0,0.5,1.0])
ax_roc.set_yticks([0.0,0.5,1.0])

# ROC inset plot
left, bottom, width, height = [0.70, 0.80, 0.075, 0.12]
ax_roc_inset = fig.add_axes([left, bottom, width, height])
ax_roc_inset.plot(fpr, tpr, c='k')
ax_roc_inset.set_ylim(0,1.05)
ax_roc_inset.set_xlim(-0.001,0.045)
ax_roc_inset.spines['top'].set_visible(False)
ax_roc_inset.spines['right'].set_visible(False)
ax_roc_inset.scatter(actual_false_positive_rate, tpr[desired_fp_ind + 1], c='r', s=100)
for tick_label in (ax_roc_inset.get_xticklabels() + ax_roc_inset.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize - 6)

# cross correlation curve
max_firing_rate = 10 * int(max(1000 * recall_curve) / 10)
midpoint_firing_rate = 5 * int(max_firing_rate / 10)
ax_cross_corr.set_yticks([0, midpoint_firing_rate,max_firing_rate])
ax_cross_corr.plot(time_axis_cc, 1000 * recall_curve, c='k')
ax_cross_corr.set_ylim(0, 1.05 * 1000 * recall_curve.max())
ax_cross_corr.set_xlabel('$\Delta t$ (ms)', fontsize=xylabels_fontsize)
ax_cross_corr.set_ylabel('spike rate (Hz)', fontsize=xylabels_fontsize)
ax_cross_corr.set_xticks([-50,0,50])
ax_cross_corr.spines['top'].set_visible(False)
ax_cross_corr.spines['right'].set_visible(False)
for tick_label in (ax_cross_corr.get_xticklabels() + ax_cross_corr.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

# voltage scatter plot
soma_voltage_lims = np.round([np.percentile(selected_GT,0.2),np.percentile(selected_GT,99.8)]).astype(int)
soma_voltage_lims = np.round([np.percentile(selected_GT,0.2),-56]).astype(int)
voltage_granularity = 6
voltage_setpoint = -57
voltage_axis = np.arange(soma_voltage_lims[0],soma_voltage_lims[1])
voltage_ticks_to_show = np.unique(((voltage_axis - voltage_setpoint) / voltage_granularity).astype(int) * voltage_granularity + voltage_setpoint)
voltage_ticks_to_show = voltage_ticks_to_show[np.logical_and(voltage_ticks_to_show >= soma_voltage_lims[0],
                                                             voltage_ticks_to_show <= soma_voltage_lims[1])]
ax_scatter.set_xticks(voltage_ticks_to_show)
ax_scatter.set_yticks(voltage_ticks_to_show)

ax_scatter.scatter(selected_GT,selected_pred, s=3.0, alpha=0.7)
ax_scatter.set_xlabel('L5PC (%s) (mV)' %(model_string), fontsize=xylabels_fontsize)
ax_scatter.set_ylabel('ANN (mV)', fontsize=xylabels_fontsize)
ax_scatter.set_xlim(soma_voltage_lims[0],soma_voltage_lims[1])
ax_scatter.set_ylim(soma_voltage_lims[0],soma_voltage_lims[1])
ax_scatter.plot([-90,-50],[-90,-50], ls='-', c='k')
ax_scatter.spines['top'].set_visible(False)
ax_scatter.spines['right'].set_visible(False)

for tick_label in (ax_scatter.get_xticklabels() + ax_scatter.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)


################################################
# set first layer weights plots
################################################

def draw_weights(first_layer_weights, selected_filter_ind, set_ylabel, ax00,ax10, ax01,ax11, ax02,ax12):

    time_span, _, num_filters = first_layer_weights.shape
    
    weight_granularity = 0.06
    time_granularity = 20
    max_time_to_show = 40
    
    if use_filtered:
        first_layer_weights_filtered = signal.convolve(first_layer_weights, (1.0 / filter_size) * np.ones((filter_size,1,1)), mode='valid')
        first_layer_weights = first_layer_weights_filtered
    
    if first_layer_weights.shape[0] >= max_time_to_show:
        first_layer_weights = first_layer_weights[:max_time_to_show]
    
    num_segments = 639
    basal_cutoff = 262
    tuft_cutoff  = [366,559]

    # invert if needed
    exc_sum = first_layer_weights[:12,:num_segments,selected_filter_ind].sum()
    inh_sum = first_layer_weights[:12,num_segments:,selected_filter_ind].sum()
    exc_minus_inh = exc_sum - inh_sum
    
    if exc_minus_inh < 0:
        first_layer_weights = -first_layer_weights
    
    upper_limit = max(np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),99.95),np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),0.05))
    xlims = [-5 * int(first_layer_weights.shape[0] / 5), 0]
    
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
    oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
    tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)
    
    time_axis = -np.arange(first_layer_weights.shape[0])
    
    ##%% create nice figure
    figure_xlims = xlims
    figure_xlims[0] = max(-40, figure_xlims[0])
    
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
    oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
    tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)
    
    combined_filter = np.concatenate((basal_weights_example_filter_ex,oblique_weights_example_filter_ex,tuft_weights_example_filter_ex,
                                      basal_weights_example_filter_inh,oblique_weights_example_filter_inh,tuft_weights_example_filter_inh),axis=0)
    
    ##%% draw 2 x 3 (basal,oblique,tuft) matrix
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
    oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
    tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)
    
    time_axis = -np.arange(first_layer_weights.shape[0])
    
    upper_limit = max(np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),99.8),np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),0.2))
    weights_ylims = np.array([-1.08,1.08]) * upper_limit
    
    weight_ticks_lims = (np.array(weights_ylims) / weight_granularity).astype(int) * weight_granularity
    
    ax00.axis('off')
    ax01.axis('off')
    ax02.axis('off')
    
    # basal
    weights_images = ax00.imshow(resize(basal_weights_example_filter, (combined_filter.shape[0], 200)),
                                 cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
    ax00.set_xticks([])
    ax00.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
    for ytick_label in ax00.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    
    ax_colorbar = inset_axes(ax00, width="67%", height="6%", loc=2)
    cbar = plt.colorbar(weights_images, cax=ax_colorbar, orientation="horizontal", ticks=[weight_ticks_lims[0], 0, weight_ticks_lims[1]])
    ax_colorbar.xaxis.set_ticks_position("bottom")
    cbar.ax.tick_params(labelsize=xytick_labels_fontsize - 2)
    ax00.text(10, 190, 'Weight (A.U)', color='k', fontsize=xytick_labels_fontsize + 1, ha='left', va='top', rotation='horizontal')
    
    ax10.plot(time_axis, np.fliplr(basal_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
    ax10.plot(time_axis, np.mean(np.fliplr(basal_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
    ax10.plot(time_axis, np.fliplr(basal_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
    ax10.plot(time_axis, np.mean(np.fliplr(basal_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)
    
    ax10.set_xlim(time_axis.min(),time_axis.max())
    ax10.set_ylim(weights_ylims[0],weights_ylims[1])
    if set_ylabel:
        ax10.set_ylabel('Weight (A.U)', fontsize=xylabels_fontsize)
    
    time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
    ax10.set_xticks(time_ticks_to_show)
    
    weights_axis = np.linspace(weights_ylims[0], weights_ylims[1], 10)
    weight_ticks_to_show = np.unique((np.array(weights_axis) / weight_granularity).astype(int) * weight_granularity)
    ax10.set_yticks(weight_ticks_to_show)
    
    ax10.spines['top'].set_visible(False)
    ax10.spines['right'].set_visible(False)
    
    for ytick_label in ax10.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    for xtick_label in ax10.get_xticklabels():
        xtick_label.set_fontsize(xytick_labels_fontsize)

    # oblique
    weights_images = ax01.imshow(resize(oblique_weights_example_filter, (combined_filter.shape[0], 200)),
                                 cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
    ax01.set_xticks([])
    ax01.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
    for ytick_label in ax01.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    
    ax11.plot(time_axis, np.fliplr(oblique_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
    ax11.plot(time_axis, np.mean(np.fliplr(oblique_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
    ax11.plot(time_axis, np.fliplr(oblique_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
    ax11.plot(time_axis, np.mean(np.fliplr(oblique_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)
    
    ax11.set_xlim(time_axis.min(),time_axis.max())
    ax11.set_xlabel('Time before $t_0$ (ms)', fontsize=xylabels_fontsize)
    ax11.set_ylim(weights_ylims[0],weights_ylims[1])
    
    time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
    ax11.set_xticks(time_ticks_to_show)
    
    ax11.spines['top'].set_visible(False)
    ax11.spines['right'].set_visible(False)
    ax11.spines['left'].set_visible(False)
    
    ax11.set_yticks([])
    for ytick_label in ax11.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    for xtick_label in ax11.get_xticklabels():
        xtick_label.set_fontsize(xytick_labels_fontsize)
        
    # tuft
    weights_images = ax02.imshow(resize(tuft_weights_example_filter, (combined_filter.shape[0], 200)),
                                 cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
    ax02.set_xticks([])
    ax02.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
    for ytick_label in ax02.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    
    ax12.plot(time_axis, np.fliplr(tuft_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
    ax12.plot(time_axis, np.mean(np.fliplr(tuft_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
    ax12.plot(time_axis, np.fliplr(tuft_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
    ax12.plot(time_axis, np.mean(np.fliplr(tuft_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)
    
    ax12.set_xlim(time_axis.min(),time_axis.max())
    ax12.set_ylim(weights_ylims[0],weights_ylims[1])
    ax12.set_yticks([])
    
    time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
    ax12.set_xticks(time_ticks_to_show)
    
    ax12.spines['top'].set_visible(False)
    ax12.spines['right'].set_visible(False)
    ax12.spines['left'].set_visible(False)
    
    for ytick_label in ax12.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    for xtick_label in ax12.get_xticklabels():
        xtick_label.set_fontsize(xytick_labels_fontsize)


draw_weights(first_layer_weights, selected_filter_inds[0], True,
             ax_weights_left_basal_heatmap,   ax_weights_left_basal_temporal,
             ax_weights_left_oblique_heatmap, ax_weights_left_oblique_temporal,
             ax_weights_left_apical_heatmap,  ax_weights_left_apical_temporal)


draw_weights(first_layer_weights, selected_filter_inds[1], False,
             ax_weights_middle_basal_heatmap,   ax_weights_middle_basal_temporal,
             ax_weights_middle_oblique_heatmap, ax_weights_middle_oblique_temporal,
             ax_weights_middle_apical_heatmap,  ax_weights_middle_apical_temporal)


draw_weights(first_layer_weights, selected_filter_inds[2], False,
             ax_weights_right_basal_heatmap,   ax_weights_right_basal_temporal,
             ax_weights_right_oblique_heatmap, ax_weights_right_oblique_temporal,
             ax_weights_right_apical_heatmap, ax_weights_right_apical_temporal)


# save figure
if save_figures:
    figure_name = '%s__full_combined_figure_v2_%d' %(model_dir.split('/')[-2], np.random.randint(50))
    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

            
#%% full combined figure (version 3)

# content params
possible_presentable_candidates = np.nonzero(np.logical_and(num_spikes_per_simulation >= 4, num_spikes_per_simulation <= 15))[0]
selected_trace  = np.random.choice(possible_presentable_candidates)
zoomin_fraction = [0.23 + 0.24 * np.random.rand(), 0.53 + 0.24 * np.random.rand()]

### AMPA_SK 1x128x46
# selected_trace  = 315
# zoomin_fraction = [0.25,0.51]

# selected_trace  = 419
# zoomin_fraction = [0.32,0.545]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [78,107,27]


### AMPA_SK 4x64x120
# selected_trace  = 211
# zoomin_fraction = [0.26,0.52]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [16,32,59]


### AMPA 1x128x43
# selected_trace  = 1198
# zoomin_fraction = [0.45,0.73]

# selected_trace  = 1123
# zoomin_fraction = [0.37,0.62]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84,120]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [34,13,116]
# selected_filter_inds = [34,16,120]


### AMPA 4x64x120
# selected_trace  = 103
# zoomin_fraction = [0.45,0.73]

# interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
# selected_filter_inds = [25,32,57]


### NMDA 1x128x43
#selected_trace  = 140
#zoomin_fraction = [0.48,0.79]

#interesting_filters = [4,14,17,27,29,44,56,59,60,65,84]
#selected_filter_inds = np.random.choice(interesting_filters, size=3)
#selected_filter_inds = [4,65,14]


### NMDA 7x128x153
# selected_trace  = 128
# zoomin_fraction = [0.61,0.85]

selected_trace  = 1313
zoomin_fraction = [0.34,0.65]

# selected_trace  = 564
# zoomin_fraction = [0.31,0.55]

# interesting_filters = [8,17,25,37,52,54,59,66,71,89,91,93,96,114]
# selected_filter_inds = np.random.choice(interesting_filters, size=3)
selected_filter_inds = [91,93,114]


use_filtered = True
filter_size = 3

# figure params
xytick_labels_fontsize = 18
title_fontsize = 26
xylabels_fontsize = 23
legend_fontsize = 15
all_traces_alpha = 0.08
mean_linewidth = 4.0

# figure layout
plt.close('all')
fig = plt.figure(figsize=(35,15))
gs_top_left = gridspec.GridSpec(nrows=1,ncols=1)
gs_top_left.update(left=0.01, right=0.17, bottom=0.05, top=0.95, wspace=0.5, hspace=0.01)
gs_top_middle = gridspec.GridSpec(nrows=7,ncols=1)
gs_top_middle.update(left=0.185, right=0.465, bottom=0.05, top=0.95, wspace=0.5, hspace=0.01)
gs_top_right = gridspec.GridSpec(nrows=3,ncols=1)
gs_top_right.update(left=0.515, right=0.63, bottom=0.09, top=0.95, wspace=0.3, hspace=0.22)

gs_top_right_2 = gridspec.GridSpec(nrows=3,ncols=3)
gs_top_right_2.update(left=0.69, right=0.99, bottom=0.09, top=0.89, wspace=0.15, hspace=0.07)

# morphology, illustratrion, trace and performance evaluation
ax_morphology      = plt.subplot(gs_top_left[:,:])
ax_nn_illustration = plt.subplot(gs_top_middle[:3,:])
ax_trace_full      = plt.subplot(gs_top_middle[3:5,:])
ax_trace_zoomin    = plt.subplot(gs_top_middle[5:,:])
ax_roc        = plt.subplot(gs_top_right[0,0])
ax_cross_corr = plt.subplot(gs_top_right[1,0])
ax_scatter    = plt.subplot(gs_top_right[2,0])

# weights plot
ax_weights_left_basal_heatmap    = plt.subplot(gs_top_right_2[:2,0])
ax_weights_left_oblique_heatmap  = plt.subplot(gs_top_right_2[:2,1])
ax_weights_left_apical_heatmap   = plt.subplot(gs_top_right_2[:2,2])
ax_weights_left_basal_temporal   = plt.subplot(gs_top_right_2[2,0])
ax_weights_left_oblique_temporal = plt.subplot(gs_top_right_2[2,1])
ax_weights_left_apical_temporal  = plt.subplot(gs_top_right_2[2,2])

    
################################################
# set morphology
################################################

width_mult_factor = 1.2
apical_color = 'g'
oblique_color = 'orange'
basal_color = 'm'

# basal segments
for key in basal_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    ax_morphology.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=basal_color)

# oblique segments
for key in oblique_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    ax_morphology.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=oblique_color)

# tuft segments
for key in tuft_syn_inds:
    line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
    ax_morphology.plot(seg_ind_to_xyz_coords_map[key]['x'],seg_ind_to_xyz_coords_map[key]['y'],lw=line_width,color=apical_color)

# add black soma
ax_morphology.scatter(x=46.0,y=15.8,s=180,c='k', zorder=100)
ax_morphology.set_xlim(-180,235)
ax_morphology.set_ylim(-210,1200)
ax_morphology.set_axis_off()


################################################
# set illustration
################################################

ax_nn_illustration.set_axis_off()
ax_nn_illustration.imshow(imageio.imread(NN_illustration_filename))

################################################
# set traces
################################################

spike_trace_GT   = y1_test_for_TCN[selected_trace,:,0]
spike_trace_pred = y1_test_for_TCN_hat[selected_trace,:,0] > desired_threshold

output_spike_times_in_ms_GT   = np.nonzero(spike_trace_GT)[0]
output_spike_times_in_ms_pred = np.nonzero(spike_trace_pred)[0]

soma_voltage_trace_GT   = y2_test_for_TCN[selected_trace,:,0] + y_train_soma_bias
soma_voltage_trace_pred = y2_test_for_TCN_hat[selected_trace,:,0] + y_train_soma_bias

soma_voltage_trace_GT[output_spike_times_in_ms_GT] = 37
soma_voltage_trace_pred[output_spike_times_in_ms_pred] = 37


ax_trace_full.set_axis_off()
ax_trace_zoomin.set_axis_off()

ax_trace_full.plot(time_in_sec,soma_voltage_trace_GT,c='c')
ax_trace_full.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
ax_trace_full.set_xlim(0.05,sim_duration_sec)
ax_trace_full.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)

for tick_label in (ax_trace_full.get_xticklabels() + ax_trace_full.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

zoomout_scalebar_xloc = 0.95 * sim_duration_sec

zoomin_xlims = [zoomin_fraction[0] * sim_duration_sec, zoomin_fraction[1] * sim_duration_sec]
zoomin_dur_sec = zoomin_xlims[1] - zoomin_xlims[0]
zoomin_time_in_sec = np.logical_and(time_in_sec >= zoomin_xlims[0], time_in_sec <= zoomin_xlims[1])
zoomin_ylims = [soma_voltage_trace_GT[zoomin_time_in_sec].min() -2.5, -52]
zoomin_scalebar_xloc = zoomin_xlims[1] - 0.05 * zoomin_dur_sec

ax_trace_zoomin.plot(time_in_sec,soma_voltage_trace_GT,c='c')
ax_trace_zoomin.plot(time_in_sec,soma_voltage_trace_pred,c='m',linestyle=':')
ax_trace_zoomin.set_xlim(zoomin_xlims[0],zoomin_xlims[1])
ax_trace_zoomin.set_ylim(zoomin_ylims[0],zoomin_ylims[1])
ax_trace_zoomin.set_ylabel('$V_m$ (mV)', fontsize=xylabels_fontsize)
ax_trace_zoomin.set_xlabel('time (sec)', fontsize=xylabels_fontsize)

for tick_label in (ax_trace_zoomin.get_xticklabels() + ax_trace_zoomin.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)


# add scale bar to top plot
scalebar_loc = np.array([zoomout_scalebar_xloc,-25])
scalebar_size_x = 0.6
scalebar_str_x = '600 ms'
scalebar_size_y = 40
scalebar_str_y = '40 mV'

x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
y = [scalebar_loc[1], scalebar_loc[1]]
ax_trace_full.plot(x,y,lw=2,c='k')
ax_trace_full.text(scalebar_loc[0] - 0.05 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
                   scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')

x = [scalebar_loc[0], scalebar_loc[0]]
y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
ax_trace_full.plot(x,y,lw=2,c='k')
ax_trace_full.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
                   scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

# add dashed rectangle
rect_w = zoomin_xlims[1] - zoomin_xlims[0]
rect_h = zoomin_ylims[1] - zoomin_ylims[0]
rect_bl_x = zoomin_xlims[0]
rect_bl_y = zoomin_ylims[0]
dashed_rectangle = mpatches.Rectangle((rect_bl_x,rect_bl_y),rect_w,rect_h,linewidth=2,edgecolor='k',linestyle='--',facecolor='none')

ax_trace_full.add_patch(dashed_rectangle)

# add scalebar to bottom plot
scalebar_loc = np.array([zoomin_scalebar_xloc,-60])
scalebar_size_x = 0.06
scalebar_str_x = '60 ms'
scalebar_size_y = 5
scalebar_str_y = '5 mV'

x = [scalebar_loc[0], scalebar_loc[0] - scalebar_size_x]
y = [scalebar_loc[1], scalebar_loc[1]]
ax_trace_zoomin.plot(x,y,lw=2,c='k')
ax_trace_zoomin.text(scalebar_loc[0] - 0.15 * scalebar_size_x, scalebar_loc[1] - 0.15 * scalebar_size_y,
                     scalebar_str_x, color='k', fontsize=15, ha='right', va='top', rotation='horizontal')

x = [scalebar_loc[0], scalebar_loc[0]]
y = [scalebar_loc[1], scalebar_loc[1] + scalebar_size_y]
ax_trace_zoomin.plot(x,y,lw=2,c='k')
ax_trace_zoomin.text(scalebar_loc[0] + 0.1 * scalebar_size_x, scalebar_loc[1] + 0.6 * scalebar_size_y,
                     scalebar_str_y, color='k', fontsize=15, ha='left', va='top', rotation='horizontal')

################################################
# set evaluation plots
################################################

# ROC curve
ax_roc.plot(fpr, tpr, c='k')
ax_roc.set_xlabel('False alarm rate', fontsize=xylabels_fontsize)
ax_roc.set_ylabel('Hit rate', fontsize=xylabels_fontsize)
ax_roc.set_ylim(0,1.05)
ax_roc.set_xlim(-0.03,1)
ax_roc.spines['top'].set_visible(False)
ax_roc.spines['right'].set_visible(False)
for tick_label in (ax_roc.get_xticklabels() + ax_roc.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)
ax_roc.set_xticks([0.0,0.5,1.0])
ax_roc.set_yticks([0.0,0.5,1.0])

# ROC inset plot
left, bottom, width, height = [0.555, 0.75, 0.065, 0.15]
ax_roc_inset = fig.add_axes([left, bottom, width, height])
ax_roc_inset.plot(fpr, tpr, c='k')
ax_roc_inset.set_ylim(0,1.05)
ax_roc_inset.set_xlim(-0.001,0.045)
ax_roc_inset.spines['top'].set_visible(False)
ax_roc_inset.spines['right'].set_visible(False)
ax_roc_inset.scatter(actual_false_positive_rate, tpr[desired_fp_ind + 1], c='r', s=100)
for tick_label in (ax_roc_inset.get_xticklabels() + ax_roc_inset.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize - 6)

# cross correlation curve
max_firing_rate = 10 * int(max(1000 * recall_curve) / 10)
midpoint_firing_rate = 5 * int(max_firing_rate / 10)
ax_cross_corr.set_yticks([0, midpoint_firing_rate,max_firing_rate])
ax_cross_corr.plot(time_axis_cc, 1000 * recall_curve, c='k')
ax_cross_corr.set_ylim(0,1.05 * 1000 * recall_curve.max())
ax_cross_corr.set_xlabel('$\Delta t$ (ms)', fontsize=xylabels_fontsize)
ax_cross_corr.set_ylabel('spike rate (Hz)', fontsize=xylabels_fontsize)
ax_cross_corr.set_xticks([-50,0,50])
ax_cross_corr.spines['top'].set_visible(False)
ax_cross_corr.spines['right'].set_visible(False)
for tick_label in (ax_cross_corr.get_xticklabels() + ax_cross_corr.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)


# voltage scatter plot
soma_voltage_lims = np.round([np.percentile(selected_GT,0.2),np.percentile(selected_GT,99.8)]).astype(int)
soma_voltage_lims = np.round([np.percentile(selected_GT,0.2),-56]).astype(int)
voltage_granularity = 6
voltage_setpoint = -57
voltage_axis = np.arange(soma_voltage_lims[0],soma_voltage_lims[1])
voltage_ticks_to_show = np.unique(((voltage_axis - voltage_setpoint) / voltage_granularity).astype(int) * voltage_granularity + voltage_setpoint)
voltage_ticks_to_show = voltage_ticks_to_show[np.logical_and(voltage_ticks_to_show >= soma_voltage_lims[0],
                                                             voltage_ticks_to_show <= soma_voltage_lims[1])]
ax_scatter.set_xticks(voltage_ticks_to_show)
ax_scatter.set_yticks(voltage_ticks_to_show)

ax_scatter.scatter(selected_GT,selected_pred, s=3.0, alpha=0.7)
ax_scatter.set_xlabel('L5PC (%s) (mV)' %(model_string), fontsize=xylabels_fontsize)
ax_scatter.set_ylabel('ANN (mV)', fontsize=xylabels_fontsize)
ax_scatter.set_xlim(soma_voltage_lims[0],soma_voltage_lims[1])
ax_scatter.set_ylim(soma_voltage_lims[0],soma_voltage_lims[1])
ax_scatter.plot([-90,-50],[-90,-50], ls='-', c='k')
ax_scatter.spines['top'].set_visible(False)
ax_scatter.spines['right'].set_visible(False)
for tick_label in (ax_scatter.get_xticklabels() + ax_scatter.get_yticklabels()):
    tick_label.set_fontsize(xytick_labels_fontsize)

################################################
# set first layer weights plots
################################################


def draw_weights(first_layer_weights, selected_filter_ind, set_ylabel, ax00,ax10, ax01,ax11, ax02,ax12):

    time_span, _, num_filters = first_layer_weights.shape
    
    weight_granularity = 0.06
    time_granularity = 20
    max_time_to_show = 40
    
    if use_filtered:
        first_layer_weights_filtered = signal.convolve(first_layer_weights, (1.0 / filter_size) * np.ones((filter_size,1,1)), mode='valid')
        first_layer_weights = first_layer_weights_filtered
    
    if first_layer_weights.shape[0] >= max_time_to_show:
        first_layer_weights = first_layer_weights[:max_time_to_show]
    
    num_segments = 639
    basal_cutoff = 262
    tuft_cutoff  = [366,559]

    # invert if needed
    exc_sum = first_layer_weights[:12,:num_segments,selected_filter_ind].sum()
    inh_sum = first_layer_weights[:12,num_segments:,selected_filter_ind].sum()
    exc_minus_inh = exc_sum - inh_sum
    
    if exc_minus_inh < 0:
        first_layer_weights = -first_layer_weights
    
    upper_limit = max(np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),99.95),np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),0.05))
    xlims = [-5 * int(first_layer_weights.shape[0] / 5),0]
    
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
    oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
    tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)
    
    time_axis = -np.arange(first_layer_weights.shape[0])
    
    ##%% create nice figure
    figure_xlims = xlims
    figure_xlims[0] = max(-40, figure_xlims[0])
    
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
    oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
    tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)
    
    combined_filter = np.concatenate((basal_weights_example_filter_ex,oblique_weights_example_filter_ex,tuft_weights_example_filter_ex,
                                      basal_weights_example_filter_inh,oblique_weights_example_filter_inh,tuft_weights_example_filter_inh),axis=0)
    
    ##%% draw 2 x 3 (basal,oblique,tuft) matrix
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    basal_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_basal_syn_inds,selected_filter_ind].T)
    basal_weights_example_filter     = np.concatenate((basal_weights_example_filter_ex,basal_weights_example_filter_inh),axis=0)
    oblique_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_oblique_syn_inds,selected_filter_ind].T)
    oblique_weights_example_filter     = np.concatenate((oblique_weights_example_filter_ex, oblique_weights_example_filter_inh),axis=0)
    tuft_weights_example_filter_ex  = np.fliplr(first_layer_weights[:,ex_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter_inh = np.fliplr(first_layer_weights[:,inh_tuft_syn_inds,selected_filter_ind].T)
    tuft_weights_example_filter     = np.concatenate((tuft_weights_example_filter_ex,tuft_weights_example_filter_inh),axis=0)
    
    time_axis = -np.arange(first_layer_weights.shape[0])
    
    upper_limit = max(np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),99.8),np.percentile(abs(first_layer_weights[:,:,selected_filter_ind]),0.2))
    weights_ylims = np.array([-1.08,1.08]) * upper_limit
    
    weight_ticks_lims = (np.array(weights_ylims) / weight_granularity).astype(int) * weight_granularity
    
    ax00.axis('off')
    ax01.axis('off')
    ax02.axis('off')
    
    # basal
    weights_images = ax00.imshow(resize(basal_weights_example_filter, (combined_filter.shape[0], 200)),
                                 cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
    ax00.set_xticks([])
    ax00.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
    for ytick_label in ax00.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    
    ax_colorbar = inset_axes(ax00, width="67%", height="6%", loc=2)
    cbar = plt.colorbar(weights_images, cax=ax_colorbar, orientation="horizontal", ticks=[weight_ticks_lims[0], 0, weight_ticks_lims[1]])
    ax_colorbar.xaxis.set_ticks_position("bottom")
    cbar.ax.tick_params(labelsize=xytick_labels_fontsize - 2)
    ax00.text(10, 190, 'Weight (A.U)', color='k', fontsize=xytick_labels_fontsize + 1, ha='left', va='top', rotation='horizontal')
    
    ax10.plot(time_axis, np.fliplr(basal_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
    ax10.plot(time_axis, np.mean(np.fliplr(basal_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
    ax10.plot(time_axis, np.fliplr(basal_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
    ax10.plot(time_axis, np.mean(np.fliplr(basal_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)
    
    ax10.set_xlim(time_axis.min(),time_axis.max())
    ax10.set_ylim(weights_ylims[0],weights_ylims[1])
    if set_ylabel:
        ax10.set_ylabel('Weight (A.U)', fontsize=xylabels_fontsize)
    
    time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
    ax10.set_xticks(time_ticks_to_show)
    
    weights_axis = np.linspace(weights_ylims[0],weights_ylims[1],10)
    weight_ticks_to_show = np.unique((np.array(weights_axis) / weight_granularity).astype(int) * weight_granularity)
    ax10.set_yticks(weight_ticks_to_show)

    ax10.spines['top'].set_visible(False)
    ax10.spines['right'].set_visible(False)
    
    for ytick_label in ax10.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    for xtick_label in ax10.get_xticklabels():
        xtick_label.set_fontsize(xytick_labels_fontsize)

    # oblique
    weights_images = ax01.imshow(resize(oblique_weights_example_filter, (combined_filter.shape[0], 200)),
                                 cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
    ax01.set_xticks([])
    ax01.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
    for ytick_label in ax01.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    
    ax11.plot(time_axis, np.fliplr(oblique_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
    ax11.plot(time_axis, np.mean(np.fliplr(oblique_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
    ax11.plot(time_axis, np.fliplr(oblique_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
    ax11.plot(time_axis, np.mean(np.fliplr(oblique_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)
    
    ax11.set_xlim(time_axis.min(),time_axis.max())
    ax11.set_xlabel('Time before $t_0$ (ms)', fontsize=xylabels_fontsize)
    ax11.set_ylim(weights_ylims[0],weights_ylims[1])
    
    time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
    ax11.set_xticks(time_ticks_to_show)
    
    ax11.spines['top'].set_visible(False)
    ax11.spines['right'].set_visible(False)
    ax11.spines['left'].set_visible(False)

    ax11.set_yticks([])
    for ytick_label in ax11.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    for xtick_label in ax11.get_xticklabels():
        xtick_label.set_fontsize(xytick_labels_fontsize)
        
    # tuft
    weights_images = ax02.imshow(resize(tuft_weights_example_filter, (combined_filter.shape[0], 200)),
                                 cmap='jet', vmin=weights_ylims[0],vmax=weights_ylims[1], aspect='auto')
    ax02.set_xticks([])
    ax02.set_ylabel('Synaptic index', fontsize=xylabels_fontsize)
    for ytick_label in ax02.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    
    ax12.plot(time_axis, np.fliplr(tuft_weights_example_filter_ex).T , c='r', alpha=all_traces_alpha)
    ax12.plot(time_axis, np.mean(np.fliplr(tuft_weights_example_filter_ex).T, axis=1) , c='r', lw=mean_linewidth)
    ax12.plot(time_axis, np.fliplr(tuft_weights_example_filter_inh).T, c='b', alpha=all_traces_alpha)
    ax12.plot(time_axis, np.mean(np.fliplr(tuft_weights_example_filter_inh).T, axis=1) , c='b', lw=mean_linewidth)
    
    ax12.set_xlim(time_axis.min(),time_axis.max())
    ax12.set_ylim(weights_ylims[0],weights_ylims[1])
    ax12.set_yticks([])
    
    time_ticks_to_show = np.unique((np.array(time_axis) / time_granularity).astype(int) * time_granularity)
    ax12.set_xticks(time_ticks_to_show)
    
    ax12.spines['top'].set_visible(False)
    ax12.spines['right'].set_visible(False)
    ax12.spines['left'].set_visible(False)
    
    for ytick_label in ax12.get_yticklabels():
        ytick_label.set_fontsize(xytick_labels_fontsize)
    for xtick_label in ax12.get_xticklabels():
        xtick_label.set_fontsize(xytick_labels_fontsize)


draw_weights(first_layer_weights, selected_filter_ind, True,
             ax_weights_left_basal_heatmap,   ax_weights_left_basal_temporal,
             ax_weights_left_oblique_heatmap, ax_weights_left_oblique_temporal,
             ax_weights_left_apical_heatmap,  ax_weights_left_apical_temporal)

# save figure
if save_figures:
    figure_name = '%s__full_combined_figure_v3_%d' %(model_dir.split('/')[-2], np.random.randint(50))
    for file_ending in all_file_endings_to_use:
        if file_ending == '.png':
            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
        else:
            subfolder = '%s/' %(file_ending.split('.')[-1])
            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')


================================================================================
================================================================================
dataset_exploration.py:
=======================
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import glob
import time
import pickle
from scipy import signal

matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['svg.fonttype'] = 'none'

save_figures = True
all_file_endings_to_use = ['.png', '.pdf', '.svg']

# NOTE: during this project I've changed my coding style
# and was too lazy to edit the old code to match the new style
# so please ignore any style related wierdness
# thanks for not being petty about unimportant shit


#%% helper functions

def dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):
    
    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')
    for row_ind in row_inds_spike_times_map.keys():
        for spike_time in row_inds_spike_times_map[row_ind]:
            bin_spikes_matrix[row_ind,spike_time] = 1.0
    
    return bin_spikes_matrix


def parse_sim_experiment_file(sim_experiment_file):
    
    print('-----------------------------------------------------------------')
    print("loading file: '" + sim_experiment_file.split("\\")[-1] + "'")
    loading_start_time = time.time()
    experiment_dict = pickle.load(open(sim_experiment_file, "rb" ), encoding='latin1')
    
    # gather params
    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
    num_segments    = len(experiment_dict['Params']['allSegmentsType'])
    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000
    num_ex_synapses  = num_segments
    num_inh_synapses = num_segments
    num_synapses = num_ex_synapses + num_inh_synapses
    
    # collect X, y_spike, y_soma
    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')
    y_spike = np.zeros((sim_duration_ms,num_simulations))
    y_soma  = np.zeros((sim_duration_ms,num_simulations))
    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)
        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)
        X[:,:,k] = np.vstack((X_ex,X_inh))
        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)
        y_spike[spike_times,k] = 1.0
        y_soma[:,k] = sim_dict['somaVoltageLowRes']

    loading_duration_sec = time.time() - loading_start_time
    print('loading took %.3f seconds' %(loading_duration_sec))
    print('-----------------------------------------------------------------')

    return X, y_spike, y_soma


def parse_multiple_sim_experiment_files(sim_experiment_files):
    
    for k, sim_experiment_file in enumerate(sim_experiment_files):
        X_curr, y_spike_curr, y_soma_curr = parse_sim_experiment_file(sim_experiment_file)
        
        if k == 0:
            X       = X_curr
            y_spike = y_spike_curr
            y_soma  = y_soma_curr
        else:
            X       = np.dstack((X,X_curr))
            y_spike = np.hstack((y_spike,y_spike_curr))
            y_soma  = np.hstack((y_soma,y_soma_curr))
            
    return X, y_spike, y_soma


#%% scrip params

model_string = 'NMDA'
# model_string = 'AMPA'
# model_string = 'AMPA_SK'

morphology_folder = '/Reseach/Single_Neuron_InOut/morphology/'
models_dir        = '/Reseach/Single_Neuron_InOut/best_models/'
data_dir          = '/Reseach/Single_Neuron_InOut/data/'

if model_string == 'NMDA':
    test_data_dir      = data_dir + 'L5PC_NMDA_test/'
    output_figures_dir = '/media/davidb/ExtraDrive1/PhD_research/Figures/NMDA/'
elif model_string == 'AMPA':
    test_data_dir      = data_dir + 'L5PC_AMPA_test/'
    output_figures_dir = '/media/davidb/ExtraDrive1/PhD_research/Figures/AMPA/'
elif model_string == 'AMPA_SK':
    test_data_dir      = data_dir + 'L5PC_AMPA_SK_test/'
    output_figures_dir = '/media/davidb/ExtraDrive1/PhD_research/Figures/AMPA_SK/'

print('-----------------------------------------------')
print('finding data and morphology')
print('-----------------------------------------------')

test_files = glob.glob(test_data_dir  + '*_128_simulationRuns*_6_secDuration_*')
morphology_filename = morphology_folder + 'morphology_dict.pickle'

print('morphology_filename  : "%s"' %(morphology_filename.split('/')[-1]))
print('number of test files is %d' %(len(test_files)))
print('-----------------------------------------------')

#%% load valid and test datasets

print('----------------------------------------------------------------------------------------')
print('loading testing files...')
test_file_loading_start_time = time.time()

# load test data
X_test , y_spike_test , y_soma_test = parse_multiple_sim_experiment_files(test_files)

test_file_loading_duration_min = (time.time() - test_file_loading_start_time) / 60
print('time took to load data is %.3f minutes' %(test_file_loading_duration_min))
print('----------------------------------------------------------------------------------------')

#%% load morphology and display DVTs

## load morphology

morphology_dict = pickle.load(open(morphology_filename, "rb" ), encoding='latin1')

allSectionsLength                  = morphology_dict['all_sections_length']
allSections_DistFromSoma           = morphology_dict['all_sections_distance_from_soma']
allSegmentsLength                  = morphology_dict['all_segments_length']
allSegmentsType                    = morphology_dict['all_segments_type']
allSegments_DistFromSoma           = morphology_dict['all_segments_distance_from_soma']
allSegments_SectionDistFromSoma    = morphology_dict['all_segments_section_distance_from_soma']
allSegments_SectionInd             = morphology_dict['all_segments_section_index']
allSegments_seg_ind_within_sec_ind = morphology_dict['all_segments_segment_index_within_section_index']

all_basal_section_coords  = morphology_dict['all_basal_section_coords']
all_basal_segment_coords  = morphology_dict['all_basal_segment_coords']
all_apical_section_coords = morphology_dict['all_apical_section_coords']
all_apical_segment_coords = morphology_dict['all_apical_segment_coords']

seg_ind_to_xyz_coords_map = {}
seg_ind_to_sec_ind_map = {}
for k in range(len(allSegmentsType)):
    curr_segment_ind = allSegments_seg_ind_within_sec_ind[k]
    if allSegmentsType[k] == 'basal':
        curr_section_ind = allSegments_SectionInd[k]
        seg_ind_to_xyz_coords_map[k] = all_basal_segment_coords[(curr_section_ind,curr_segment_ind)]
        seg_ind_to_sec_ind_map[k] = ('basal', curr_section_ind)
    elif allSegmentsType[k] == 'apical':
        curr_section_ind = allSegments_SectionInd[k] - len(all_basal_section_coords)
        seg_ind_to_xyz_coords_map[k] = all_apical_segment_coords[(curr_section_ind,curr_segment_ind)]
        seg_ind_to_sec_ind_map[k] = ('apical', curr_section_ind)
    else:
        print('error!')

## load dendritic voltage traces of single simulation file

sim_experiment_file = test_files[0]
experiment_dict = pickle.load(open(sim_experiment_file, "rb" ), encoding='latin1')

X_spikes, _, _ = parse_sim_experiment_file(sim_experiment_file)

# gather params
num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])
num_segments    = len(experiment_dict['Params']['allSegmentsType'])
sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec'] * 1000

# collect X, y_spike, y_soma
sim_dict = experiment_dict['Results']['listOfSingleSimulationDicts'][0]

t_LR = sim_dict['recordingTimeLowRes']
t_HR = sim_dict['recordingTimeHighRes']
y_soma_LR  = np.zeros((sim_duration_ms,num_simulations))
y_nexus_LR = np.zeros((sim_duration_ms,num_simulations))
y_soma_HR  = np.zeros((sim_dict['somaVoltageHighRes'].shape[0],num_simulations))
y_nexus_HR = np.zeros((sim_dict['nexusVoltageHighRes'].shape[0],num_simulations))

y_DVTs  = np.zeros((num_segments,sim_duration_ms,num_simulations), dtype=np.float16)

# go over all simulations in the experiment and collect their results
for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):
    y_nexus_LR[:,k] = sim_dict['nexusVoltageLowRes']
    y_soma_LR[:,k] = sim_dict['somaVoltageLowRes']
    y_nexus_HR[:,k] = sim_dict['nexusVoltageHighRes']
    y_soma_HR[:,k] = sim_dict['somaVoltageHighRes']
    y_DVTs[:,:,k] = sim_dict['dendriticVoltagesLowRes']

    output_spike_times = np.int32(sim_dict['outputSpikeTimes'])
    # put "voltage spikes" in low res
    y_soma_LR[output_spike_times,k] = 30

#%% show some colored DVTs with morphology colored with same segment color and soma and nexus voltage at the bottom

time_point_ranges_options = [[2900,3100],[2800,3200],[2700,3300],[2600,3400],[2400,3600],[500,5500]]

for k in range(1):

    # select random simulation to display
    num_spikes_per_sim = (y_soma_LR > 20).sum(axis=0)
    possible_simulations = np.nonzero(np.logical_and(num_spikes_per_sim >= 4, num_spikes_per_sim <= 30))[0]
    random_simulation = np.random.choice(possible_simulations, size=1)[0]
    
    for time_points_ranges in time_point_ranges_options:
        # choose time points to display
        # time_points_ranges = [500,5500]
        # time_points_ranges = [2400,3600]
        # time_points_ranges = [2600,3400]
        # time_points_ranges = [2700,3300]
        # time_points_ranges = [2800,3200]
        # time_points_ranges = [2900,3100]
        width_mult_factor = 1.2
        
        duration_ms = time_points_ranges[1] - time_points_ranges[0]
        
        section_index      = np.array(experiment_dict['Params']['allSegments_SectionInd'])
        distance_from_soma = np.array(experiment_dict['Params']['allSegments_SectionDistFromSoma'])
        is_basal           = np.array([x == 'basal' for x in experiment_dict['Params']['allSegmentsType']])
        
        dend_colors = section_index * 20 + distance_from_soma
        dend_colors = dend_colors / dend_colors.max()
        
        all_seg_inds = seg_ind_to_xyz_coords_map.keys()
        colors = plt.cm.jet(dend_colors)
        
        # assemble the colors for each dendritic segment
        colors_per_segment = {}
        for seg_ind in all_seg_inds:
            colors_per_segment[seg_ind] = colors[seg_ind]
        
        fig = plt.figure(figsize=(32,15))
        fig.subplots_adjust(left=0.01,right=0.99,top=0.99,bottom=0.01,hspace=0.01, wspace=0.2)
        
        ax1 = plt.subplot2grid((1, 4), (0, 0), colspan=1)
        ax2 = plt.subplot2grid((1, 4), (0, 1), colspan=3)
        
        # plot the cell morphology
        ax1.set_axis_off()
        for key in all_seg_inds:
            seg_color = colors_per_segment[key]
            seg_line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()
            seg_x_coords = seg_ind_to_xyz_coords_map[key]['x']
            seg_y_coords = seg_ind_to_xyz_coords_map[key]['y']
            
            ax1.plot(seg_x_coords,seg_y_coords,lw=seg_line_width,color=seg_color)
        
        # add black soma
        ax1.scatter(x=45.5,y=19.8,s=120,c='k')
        ax1.set_xlim(-180,235)
        ax1.set_ylim(-210,1200)
        
        # plot the DVTs
        dend_colors = section_index * 20 + distance_from_soma
        dend_colors = dend_colors / dend_colors.max()
        sorted_according_to_colors = np.argsort(dend_colors)
        delta_voltage = 700.0 / sorted_according_to_colors.shape[0]
        for k in sorted_according_to_colors:
            ax2.plot(t_LR, 150 + k * delta_voltage + y_DVTs[k,:,random_simulation].T ,c=colors[k], alpha=0.55)
        
        # plot the soma and nexus traces
        ax2.plot(t_HR[:], 2.3 * y_soma_HR[:,random_simulation].T, c='black', lw=2.4)
        ax2.plot(t_HR[:], 2.3 * y_nexus_HR[:,random_simulation].T, c='red', lw=2.4)
        ax2.set_xlim(time_points_ranges[0],time_points_ranges[1])
        ax2.set_axis_off()
        
        if save_figures:
            figure_name = '%s__DVT_%d_ms_%d' %(model_string, duration_ms, np.random.randint(20))
            for file_ending in all_file_endings_to_use:
                if file_ending == '.png':
                    fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
                else:
                    subfolder = '%s/' %(file_ending.split('.')[-1])
                    fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% show input spikes (X) and output somatic voltages (maybe use valens graylevel DVTs and green/red for ex,inh??)

xytick_labels_fontsize = 25
title_fontsize = 30
xylabels_fontsize = 27
legend_fontsize = 28

plt.close('all')

for k in range(1):

    num_spikes_per_sim = y_spike_test.sum(axis=0)
    possible_simulations = np.nonzero(np.logical_and(num_spikes_per_sim >= 3, num_spikes_per_sim <= 30))[0]
    random_simulation = np.random.choice(possible_simulations, size=1)[0]
    
    num_synapses = X_test.shape[0]
    num_ex_synapses  = int(num_synapses / 2)
    num_inh_synapses = int(num_synapses / 2)
    
    # covert binary matrix to dict representation
    all_presynaptic_spikes_bin = X_test[:,:,random_simulation]
    
    exc_presynaptic_spikes = X_test[:num_ex_synapses,:,random_simulation].T
    inh_presynaptic_spikes = X_test[num_ex_synapses:,:,random_simulation].T
    
    #ex_presynaptic_spikes = X_test[random_simulation,:num_ex_synapses,:]
    soma_voltage_trace = y_soma_test[:,random_simulation]
    soma_voltage_trace[soma_voltage_trace > -30] = 30  # fix spikes height (that occurs due to low resolution temporal sampling)
    
    # for raster plot (scatter)
    exc_syn_activation_time, exc_syn_activation_index = np.nonzero(exc_presynaptic_spikes)
    exc_syn_activation_time = exc_syn_activation_time / 1000.0
    
    inh_syn_activation_time, inh_syn_activation_index = np.nonzero(inh_presynaptic_spikes)
    inh_syn_activation_index = inh_syn_activation_index + num_ex_synapses
    inh_syn_activation_time = inh_syn_activation_time / 1000.0
    
    
    exc_instantaneous_firing_rate = exc_presynaptic_spikes.sum(axis=1)
    inh_instantaneous_firing_rate = inh_presynaptic_spikes.sum(axis=1)
    
    tau = 18
    exc_instantaneous_firing_rate = signal.convolve(exc_instantaneous_firing_rate , (1.0 / tau) * np.ones((tau,)), mode='same')
    inh_instantaneous_firing_rate = signal.convolve(inh_instantaneous_firing_rate , (1.0 / tau) * np.ones((tau,)), mode='same')
    
    sim_duration_sec = sim_duration_ms / 1000.0
    time_in_sec = np.arange(sim_duration_ms) / 1000.0
    
    
    fig = plt.figure(figsize=(25,18))
    gs = gridspec.GridSpec(4,1)
    gs.update(left=0.08, right=0.97, bottom=0.05, top=0.97, hspace=0.12)
    ax0 = plt.subplot(gs[0:2,0])
    ax1 = plt.subplot(gs[2,0])
    ax2 = plt.subplot(gs[3,0])
    
    ax0.scatter(exc_syn_activation_time, exc_syn_activation_index, s=2, c='r')
    ax0.scatter(inh_syn_activation_time, inh_syn_activation_index, s=2, c='b')
    ax0.set_xlim(0, sim_duration_sec -0.01)
    ax0.set_ylabel('synapse index \n', fontsize=xylabels_fontsize)
    ax0.grid('off')
    ax0.set_yticks([])
    ax0.set_xticks([])
    
    ax1.plot(time_in_sec, exc_instantaneous_firing_rate, c='r')
    ax1.plot(time_in_sec, inh_instantaneous_firing_rate, c='b')
    ax1.set_xlim(0,sim_duration_sec)
    ax1.set_ylabel('# input spikes\n per milisecond', fontsize=xylabels_fontsize)
    ax1.legend(['excitation', 'inhibition'], fontsize=legend_fontsize, loc='upper left', ncol=2)
    for tick_label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        tick_label.set_fontsize(xytick_labels_fontsize)
    ax1.set_xticks([])

    ax2.plot(time_in_sec, soma_voltage_trace, c='k')
    ax2.set_xlim(0,sim_duration_sec)
    ax2.set_ylabel('Voltage [mV]', fontsize=xylabels_fontsize)
    ax2.set_xlabel('Time [sec]', fontsize=xylabels_fontsize)
    for tick_label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        tick_label.set_fontsize(xytick_labels_fontsize)

    if save_figures:
        figure_name = '%s__input_output_%d' %(model_string, np.random.randint(50))
        for file_ending in all_file_endings_to_use:
            if file_ending == '.png':
                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
            else:
                subfolder = '%s/' %(file_ending.split('.')[-1])
                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% create plot of "input ex/ing, bas/apic inst rate" and "output soma voltage" for several simulations

xytick_labels_fontsize = 25
title_fontsize = 30
xylabels_fontsize = 30
legend_fontsize = 30

plt.close('all')

for k in range(1):
    num_plots = 5
    selected_inds = np.random.choice(y_soma_test.shape[1],size=num_plots)
    
    # soma traces
    fig = plt.figure(figsize=(32,15))
    fig.subplots_adjust(left=0.05, bottom=0.05, right=0.95, top=0.95, wspace=0.05, hspace=0.15)
    for k in range(num_plots):
        soma_voltage_trace = y_soma_test[:,selected_inds[k]]
        soma_voltage_trace[soma_voltage_trace > -30] = 30  # fix spikes height (that occurs due to low resolution temporal sampling)
        
        plt.subplot(num_plots, 1, k + 1)
        plt.plot(time_in_sec, soma_voltage_trace)
        plt.xlim(0,sim_duration_sec)
        if k == int(num_plots / 2):
            plt.ylabel('Soma Voltage [mV]', fontsize=xylabels_fontsize)

        if k == num_plots:
            plt.xticks(fontsize=xytick_labels_fontsize)
            plt.yticks(fontsize=xytick_labels_fontsize)
        else:
            plt.xticks([])
            plt.yticks([])

    plt.xlabel('Time [sec]', fontsize=xylabels_fontsize)

    if save_figures:
        figure_name = '%s__soma_traces_%d' %(model_string, np.random.randint(20))
        for file_ending in all_file_endings_to_use:
            if file_ending == '.png':
                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
            else:
                subfolder = '%s/' %(file_ending.split('.')[-1])
                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')
    
    # input traces
    num_segments = 639
    basal_cutoff = 262
    tuft_cutoff  = [366,559]
    
    ex_basal_syn_inds    = np.arange(basal_cutoff)
    ex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))
    ex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])
    inh_basal_syn_inds   = num_segments + ex_basal_syn_inds
    inh_oblique_syn_inds = num_segments + ex_oblique_syn_inds
    inh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds
    
    tau = 18
    
    fig = plt.figure(figsize=(32,15))
    fig.subplots_adjust(left=0.07, bottom=0.05, right=0.95, top=0.9, wspace=0.05, hspace=0.1)
    for k in range(num_plots):
        ex_basal    = X_test[ex_basal_syn_inds,:,selected_inds[k]].sum(axis=0)
        ex_oblique  = X_test[ex_oblique_syn_inds,:,selected_inds[k]].sum(axis=0)
        ex_apical   = X_test[ex_tuft_syn_inds,:,selected_inds[k]].sum(axis=0)
        
        inh_basal   = X_test[inh_basal_syn_inds,:,selected_inds[k]].sum(axis=0)
        inh_oblique = X_test[inh_oblique_syn_inds,:,selected_inds[k]].sum(axis=0)
        inh_apical  = X_test[inh_tuft_syn_inds,:,selected_inds[k]].sum(axis=0)
    
        plt.subplot(num_plots,1,k + 1)
        plt.plot(time_in_sec, signal.convolve(ex_basal   , (1.0 / tau) * np.ones((tau,)), mode='same'), c='red')
        plt.plot(time_in_sec, signal.convolve(ex_oblique , (1.0 / tau) * np.ones((tau,)), mode='same'), c='orange')
        plt.plot(time_in_sec, signal.convolve(ex_apical  , (1.0 / tau) * np.ones((tau,)), mode='same'), c='yellow')
        plt.plot(time_in_sec, signal.convolve(inh_basal  , (1.0 / tau) * np.ones((tau,)), mode='same'), c='darkblue')
        plt.plot(time_in_sec, signal.convolve(inh_oblique, (1.0 / tau) * np.ones((tau,)), mode='same'), c='blue')
        plt.plot(time_in_sec, signal.convolve(inh_apical , (1.0 / tau) * np.ones((tau,)), mode='same'), c='skyblue')
        plt.xlim(0,sim_duration_sec)

        if k == num_plots:
            plt.xticks(fontsize=xytick_labels_fontsize)
            plt.yticks(fontsize=xytick_labels_fontsize)
        else:
            plt.xticks([])
            plt.yticks([])

        if k == 0:
            plt.legend(['exc basal','exc oblique','exc tuft','inh basal','inh oblique','inh tuft'],
                       bbox_to_anchor=(0.05, 1.27, 0.8, 0.25),
                       ncol=6, fontsize=legend_fontsize, loc='upper left')

        if k == int(num_plots / 2):
            plt.ylabel('Instantanous input rate \n[spikes per second per subtree]', fontsize=xylabels_fontsize)

    for k in range(num_plots):
        selected_ind = np.random.choice(y_soma_test.shape[1],size=1)[0]
        
        soma_voltage_trace = y_soma_test[:,selected_ind]
        soma_voltage_trace[soma_voltage_trace > -30] = 30  # fix spikes height (that occurs due to low resolution temporal sampling)
        
        plt.figure(figsize=(32,15))
        plt.subplots_adjust(left=0.07, bottom=0.05, right=0.95, top=0.95, wspace=0.05, hspace=0.1)
    
        ex_basal    = X_test[ex_basal_syn_inds,:,selected_ind].sum(axis=0)
        ex_oblique  = X_test[ex_oblique_syn_inds,:,selected_ind].sum(axis=0)
        ex_apical   = X_test[ex_tuft_syn_inds,:,selected_ind].sum(axis=0)
        
        inh_basal   = X_test[inh_basal_syn_inds,:,selected_ind].sum(axis=0)
        inh_oblique = X_test[inh_oblique_syn_inds,:,selected_ind].sum(axis=0)
        inh_apical  = X_test[inh_tuft_syn_inds,:,selected_ind].sum(axis=0)
        
        plt.subplot(2,1,1)
        plt.plot(time_in_sec, signal.convolve(ex_basal   , 1000 * (1.0 / tau) * np.ones((tau,)), mode='same'), c='red')[tau:]
        plt.plot(time_in_sec, signal.convolve(ex_oblique , 1000 * (1.0 / tau) * np.ones((tau,)), mode='same'), c='orange')[tau:]
        plt.plot(time_in_sec, signal.convolve(ex_apical  , 1000 * (1.0 / tau) * np.ones((tau,)), mode='same'), c='yellow')[tau:]
        plt.plot(time_in_sec, signal.convolve(inh_basal  , 1000 * (1.0 / tau) * np.ones((tau,)), mode='same'), c='darkblue')[tau:]
        plt.plot(time_in_sec, signal.convolve(inh_oblique, 1000 * (1.0 / tau) * np.ones((tau,)), mode='same'), c='blue')[tau:]
        plt.plot(time_in_sec, signal.convolve(inh_apical , 1000 * (1.0 / tau) * np.ones((tau,)), mode='same'), c='skyblue')[tau:]
        plt.ylabel('Instantanous input rate \n[spikes per second per subtree]', fontsize=xylabels_fontsize)
        plt.legend(['exc basal','exc oblique','exc tuft','inh basal','inh oblique','inh tuft'], ncol=2, fontsize=legend_fontsize, loc='upper left')
        plt.xlim(0,sim_duration_sec)
        plt.subplot(2,1,2)
        plt.plot(time_in_sec, soma_voltage_trace)
        plt.ylabel('Soma Voltage [mV]', fontsize=xylabels_fontsize)
        plt.xlim(0,sim_duration_sec)
        plt.xticks(fontsize=xytick_labels_fontsize)
        plt.yticks(fontsize=xytick_labels_fontsize)

    plt.xlabel('Time [sec]', fontsize=xylabels_fontsize)
    
    if save_figures:
        figure_name = '%s__inst_rates_%d' %(model_string, np.random.randint(50))
        for file_ending in all_file_endings_to_use:
            if file_ending == '.png':
                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
            else:
                subfolder = '%s/' %(file_ending.split('.')[-1])
                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')

#%% show histograms and scatter plots of input and output firing rates (x=ex, y=inh, c=output) for different time windows

plt.close('all')

for time_window_size_ms in [100,200,1000]:

    xytick_labels_fontsize = 34
    title_fontsize = 37
    xylabels_fontsize = 34
    legend_fontsize = 32
    
    half_window_size = int(time_window_size_ms / 2)
    
    selected_simulations = np.random.choice(X_test.shape[2], size=1000, replace=False)
    
    X_exc = X_test[:num_ex_synapses,:,selected_simulations].sum(axis=0).astype(np.float32)
    X_inh = X_test[num_ex_synapses:,:,selected_simulations].sum(axis=0).astype(np.float32)
    y_out = y_spike_test[:,selected_simulations]
    
    tau = time_window_size_ms
    
    filter_to_use = np.ones((tau,1))
    
    X_exc_aggregated = signal.convolve(X_exc, filter_to_use, mode='same')[half_window_size::half_window_size,:].ravel()
    X_inh_aggregated = signal.convolve(X_inh, filter_to_use, mode='same')[half_window_size::half_window_size,:].ravel()
    y_out_aggregated = signal.convolve(y_out, filter_to_use, mode='same')[half_window_size::half_window_size,:].ravel()
    
    # histograms
    fig = plt.figure(figsize=(32,15))
    fig.subplots_adjust(left=0.05, bottom=0.08, right=0.95, top=0.92, wspace=0.2, hspace=0.1)
    plt.suptitle('input and output histograms (window = %d ms)' %(time_window_size_ms), fontsize=title_fontsize)
    plt.subplot(1,3,1); plt.ylabel('Counts', fontsize=xylabels_fontsize)
    plt.hist(X_exc_aggregated, bins=100); plt.xlabel('num excitatory spikes per window', fontsize=xylabels_fontsize)
    xticks = plt.xticks()[0]
    yticks = plt.yticks()[0]
    plt.xticks(np.linspace(0,xticks[-1],5).astype(int), fontsize=xytick_labels_fontsize)
    plt.yticks(np.linspace(0,yticks[-1],5).astype(int), fontsize=xytick_labels_fontsize)

    plt.subplot(1,3,2)
    plt.hist(X_inh_aggregated, bins=100); plt.xlabel('num inhibitory spikes per window', fontsize=xylabels_fontsize)
    xticks = plt.xticks()[0]
    yticks = plt.yticks()[0]
    plt.xticks(np.linspace(0,xticks[-1],5).astype(int), fontsize=xytick_labels_fontsize)
    plt.yticks(np.linspace(0,yticks[-1],5).astype(int), fontsize=xytick_labels_fontsize)

    plt.subplot(1,3,3)
    if time_window_size_ms < 300:
        plt.hist(y_out_aggregated, bins=np.arange(1, 7) - 0.5); plt.xlabel('num output spikes per window', fontsize=xylabels_fontsize)
    else:
        plt.hist(y_out_aggregated, bins=np.arange(1,14) - 0.5); plt.xlabel('num output spikes per window', fontsize=xylabels_fontsize)
    plt.xticks(fontsize=xytick_labels_fontsize)
    plt.yticks(fontsize=xytick_labels_fontsize)

    if save_figures:
        figure_name = '%s__inout_rates_histograms_%d_ms' %(model_string, time_window_size_ms)
        for file_ending in all_file_endings_to_use:
            if file_ending == '.png':
                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
            else:
                subfolder = '%s/' %(file_ending.split('.')[-1])
                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')
    
    # scatter
    fig = plt.figure(figsize=(18,18))
    fig.subplots_adjust(left=0.15, bottom=0.10, right=0.95, top=0.95, wspace=0.1, hspace=0.1)
    plt.scatter(x=X_inh_aggregated,y=X_exc_aggregated,c=y_out_aggregated, vmin=0, vmax=3, s=100, alpha=0.55)
    plt.ylabel('num excitatory spikes per window', fontsize=xylabels_fontsize)
    plt.xlabel('num inhibitory spikes per window', fontsize=xylabels_fontsize)
    plt.colorbar()
    plt.title('scatter plot (x=inh, y=exc, color=output)', fontsize=title_fontsize)
    xticks = plt.xticks()[0]
    yticks = plt.yticks()[0]
    plt.xticks(np.linspace(0,xticks[-1],5).astype(int), fontsize=xytick_labels_fontsize)
    plt.yticks(np.linspace(0,yticks[-1],5).astype(int), fontsize=xytick_labels_fontsize)

    if save_figures:
        figure_name = '%s__inout_rates_scatter_%d_ms' %(model_string, time_window_size_ms)
        for file_ending in all_file_endings_to_use:
            if file_ending == '.png':
                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')
            else:
                subfolder = '%s/' %(file_ending.split('.')[-1])
                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')


#%%
================================================================================
================================================================================
L5PC_NEURON_simulation/mods/ProbUDFsyn2.mod:
============================================
TITLE AMPA and NMDA receptor with presynaptic short-term plasticity 


COMMENT
AMPA and NMDA receptor conductance using a dual-exponential profile
presynaptic short-term plasticity based on Fuhrmann et al. 2002
Implemented by Srikanth Ramaswamy, Blue Brain Project, July 2009
Etay: changed weight to be equal for NMDA and AMPA, gmax accessible in Neuron

ENDCOMMENT


NEURON {

        POINT_PROCESS ProbUDFsyn2  
        RANGE tau_r, tau_d
        RANGE Use, u, Dep, Fac, u0
        RANGE i, g, e, gmax
        NONSPECIFIC_CURRENT i
	POINTER rng
}

PARAMETER {

        tau_r = 0.2   (ms)  : dual-exponential conductance profile
        tau_d = 1.7    (ms)  : IMPORTANT: tau_r < tau_d
        Use = 1.0   (1)   : Utilization of synaptic efficacy (just initial values! Use, Dep and Fac are overwritten by BlueBuilder assigned values) 
        Dep = 100   (ms)  : relaxation time constant from depression
        Fac = 10   (ms)  :  relaxation time constant from facilitation
        e = 0     (mV)  : AMPA and NMDA reversal potential
    	gmax = .001 (uS) : weight conversion factor (from nS to uS)
    	u0 = 0 :initial value of u, which is the running value of Use
}

COMMENT
The Verbatim block is needed to generate random nos. from a uniform distribution between 0 and 1 
for comparison with Pr to decide whether to activate the synapse or not
ENDCOMMENT
   
VERBATIM

#include<stdlib.h>
#include<stdio.h>
#include<math.h>

double nrn_random_pick(void* r);
void* nrn_random_arg(int argpos);

ENDVERBATIM
  

ASSIGNED {

        v (mV)
        i (nA)
	g (uS)
        factor
	rng
	weight_NMDA
}

STATE {
        A       : state variable to construct the dual-exponential profile - decays with conductance tau_r_AMPA
        B       : state variable to construct the dual-exponential profile - decays with conductance tau_d_AMPA
}

INITIAL{

  LOCAL tp
        
	A = 0
  B = 0
	
        
	tp = (tau_r*tau_d)/(tau_d-tau_r)*log(tau_d/tau_r) :time to peak of the conductance
	      
	factor = -exp(-tp/tau_r)+exp(-tp/tau_d) : Normalization factor - so that when t = tp, gsyn = gpeak
        factor = 1/factor
 
}

BREAKPOINT {

        SOLVE state METHOD cnexp
        g = gmax*(B-A) :compute time varying conductance as the difference of state variables B and A
        i = g*(v-e) :compute the driving force based on the time varying conductance, membrane potential, and reversal
}

DERIVATIVE state{

        A' = -A/tau_r
        B' = -B/tau_d
}


NET_RECEIVE (weight, Pv, Pr, u, tsyn (ms)){
	
        INITIAL{
                Pv=1
                u=u0
                tsyn=t
            }

        : calc u at event-
        if (Fac > 0) {
                u = u*exp(-(t - tsyn)/Fac) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           } else {
                  u = Use  
           } 
           if(Fac > 0){
                  u = u + Use*(1-u) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           }    

        
            Pv  = 1 - (1-Pv) * exp(-(t-tsyn)/Dep) :Probability Pv for a vesicle to be available for release, analogous to the pool of synaptic
                                                 :resources available for release in the deterministic model. Eq. 3 in Fuhrmann et al.
            Pr  = u * Pv                         :Pr is calculated as Pv * u (running value of Use)
            Pv  = Pv - u * Pv                    :update Pv as per Eq. 3 in Fuhrmann et al.
            :printf("Pv = %g\n", Pv)
            :printf("Pr = %g\n", Pr)
            tsyn = t
                
		   if (erand() < Pr){
	
                    A = A + weight*factor
                    B = B + weight*factor
                }
}

PROCEDURE setRNG() {
VERBATIM
    {
        /**
         * This function takes a NEURON Random object declared in hoc and makes it usable by this mod file.
         * Note that this method is taken from Brett paper as used by netstim.hoc and netstim.mod
         * which points out that the Random must be in negexp(1) mode
         */
        void** pv = (void**)(&_p_rng);
        if( ifarg(1)) {
            *pv = nrn_random_arg(1);
        } else {
            *pv = (void*)0;
        }
    }
ENDVERBATIM
}

FUNCTION erand() {
VERBATIM
	    //FILE *fi;
        double value;
        if (_p_rng) {
                /*
                :Supports separate independent but reproducible streams for
                : each instance. However, the corresponding hoc Random
                : distribution MUST be set to Random.negexp(1)
                */
                value = nrn_random_pick(_p_rng);
		        //fi = fopen("RandomStreamMCellRan4.txt", "w");
                //fprintf(fi,"random stream for this simulation = %lf\n",value);
                //printf("random stream for this simulation = %lf\n",value);
                return value;
        }else{
ENDVERBATIM
                : the old standby. Cannot use if reproducible parallel sim
                : independent of nhost or which host this instance is on
                : is desired, since each instance on this cpu draws from
                : the same stream
                erand = exprand(1)
VERBATIM
        }
ENDVERBATIM
        erand = value
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/Ca_LVAst.mod:
=========================================
:Comment : LVA ca channel. Note: mtau is an approximation from the plots
:Reference : :		Avery and Johnston 1996, tau from Randall 1997
:Comment: shifted by -10 mv to correct for junction potential
:Comment: corrected rates using q10 = 2.3, target temperature 34, orginal 21

NEURON	{
	SUFFIX Ca_LVAst
	USEION ca READ eca WRITE ica
	RANGE gCa_LVAstbar, gCa_LVAst, ica
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gCa_LVAstbar = 0.00001 (S/cm2)
}

ASSIGNED	{
	v	(mV)
	eca	(mV)
	ica	(mA/cm2)
	gCa_LVAst	(S/cm2)
	mInf
	mTau
	hInf
	hTau
}

STATE	{
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gCa_LVAst = gCa_LVAstbar*m*m*h
	ica = gCa_LVAst*(v-eca)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)

	UNITSOFF
		v = v + 10
		mInf = 1.0000/(1+ exp((v - -30.000)/-6))
		mTau = (5.0000 + 20.0000/(1+exp((v - -25.000)/5)))/qt
		hInf = 1.0000/(1+ exp((v - -80.000)/6.4))
		hTau = (20.0000 + 50.0000/(1+exp((v - -40.000)/7)))/qt
		v = v - 10
	UNITSON
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/NaTa_t.mod:
=======================================
:Reference :Colbert and Pan 2002

NEURON	{
	SUFFIX NaTa_t
	USEION na READ ena WRITE ina
	RANGE gNaTa_tbar, gNaTa_t, ina
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gNaTa_tbar = 0.00001 (S/cm2)
}

ASSIGNED	{
	v	(mV)
	ena	(mV)
	ina	(mA/cm2)
	gNaTa_t	(S/cm2)
	mInf
	mTau
	mAlpha
	mBeta
	hInf
	hTau
	hAlpha
	hBeta
}

STATE	{
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gNaTa_t = gNaTa_tbar*m*m*m*h
	ina = gNaTa_t*(v-ena)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)
	
  UNITSOFF
    if(v == -38){
    	v = v+0.0001
    }
		mAlpha = (0.182 * (v- -38))/(1-(exp(-(v- -38)/6)))
		mBeta  = (0.124 * (-v -38))/(1-(exp(-(-v -38)/6)))
		mTau = (1/(mAlpha + mBeta))/qt
		mInf = mAlpha/(mAlpha + mBeta)

    if(v == -66){
      v = v + 0.0001
    }

		hAlpha = (-0.015 * (v- -66))/(1-(exp((v- -66)/6)))
		hBeta  = (-0.015 * (-v -66))/(1-(exp((-v -66)/6)))
		hTau = (1/(hAlpha + hBeta))/qt
		hInf = hAlpha/(hAlpha + hBeta)
	UNITSON
}
================================================================================
================================================================================
L5PC_NEURON_simulation/mods/epsp.mod:
=====================================
: this model is built-in to neuron with suffix epsp
: Schaefer et al. 2003

COMMENT
modified from syn2.mod
injected current with exponential rise and decay current defined by
         i = 0 for t < onset and
         i=amp*((1-exp(-(t-onset)/tau0))-(1-exp(-(t-onset)/tau1)))
          for t > onset

	compare to experimental current injection:
 	i = - amp*(1-exp(-t/t1))*(exp(-t/t2))

	-> tau1==t2   tau0 ^-1 = t1^-1 + t2^-1
ENDCOMMENT
					       
INDEPENDENT {t FROM 0 TO 1 WITH 1 (ms)}

NEURON {
	POINT_PROCESS epsp
	RANGE onset, tau0, tau1, imax, i, myv
	NONSPECIFIC_CURRENT i
}
UNITS {
	(nA) = (nanoamp)
	(mV) = (millivolt)
	(umho) = (micromho)
}

PARAMETER {
	onset=0  (ms)
	tau0=0.2 (ms)
	tau1=3.0 (ms)
	imax=0 	 (nA)
	v	 (mV)
}

ASSIGNED { i (nA)  myv (mV)}

LOCAL   a[2]
LOCAL   tpeak
LOCAL   adjust
LOCAL   amp

BREAKPOINT {
	myv = v
        i = curr(t)
}

FUNCTION myexp(x) {
	if (x < -100) {
	myexp = 0
	}else{
	myexp = exp(x)
	}
}

FUNCTION curr(x) {				
	tpeak=tau0*tau1*log(tau0/tau1)/(tau0-tau1)
	adjust=1/((1-myexp(-tpeak/tau0))-(1-myexp(-tpeak/tau1)))
	amp=adjust*imax
	if (x < onset) {
		curr = 0
	}else{
		a[0]=1-myexp(-(x-onset)/tau0)
		a[1]=1-myexp(-(x-onset)/tau1)
		curr = -amp*(a[0]-a[1])
	}
}

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/Nap_Et2.mod:
========================================
:Comment : mtau deduced from text (said to be 6 times faster than for NaTa)
:Comment : so I used the equations from NaT and multiplied by 6
:Reference : Modeled according to kinetics derived from Magistretti & Alonso 1999
:Comment: corrected rates using q10 = 2.3, target temperature 34, orginal 21

NEURON	{
	SUFFIX Nap_Et2
	USEION na READ ena WRITE ina
	RANGE gNap_Et2bar, gNap_Et2, ina
}

UNITS	{
	(S) = (siemens)
	(mV) = (millivolt)
	(mA) = (milliamp)
}

PARAMETER	{
	gNap_Et2bar = 0.00001 (S/cm2)
}

ASSIGNED	{
	v	(mV)
	ena	(mV)
	ina	(mA/cm2)
	gNap_Et2	(S/cm2)
	mInf
	mTau
	mAlpha
	mBeta
	hInf
	hTau
	hAlpha
	hBeta
}

STATE	{
	m
	h
}

BREAKPOINT	{
	SOLVE states METHOD cnexp
	gNap_Et2 = gNap_Et2bar*m*m*m*h
	ina = gNap_Et2*(v-ena)
}

DERIVATIVE states	{
	rates()
	m' = (mInf-m)/mTau
	h' = (hInf-h)/hTau
}

INITIAL{
	rates()
	m = mInf
	h = hInf
}

PROCEDURE rates(){
  LOCAL qt
  qt = 2.3^((34-21)/10)

	UNITSOFF
		mInf = 1.0/(1+exp((v- -52.6)/-4.6))
    if(v == -38){
    	v = v+0.0001
    }
		mAlpha = (0.182 * (v- -38))/(1-(exp(-(v- -38)/6)))
		mBeta  = (0.124 * (-v -38))/(1-(exp(-(-v -38)/6)))
		mTau = 6*(1/(mAlpha + mBeta))/qt

  	if(v == -17){
   		v = v + 0.0001
  	}
    if(v == -64.4){
      v = v+0.0001
    }

		hInf = 1.0/(1+exp((v- -48.8)/10))
    hAlpha = -2.88e-6 * (v + 17) / (1 - exp((v + 17)/4.63))
    hBeta = 6.94e-6 * (v + 64.4) / (1 - exp(-(v + 64.4)/2.63))
		hTau = (1/(hAlpha + hBeta))/qt
	UNITSON
}
================================================================================
================================================================================
L5PC_NEURON_simulation/L5PCbiophys5b.hoc:
=========================================
// This is a new biophysics for use in the Shai et al. (2015) PLoS Computational
// Biology Paper


// Author: Etay Hay, 2011
//    Models of Neocortical Layer 5b Pyramidal Cells Capturing a Wide Range of
//    Dendritic and Perisomatic Active Properties
//    (Hay et al., PLoS Computational Biology, 2011) 
//
// Model of L5 Pyramidal Cell, constrained both for BAC firing and Current Step Firing
//    with AP initiation in the axon


begintemplate L5PCbiophys
public biophys

proc biophys() {
	forsec $o1.all {
	  insert pas
		cm = 1
		Ra = 100
		e_pas = -90
	}

  forsec $o1.axonal {
  	insert Im 
  	insert Ca_LVAst 
  	insert Ca_HVA
  	insert CaDynamics_E2 
  	insert SKv3_1 
  	insert SK_E2 
  	insert K_Tst 
  	insert K_Pst 
  	insert Nap_Et2 
  	insert NaTa_t 
		ek = -85
		ena = 50
    insert Ih
  	gIhbar_Ih = 0.0001/2
		g_pas = 3e-5
  	gImbar_Im = 0.013322 
  	decay_CaDynamics_E2 = 277.300774 
  	gamma_CaDynamics_E2 = 0.000525 
  	gCa_LVAstbar_Ca_LVAst = 0.000813 
  	gCa_HVAbar_Ca_HVA = 0.000222 
  	gSKv3_1bar_SKv3_1 = 0.473799 
  	gSK_E2bar_SK_E2 = 0.000047 
  	gK_Tstbar_K_Tst = 0.077274 
  	gK_Pstbar_K_Pst = 0.188851 
  	gNap_Et2bar_Nap_Et2 = 0.005834 
  	gNaTa_tbar_NaTa_t = 3.89618 
	}

  forsec $o1.somatic {
  	insert Im 
  	insert Ca_LVAst 
  	insert Ca_HVA
  	insert CaDynamics_E2 
  	insert SK_E2 
  	insert SKv3_1 
  	insert NaTs2_t 
		ek = -85
		ena = 50
    insert Ih
  	gIhbar_Ih = 0.0001*0.75
		g_pas = 3e-5
  	gImbar_Im = 0.000008 
  	decay_CaDynamics_E2 = 294.679571 
  	gamma_CaDynamics_E2 = 0.000509 
  	gCa_LVAstbar_Ca_LVAst = 0.000557 
  	gCa_HVAbar_Ca_HVA = 0.000644 
  	gSK_E2bar_SK_E2 = 0.09965 
  	gSKv3_1bar_SKv3_1 = 0.338029 
  	gNaTs2_tbar_NaTs2_t = 0.998912 
  }

	forsec $o1.apical {
    insert CaDynamics_E2 
  	insert SK_E2 
  	insert Ca_LVAst 
  	insert Ca_HVA 
  	insert SKv3_1 
  	insert NaTs2_t 
  	insert Im 
    insert Ih
		ek = -85
		ena = 50
		cm = 2
		g_pas = 6e-5
  	decay_CaDynamics_E2 = 35.725651 
  	gamma_CaDynamics_E2 = 0.000637 
  	gSK_E2bar_SK_E2 = 0.000002 
  	gCa_HVAbar_Ca_HVA = 0.000701 
  	gSKv3_1bar_SKv3_1 = 0.001808 
  	gNaTs2_tbar_NaTs2_t = 0.021489
  	gImbar_Im = 0.00099 
  	gIhbar_Ih =  .00015 //0.00001*1.5
	}

  $o1.distribute_channels("apic","gIhbar_Ih",4,-0.8696,3.6161,0.0,2.0870,0.00010000000) 
  $o1.distribute_channels("apic","gCa_LVAstbar_Ca_LVAst",3,1.000000,0.010000,685.000000,885.000000,0.1419540000*1.6) 
	
  forsec $o1.basal {
    insert Ih
  	gIhbar_Ih = 0.0001/2
		cm = 2
		g_pas = 6e-5
	}
}

endtemplate L5PCbiophys

================================================================================
================================================================================
L5PC_NEURON_simulation/mods/ProbGABAAB_EMS.mod:
===============================================
COMMENT
/*                                                                               
Copyright (c) 2015 EPFL-BBP, All rights reserved.                                
                                                                                 
THIS SOFTWARE IS PROVIDED BY THE BLUE BRAIN PROJECT ``AS IS''                    
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,            
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR           
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE BLUE BRAIN PROJECT                 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF             
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR                  
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,            
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE             
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN           
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                    
                                                                                 
This work is licensed under a                                                    
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
To view a copy of this license, visit                                            
http://creativecommons.org/licenses/by-nc-sa/4.0/legalcode or send a letter to   
Creative Commons,                                                                
171 Second Street, Suite 300,                                                    
San Francisco, California, 94105, USA.                                           
*/                                                                               
ENDCOMMENT

TITLE GABAAB receptor with presynaptic short-term plasticity 


COMMENT
GABAA receptor conductance using a dual-exponential profile
presynaptic short-term plasticity based on Fuhrmann et al, 2002
Implemented by Srikanth Ramaswamy, Blue Brain Project, March 2009

_EMS (Eilif Michael Srikanth)
Modification of ProbGABAA: 2-State model by Eilif Muller, Michael Reimann, Srikanth Ramaswamy, Blue Brain Project, August 2011
This new model was motivated by the following constraints:

1) No consumption on failure.  
2) No release just after release until recovery.
3) Same ensemble averaged trace as deterministic/canonical Tsodyks-Markram 
   using same parameters determined from experiment.
4) Same quantal size as present production probabilistic model.

To satisfy these constaints, the synapse is implemented as a
uni-vesicular (generalization to multi-vesicular should be
straight-forward) 2-state Markov process.  The states are
{1=recovered, 0=unrecovered}.

For a pre-synaptic spike or external spontaneous release trigger
event, the synapse will only release if it is in the recovered state,
and with probability u (which follows facilitation dynamics).  If it
releases, it will transition to the unrecovered state.  Recovery is as
a Poisson process with rate 1/Dep.

This model satisfies all of (1)-(4).
ENDCOMMENT


COMMENT
/**
 @file ProbGABAAB_EMS.mod
 @brief GABAAB receptor with presynaptic short-term plasticity
 @author Eilif Muller, Michael Reimann, Srikanth Ramaswamy, James King @ BBP
 @date 2011
*/
ENDCOMMENT

NEURON {
    THREADSAFE
	POINT_PROCESS ProbGABAAB_EMS
	RANGE tau_r_GABAA, tau_d_GABAA, tau_r_GABAB, tau_d_GABAB 
	RANGE Use, u, Dep, Fac, u0, Rstate, tsyn_fac, u
	RANGE i,i_GABAA, i_GABAB, g_GABAA, g_GABAB, g, e_GABAA, e_GABAB, GABAB_ratio
        RANGE A_GABAA_step, B_GABAA_step, A_GABAB_step, B_GABAB_step
	NONSPECIFIC_CURRENT i
    POINTER rng
    RANGE synapseID, verboseLevel
}

PARAMETER {
	tau_r_GABAA  = 0.2   (ms)  : dual-exponential conductance profile
	tau_d_GABAA = 8   (ms)  : IMPORTANT: tau_r < tau_d
    tau_r_GABAB  = 3.5   (ms)  : dual-exponential conductance profile :Placeholder value from hippocampal recordings SR
	tau_d_GABAB = 260.9   (ms)  : IMPORTANT: tau_r < tau_d  :Placeholder value from hippocampal recordings 
	Use        = 1.0   (1)   : Utilization of synaptic efficacy (just initial values! Use, Dep and Fac are overwritten by BlueBuilder assigned values) 
	Dep   = 100   (ms)  : relaxation time constant from depression
	Fac   = 10   (ms)  :  relaxation time constant from facilitation
	e_GABAA    = -80     (mV)  : GABAA reversal potential
    e_GABAB    = -97     (mV)  : GABAB reversal potential
    gmax = .001 (uS) : weight conversion factor (from nS to uS)
    u0 = 0 :initial value of u, which is the running value of release probability
    synapseID = 0
    verboseLevel = 0
	GABAB_ratio = 0 (1) : The ratio of GABAB to GABAA
}

COMMENT
The Verbatim block is needed to generate random nos. from a uniform distribution between 0 and 1 
for comparison with Pr to decide whether to activate the synapse or not
ENDCOMMENT
   
VERBATIM
#include<stdlib.h>
#include<stdio.h>
#include<math.h>

double nrn_random_pick(void* r);
void* nrn_random_arg(int argpos);

ENDVERBATIM
  

ASSIGNED {
	v (mV)
	i (nA)
        i_GABAA (nA)
        i_GABAB (nA)
        g_GABAA (uS)
        g_GABAB (uS)
        A_GABAA_step
        B_GABAA_step
        A_GABAB_step
        B_GABAB_step
	g (uS)
	factor_GABAA
        factor_GABAB
        rng

       : Recording these three, you can observe full state of model
       : tsyn_fac gives you presynaptic times, Rstate gives you 
	 : state transitions,
	 : u gives you the "release probability" at transitions 
	 : (attention: u is event based based, so only valid at incoming events)
       Rstate (1) : recovered state {0=unrecovered, 1=recovered}
       tsyn_fac (ms) : the time of the last spike
       u (1) : running release probability


}

STATE {
        A_GABAA       : GABAA state variable to construct the dual-exponential profile - decays with conductance tau_r_GABAA
        B_GABAA       : GABAA state variable to construct the dual-exponential profile - decays with conductance tau_d_GABAA
        A_GABAB       : GABAB state variable to construct the dual-exponential profile - decays with conductance tau_r_GABAB
        B_GABAB       : GABAB state variable to construct the dual-exponential profile - decays with conductance tau_d_GABAB
}

INITIAL{

        LOCAL tp_GABAA, tp_GABAB

	Rstate=1
	tsyn_fac=0
	u=u0
        
        A_GABAA = 0
        B_GABAA = 0
        
        A_GABAB = 0
        B_GABAB = 0
        
        tp_GABAA = (tau_r_GABAA*tau_d_GABAA)/(tau_d_GABAA-tau_r_GABAA)*log(tau_d_GABAA/tau_r_GABAA) :time to peak of the conductance
        tp_GABAB = (tau_r_GABAB*tau_d_GABAB)/(tau_d_GABAB-tau_r_GABAB)*log(tau_d_GABAB/tau_r_GABAB) :time to peak of the conductance
        
        factor_GABAA = -exp(-tp_GABAA/tau_r_GABAA)+exp(-tp_GABAA/tau_d_GABAA) :GABAA Normalization factor - so that when t = tp_GABAA, gsyn = gpeak
        factor_GABAA = 1/factor_GABAA
        
        factor_GABAB = -exp(-tp_GABAB/tau_r_GABAB)+exp(-tp_GABAB/tau_d_GABAB) :GABAB Normalization factor - so that when t = tp_GABAB, gsyn = gpeak
        factor_GABAB = 1/factor_GABAB
        
        A_GABAA_step = exp(dt*(( - 1.0 ) / tau_r_GABAA))
        B_GABAA_step = exp(dt*(( - 1.0 ) / tau_d_GABAA))
        A_GABAB_step = exp(dt*(( - 1.0 ) / tau_r_GABAB))
        B_GABAB_step = exp(dt*(( - 1.0 ) / tau_d_GABAB))
}

BREAKPOINT {
	SOLVE state
	
        g_GABAA = gmax*(B_GABAA-A_GABAA) :compute time varying conductance as the difference of state variables B_GABAA and A_GABAA
        g_GABAB = gmax*(B_GABAB-A_GABAB) :compute time varying conductance as the difference of state variables B_GABAB and A_GABAB 
        g = g_GABAA + g_GABAB
        i_GABAA = g_GABAA*(v-e_GABAA) :compute the GABAA driving force based on the time varying conductance, membrane potential, and GABAA reversal
        i_GABAB = g_GABAB*(v-e_GABAB) :compute the GABAB driving force based on the time varying conductance, membrane potential, and GABAB reversal
        i = i_GABAA + i_GABAB
}

PROCEDURE state() {
        A_GABAA = A_GABAA*A_GABAA_step
        B_GABAA = B_GABAA*B_GABAA_step
        A_GABAB = A_GABAB*A_GABAB_step
        B_GABAB = B_GABAB*B_GABAB_step
}


NET_RECEIVE (weight, weight_GABAA, weight_GABAB, Psurv, tsyn (ms)){
    LOCAL result
    weight_GABAA = weight
    weight_GABAB = weight*GABAB_ratio
    : Locals:
    : Psurv - survival probability of unrecovered state
    : tsyn - time since last surival evaluation.


    INITIAL{
		tsyn=t
    }

    : Do not perform any calculations if the synapse (netcon) is deactivated.  This avoids drawing from the random stream
    if(  !(weight > 0) ) {
VERBATIM
        return;
ENDVERBATIM
    }

        : calc u at event-
        if (Fac > 0) {
                u = u*exp(-(t - tsyn_fac)/Fac) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           } else {
                  u = Use  
           } 
           if(Fac > 0){
                  u = u + Use*(1-u) :update facilitation variable if Fac>0 Eq. 2 in Fuhrmann et al.
           }    

	   : tsyn_fac knows about all spikes, not only those that released
	   : i.e. each spike can increase the u, regardless of recovered state.
	   tsyn_fac = t

           : recovery
	   if (Rstate == 0) {
	   : probability of survival of unrecovered state based on Poisson recovery with rate 1/tau
	          Psurv = exp(-(t-tsyn)/Dep)
		  result = urand()
		  if (result>Psurv) {
		         Rstate = 1     : recover      

                         if( verboseLevel > 0 ) {
                             printf( "Recovered! %f at time %g: Psurv = %g, urand=%g\n", synapseID, t, Psurv, result )
                         }

		  }
		  else {
		         : survival must now be from this interval
		         tsyn = t
                         if( verboseLevel > 0 ) {
                             printf( "Failed to recover! %f at time %g: Psurv = %g, urand=%g\n", synapseID, t, Psurv, result )
                         }
		  }
           }	   
	   
	   if (Rstate == 1) {
   	          result = urand()
		  if (result<u) {
		  : release!
   		         tsyn = t
			 Rstate = 0

                         A_GABAA = A_GABAA + weight_GABAA*factor_GABAA
                         B_GABAA = B_GABAA + weight_GABAA*factor_GABAA
                         A_GABAB = A_GABAB + weight_GABAB*factor_GABAB
                         B_GABAB = B_GABAB + weight_GABAB*factor_GABAB
                         
                         if( verboseLevel > 0 ) {
                             printf( "Release! %f at time %g: vals %g %g %g \n", synapseID, t, A_GABAA, weight_GABAA, factor_GABAA )
                         }
		  		  
		  }
		  else {
		         if( verboseLevel > 0 ) {
			     printf("Failure! %f at time %g: urand = %g\n", synapseID, t, result )
		         }

		  }

	   }

        

}


PROCEDURE setRNG() {
VERBATIM
    {
        /**
         * This function takes a NEURON Random object declared in hoc and makes it usable by this mod file.
         * Note that this method is taken from Brett paper as used by netstim.hoc and netstim.mod
         */
        void** pv = (void**)(&_p_rng);
        if( ifarg(1)) {
            *pv = nrn_random_arg(1);
        } else {
            *pv = (void*)0;
        }
    }
ENDVERBATIM
}

FUNCTION urand() {
VERBATIM
        double value;
        if (_p_rng) {
                /*
                :Supports separate independent but reproducible streams for
                : each instance. However, the corresponding hoc Random
                : distribution MUST be set to Random.uniform(1)
                */
                value = nrn_random_pick(_p_rng);
                //printf("random stream for this simulation = %lf\n",value);
                return value;
        }else{
ENDVERBATIM
                : the old standby. Cannot use if reproducible parallel sim
                : independent of nhost or which host this instance is on
                : is desired, since each instance on this cpu draws from
                : the same stream
                urand = scop_random(1)
VERBATIM
        }
ENDVERBATIM
        urand = value
}

FUNCTION toggleVerbose() {
    verboseLevel = 1 - verboseLevel
}

================================================================================
